/* 
	Generate .lib file from a .dll on windows os using the 
	Visual Studio Command Line tools. This script expect the visual 
	studio IDE to be installed. 
	
	.. note:: 
		This script only work on the Windows Platform 
		Running the script on other platform will not work
		
	The script expect these flags
	
	:: 
	
		-h --help		view the help message
		-k --keep		keep the temporary file used for the processes
		-d=<path> --dll=<path>	the dll to export the functions from
		-l=<path> --lib=<path>	the name + path for the generated .lib file
		-a=<arch> --arch=<arch>	specify the lib architecture e.g x86
		
	If the ``--lib`` flag is not specified the .lib will be generated in the folder
	where the .dll is located.

	:copyright: 2018-2019, Azeez Adewale
	:license: MIT License Copyright (c) 2018 simple
	:author: Azeez Adewale <azeezadewale98@gmail.com>
	:date: 07 July 2018
	:time: 01:22 AM
	:filename: libfromdll.sim

*/

from simple.debugging.Throw
from simple.io.Directory
from simple.util.Console
import simple.core

block main()
	if !IsWindows() {
		display "This script is for the Windows Platform only " + nl
		__exit__
	}
	keepTemp = false
	defPath = null
	libPath = null
	batPath = ""
	dllFile = ""
	vcvarsall = ""
	arch="x86"
	programFiles = null
	exportedSymbols = ""
	if LengthOf(cmdparams) < 2 {
		Help()
	}	
	
	for param in cmdparams {
		if param == "-h" or param == "--h" or param == "--help" {
			Help()
			
		elif param == "-k" or param == "--keep"
			keepTemp = true
			
		elif StrStartsWith(param, "-d=") or StrStartsWith(param, "--dll=")
			dllFile = RemoveStr(param, "-d=")
			dllFile = RemoveStr(param, "--dll=")
			
		elif StrStartsWith(param, "-a=") or StrStartsWith(param, "--arch=")
			arch = RemoveStr(param, "-a=")
			arch = RemoveStr(param, "--arch=")
			if arch == "x64" { arch = "x86_amd64" }
			
		elif StrStartsWith(param, "-l=") or StrStartsWith(param, "--lib=")
			libPath = RemoveStr(param, "-l=")
			libPath = RemoveStr(param, "--lib=")
			if !StrEndsWith(libPath, ".lib") {
				Throw("Invalid .lib name, " + libPath)
			}
			
		else
			#Throw("invalid parameter '" + param + "' add --help to view flags")
		}
		
	}
	if dllFile == "" {
		Throw("No Windows Shared Library (DLL) Supplied")
		
	elif !StrEndsWith(dllFile, "dll") 
		Throw("Invalid Windows Shared Library (DLL), " + dllFile)
		
	}
	
	if IsNull(batPath) {
		batPath = StrReplace(dllFile, ".dll", ".bat")
	}
	if IsNull(defPath) {
		defPath = StrReplace(dllFile, ".dll", ".def")
	}
	if IsNull(libPath) {
		libPath = StrReplace(dllFile, ".dll", ".lib")
	}
	if IsWindows64() {
		programFiles = new Directory("C:\Program Files (x86)\")
	else
		programFiles = new Directory("C:\Program Files\")
	}
	stdout.Print("\rlooking for vcvarsall.bat : ...")
	folders = programFiles.GetDirectories()
	for folder in folders {
		stdout.Printf("\r%s\rlooking for vcvarsall.bat : " + folder.Name, StrCopy(" ", 80))
		if StrContains(folder.AbsolutePath, "Visual Studio") {
			if __file_exists(folder.AbsolutePath+"\\VC\\vcvarsall.bat") and !StrContains(folder.AbsolutePath, "11") {
				vcvarsall = folder.AbsolutePath+"\VC\vcvarsall.bat"
				stdout.Printf("\r%s\rlooking for vcvarsall.bat : " + folder.Name + " (found)\n", StrCopy(" ", 80))
				break
			}
		}
	}
	if vcvarsall == "" {
		stdout.Printf("\r%s\rlooking for vcvarsall.bat : not found\n", StrCopy(" ", 80))
		stdout.Println("Cannot find vcvarsall.bat, ensure you have at least one Visual Studio installed along with the C/C++ SDK")
		__exit__
	}
	stdout.Print("\rpreparing to export functions : ...")
	__write_file(batPath, 'from "' + vcvarsall + '" ' + arch + nl + 
							'dumpbin /EXPORTS "' + dllFile + '" ')
	System(batPath+' > '+defPath)
	exportedSymbols = __read_file(defPath)
	startIndex = StrSubStr(exportedSymbols,"ordinal hint RVA      name") + 26
	exportedSymbols = StrRight(exportedSymbols, LengthOf(exportedSymbols) - startIndex + 1)
	endIndex = StrSubStr(exportedSymbols,"  Summary")
	exportedSymbols = StrLeft(exportedSymbols, endIndex)
	__write_file(defPath, exportedSymbols)
	exportedSymbols = StrSplit(exportedSymbols,nl)
	finalSymbols = "EXPORTS" + crlf
	for line in exportedSymbols {
		if StrContains(line,"=") {
			line = StrSplit(line, "=")[0]
		}
		exportFunc = StrSplit(line, " ")
		len = LengthOf(exportFunc)
		if len > 2 {
			functionV = RemoveStr(exportFunc[len-1], cr)
			finalSymbols += functionV + crlf
			stdout.Printf("\r%s\rexporting function : " + exportFunc[len-2] + ":" +functionV, StrCopy(" ", 80))
		}
	}
	stdout.Printf("\r%s\rexporting functions : (done)\n", StrCopy(" ", 80))
	stdout.Print("\rpreparing to generate .lib : ...")
	if arch == "x86_amd64" { arch = "x64" }
	__write_file(defPath, finalSymbols)
	__write_file(batPath, 'from "' + vcvarsall + '" ' + arch + nl + 
							'lib.exe /def:"' + defPath + '" /OUT:"' + libPath + '" /MACHINE:' + arch)
	System(batPath + " > nul")
	if __file_exists(libPath) {
		stdout.Printf("\r%s\r.lib generation successful\n", StrCopy(" ", 80))
	else
		stdout.Printf("\r%s\r.lib generation failed\n", StrCopy(" ", 80))
	}
	
	if !keepTemp {
		stdout.Print("\rremoving temporary directories : ")
		System('del "'+defPath+'"')
		System('del "'+batPath+'"')
		System('del "'+StrReplace(libPath,".lib",".exp")+'"')
		stdout.Print("(done)")
	}
	stdout.Println()
	
	
block Help()
	help = 
"usage:  libfromdll [FLAGS]

[FLAGS] : option passed to the program.

The FLAGS include: 
 -h --help			view this help message
 -k --keep			keep the temporary file used for the processes
 -d=<path> --dll=<path>		the dll to export the functions from
 -l=<path> --lib=<path>		the name + path for the generated .lib file
 -a=<arch> --arch=<arch>	specify the lib architecture e.g x86
"
	stdout.Println(help)
	__exit__
	
