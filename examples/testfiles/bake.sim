/* 
	Copyright (c) 2018 Azeez Adewale <azeezadewale98@gmail.com> 
	MIT License Copyright (c) 2018 SIMPLE

*/

/* 
 * @Filename - bake.sim
 * @Author - Azeez Adewale
 * @Date - 08 April 2018
 * @Time - 02:56 AM
 */
 
 /*
		BAKE
		This program is is use for building distributable program
		written in simple to allow application or program written
		in simple to run on client or consumer computer without the 
		need of installing SIMPLE. The program generate executable
		that is runnable per Operating System build.
			Basically this program build your simple source to the 
		platform compatible. The outline below shows the currently 
		supported OS builds
		-----------------------------------
		| WINDOWS         |   .exe        |
		| MAC             |   .app        |
		| LINUX           |   ./program   |
		-----------------------------------
		
		COMMAND OPTIONS
		
			-F/</path>	specify the folder to place the program file
			-N/<name>	specify the output name of the program with no extension
			-I/icon		build your program with indicated icon
			-/h 		display this help note
			-temp -t	leave generated and temporary files after build
			-delete -del	delete the simple source file after successful build
			-debug		when the simple.h file is at ../../simple/src/include/simple.h
			-S/<simple.h> Indicate the path to simple.h
			
			(Compiler Option) ~ if none is supplied the available will be used
			-mingw		use mingw compiler on windows
			-cygwin		use cygwin compiler on windows
			-vs 		use available Visual Studio build tools on windows
		
		
 */
 
 
 
from simple.util.Conversion
from simple.io.File
from simple.io.Directory
from simple.core.String
from simple.system.System
from simple.util.Console

final depModules = [
	"archiver",
	"consoler",
	"file_savant",
	"mathic",
	"string_savant",
	"networker",
	"parser",
	"security",
	"systemic",
	"core_dynamic_module",
	"fulltick"
]
langMap = [
	"simple -v",
	#"python -V",
	"gcc -v"
	]
Bakefile = null
final bakkrey = new Bakkery

/*

Parse "Bakefile"
*/
block main()
	loadPlugins()
	loadLanguages() 
	header()
	bread = new Bread
	
	params = cmdparams
	paramsLen = lengthOf(params) - 1
	for a = 0 to paramsLen {
		param = params[a]
		if param == "-f" {
			if a < paramsLen {
				Bakefile = params[a++]
				#parse bakefile
			else
				throw("bake","Expecting a Bakefile after the -f flag")
			}
		elif param == "-s" or param == "--s"
			if a < paramsLen {
				bread.SourceFile = new File(params[a++])
			else
				throw("bake","Expecting a Source after the -s flag")
			}
		elif param == "-l"
			if a < paramsLen {
				bread.SourceLang = params[a++]
			else
				throw("bake","Expecting a language after the -l flag")
			}
		elif param == "x64"
			breaf.BuildArch = "-m64"
			
		elif param == "x86"
			bread.BuildArch = "-m32"
		elif param == "-h" or param == "--h"
			help()
		}
	}
	if isNull(langMap[bread.SourceLang]) and isNull(bread.SourceFile) and isNull(Bakefile) {
		help()
	}
	if isNull(bread.SourceLang) {
		throw("bake", "you need to provide the source lang")
	elif isNull(langMap[bread.SourceLang])
		throw("bake","The language '" + bread.SourceLang + "' is currently not supported or not installed on this system")
	}
	
	if bread.SourceFile.Exists {
		bread.Name = bread.SourceFile.NameOnly
		bread.SourceFile.Directory.create()
		bread.TempPath = new Directory(bread.SourceFile.Directory.AbsolutePath + bread.Name + "_bake")
		bread.TempPath.create() 
		bread.TempPath = bread.TempPath.AbsolutePath
		bakkrey.bake(bread)
	else
		throw("bake","the " + bread.SourceLang + " source file '" + bread.SourceFile.Name + "' does not exists")
	}

__exit__

block loadPlugins()
	#load files in plugins

block header() 
	header = "bake 0.0.2 (December 27 2018, 09:03 PM)"
	for lang in langMap {
		header += "\n[" + lang[1][:name] + " " + lang[1][:version] + "]"
	}
	stdout.println(header)
	
block loadLanguages()
	_langMap = []
	execTempFile = getTempDirectory() + "/lang_bread"
	for lang in langMap { 
		system(lang + " &> " + execTempFile)
		output = __readfile(execTempFile)
		if strContains(output,"not found") or strContains(output,"error") {
			continue
		}
		splitedOutput = strSplit(output," ")
		name = lang
		version = "0.0.1"
		if strContains(lang,"gcc") {
			name = toLowerCase(splitedOutput[0])
			version = splitedOutput[2]
		else
			name = toLowerCase(splitedOutput[0])
			version = splitedOutput[1]
		}
		_langMap[name] = []
		_langMap[name]["name"] = name
		_langMap[name]["version"] = version
	}
	langMap = _langMap
	_langMap = null
	
block help()
	help = 
"usage:  bake [Bakefile] [OPTIONS] [ENV_VARS]

[Bakefile] : the Bakefile that contains building instructions
[OPTIONS] : option passed to the program.
[ENV_VARS] : change environment variables in Bakefile

The OPTIONS include: 
	-f	provide a Bakefile instead of using detected in next arg
	-s	supply a [LANG] source file for a single build  in next arg
	-l	specify a [LANG] for a single build in next arg
	-h	print this help and exit
	x64	mark all build for 64 bits arc
	x86	mark all build for 32 bits arc
	
Supported [LANG]: 
	simple
	bash/sh"
	stdout.println(help)
	exit(0)
	
class Bread 

	SourceFile = null
	Name = null
	SourceLang = null
	TempPath = null
	IconPath = null
	IsDeploy = false
	LinkStatically = false
	KeepTemp = false
	IsGui = false
	HasIcon = false
	IsDebug = false
	BuildArch = "-m32"

class Bakkery 

	block bake(Bread bread)
		stdout.println("preparing to bake " + bread.Name)
		stdout.print("creating wrapper code for : " + bread.Name + "...")
		cCode = writeWrapper(bread)
		tempFile = new File(bread.TempPath+bread.Name+".bake.c") 
		tempFile.write(cCode)
		stdout.println("(done)")
		
	private
	
		block writeWrapper(Bread bread)
			cCode = WrapperCodeTemplate[bread.SourceLang]
			if bread.SourceLang == "simple" {
				cCode = replaceStr(cCode, "{INCLUDE_FILE}", "<simple/simple.h>")
			}
			
			return cCode
 
#end new bake
depmodules = []
outputName = ""
sourceFile = null
filePath = ""
removeTemps = true
useMINGW = false useCygwin = false useVS = false
specifysavepath = false specifyname = false
folder = "" name = "" isgui = false hasicon = false 
cflags = "" deletesim = false icon = "" isdebug = false
hassimpleh = false 
simpleh = ""
buildsucced = false

buildArch = "-m32"

#Program dependencies
simpleLibPath = "" simpleDllPath = "" simpleHPath = ""
sSharedLib = exeFolder()+'../lib/libsimple.so'
setDepLocation('../bin/')

block magin() header() 
	cmdParameters = cmdparams
	cmdlen = lengthOf(cmdParameters) - 1
	for a = 0 to cmdlen 
		if a = cmdlen && cmdlen >= 1 
			if strEndsWith(cmdParameters[a],'help') or strEndsWith(cmdParameters[a],'/h') help() end 
			filePath = cmdParameters[a]
			sourceFile = new File(cmdParameters[a])
		else
			if (strStartsWith(cmdParameters[a],'-'))
				if cmdParameters[a] == "--help" or cmdParameters[a] == "-h" help() 
				elif strStartsWith(toUpperCase(cmdParameters[a]),'-N/') specifyname = true name = removeStr(cmdParameters[a],"-N/")
				elif strStartsWith(toUpperCase(cmdParameters[a]),'-F/') specifysavepath  = true folder = removeStr(cmdParameters[a],"-F/")
				elif strStartsWith(toUpperCase(cmdParameters[a]),'-I/') hasicon  = true icon = removeStr(cmdParameters[a],"-I/")
				elif strStartsWith(toUpperCase(cmdParameters[a]),'-S/') hassimpleh  = true simpleh = removeStr(cmdParameters[a],"-S/")
				elif strEndsWith(cmdParameters[a],'mingw') useMINGW = true 
				elif strEndsWith(cmdParameters[a],'cygwin') useCygwin = true 
				elif strEndsWith(cmdParameters[a],'vs') useVS = true 
				elif strEndsWith(cmdParameters[a],'gui') isgui = true 
				elif strEndsWith(cmdParameters[a],'debug') or strEndsWith(cmdParameters[a],'d') isdebug = true setDepLocation('')
				elif strEndsWith(cmdParameters[a],'delete') || strEndsWith(cmdParameters[a],'del') if isWindows() deletesim = true end 
				elif strEndsWith(cmdParameters[a],'temp') or strEndsWith(cmdParameters[a],'t')  removeTemps = false 
				//tested
				elif cmdParameters[a] == "--lib" or cmdParameters[a] == "-l"  sSharedLib = cmdParameters[a++]
				elif cmdParameters[a] == "--32-bit" or cmdParameters[a] == "x86" or cmdParameters[a] == "-m32"  buildArch = "-m32"
				elif cmdParameters[a] == "--64-bit" or cmdParameters[a] == "x64" or cmdParameters[a] == "-m64" buildArch = "-m64"
				elif cmdParameters[a] == "--simpleh" or cmdParameters[a] =="-sh"  simpleHPath = '"'+cmdParameters[a++]+'"'
				else printError("Invalid option : "+cmdParameters[a]) end 
				__add_to_list(depmodules, cmdParameters[a]) 
			end
		end
	end
	if filePath = "" printError("No Simple/Complex file indicated ") end
	if outputName == "" 
		tempName = strAfterLast(filePath, '\')
		outputName = strAfterLast(tempName, '.')
		outputName = removeStr(tempName, '.'+outputName)
	end
	#display "params ========"+crlf display depmodules
	display "Input File : "+filePath+crlf
	display "Output Name : "+ outputName +crlf
	if not sourceFile.exists()
		printError("The File '"+filePath+"' does not exists")
	end
	writeCode()
	
block setDepLocation(location)
	simpleLibPath = '"'+exeFolder()+location+'libsimple.lib"' 
	simpleDllPath = '"'+exeFolder()+location+'libsimple.dll"' 
	simpleHPath = '"'+exeFolder()+location+'../include/simple/simple.h"'
	
block writeCode()
	display "Writing ANSI C Wrapper Code... "+crlf
	tCode = formatCode(sourceFile.readFileAsString())
	code = '
		/* 
		 * File:   bake.c
		 * Author: bake || Simple-lang executable file builder
		 * Description: Compile SIMPLE-LANG programs into standalone system executable files.
		 */
		'
			if isdebug code += '
			#include "../../simple/include/simple.h" '+crlf
			else 
			code += '
			#include '+simpleHPath+' '+crlf end	
		if isWindows() and isgui 
			code += 'int WINAPI WinMain ( HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nShowCmd ) {
			int argc ; char **argv ; argc = __argc ; argv = __argv ; ' cflags+="-mwindows "
		else 
			code += 'int main( int argc, char *argv[]) {'
			
		end
		code += '	
		
			static const unsigned char sim_code[] = { '+__string_to_chex(sourceFile.readFileAsString())+'};
			
			List* list ; int x ;
			SimpleState *sState ;
			sState = create_instance();
			sState->argc = argc ; 
			sState->argv = argv ; 
			//hack around cmdparams 
			list = simple_state_newvar(sState,"cmdparams");
			simple_list_setint_gc(sState->vm->sState,list,SIMPLE_VAR_TYPE,SIMPLE_VM_LIST);
			simple_list_setlist_gc(sState->vm->sState,list,SIMPLE_VAR_VALUE);
			list = simple_list_getlist(list,SIMPLE_VAR_VALUE);
			for ( x = 0 ; x < sState->vm->sState->argc ; x++ ) {
					simple_list_addstring_gc(sState->vm->sState,list,sState->vm->sState->argv[x]);
			}
			//hack end
			execute_simple_object(sState, (char *) sim_code);
			finalize_simple_state(sState);
		}

' 
	tempFile = new File(filePath+".bake.c") 
	display "-->Writing obj code to "+tempFile.toString()+crlf
	tempFile.write(code)
	createExecutable(filePath+".bake.c")
	
block createExecutable(path)
	createIcon(path)
	if isWindows()
		display "--->Starting build : "+outputName+".exe"+crlf
		windowsBuild(path)
	elif isMacosx()
		
	elif isLinux() || isUnix()
		display "--->Starting build : "+outputName+""+crlf
		linuxBuild(path)
	end

	 
block windowsBuild(path) 
	mingwBuildTool = new File("C:\MinGW64\bin\gcc.exe")
	cygwinBuildTool = new File("C:\cygwin\bin\gcc.exe")		
	#check if system has mingw
	if useMINGW
		windowBuildMingw(mingwBuildTool,path)
	elif useCygwin
		
	elif useVS
		display simpleLibPath
		windowBuildVS(path)
	else
		display "No Build tool specified using available build tools"+crlf
		if mingwBuildTool.exists() 
			display mingwBuildTool.toString()+" --> MINGW Build Tool Detected"+crlf
			windowBuildMingw(mingwBuildTool,path)
		elif cygwinBuildTool.exists()
		#check if system has cygwin
			display "--> CYGWIN Build Tool Detected"+crlf
			display "--> Building Executable with CYGWIN"+crlf
		else
			display " Resolving to build using Visual Studio"+crlf
			windowBuildVS(path)
		end
	end
	
block createIcon(path)
	if hasicon and isWindows() 
		display "Creating your ICON dependencies files.."+crlf
		con = 'MAINICON  ICON  "'+icon+'"'
		tempFile = new File(path+".rc")  display "		Creating Resources file "+tempFile.toString()+crlf tempFile.write(con)
		con = 'windres '+tempFile.absolutePath()+' -O coff -o '+path+'.res'
		display "		Compiling Resources file "+tempFile.toString()+crlf system(con)
		cflags += path+'.res '
	end
	
block windowBuildVS(path)
	display "--> Building Executable with Visual Studio"+crlf cmd = ''
	for a = 1 to 16
		f = new File('C:\Program Files (x86)\Microsoft Visual Studio '+a+'.0\VC\vcvarsall.bat')
		if f.exists() display "		we found Visual Studio "+a+".0"+crlf 
		cmd = 'from "C:\Program Files (x86)\Microsoft Visual Studio '+a+'.0\VC\vcvarsall.bat" x86'+crlf
		end
	end
	cmd += "cl /Fo.\.\ /Fe.\.\ /GA /MT "+path+" "+simpleLibPath #simple.lib link to actual location
	display cmd + crlf 
	tempFile = new File(path+".bat")  display "		Create batch file "+tempFile.toString()+crlf tempFile.write(cmd)
	display "		Executing build command " + crlf system(tempFile.toString())
	fi = new File(filePath+".bake.exe") if fi.exists() fi.renameTo(outputName+".exe") end 
	cleanTempFiles([removeStr(path, ".c")+".obj",path+".bat",path]) treatProgramAttr()
	
block windowBuildMingw(mingwBuildTool,path)
	display "--> Building Executable with MINGW"+crlf
	exeCmd = mingwBuildTool.absolutePath()+' -c -g -MMD -MP -MF "'+path+'.o.d" -o "'+path+'.o" "'+path+'"'
	display "		Executing compilation command "/*+exeCmd */+ crlf system(exeCmd) 
	exeCmd = mingwBuildTool.absolutePath()+' '+cflags+' -o "'+outputName+'.exe" "'+path+'.o" '+simpleDllPath
	display "		Executing build command " + crlf system(exeCmd) 
	cleanTempFiles([path,path+".o.d",path+".o",path+'.rc',path+'.res']) treatProgramAttr()

block linuxBuild(path)
	/* link at runtime */
	#cmd = 'cc -I/$DESTDIR/$PREFIX/include "-Wl,--no-as-needed" -lm -ldl -o "'+outputName+'" "'+path+'" '+' -Lsimple.so'
	/* link at build time */
	LDFLAG = '-L ./ -Wl,-R../lib/ "-Wl,-rpath,./ ../lib/ /usr/lib/ /lib/ /usr/local/lib/ ~/lib/" "-Wl,--no-as-needed"'
	cmd = 'cc '+buildArch+' -I/$DESTDIR/$PREFIX/include/ -I/usr/include/ '+LDFLAG+' -lm -ldl -o "'+outputName+'" "'+path+'" '+sSharedLib
	#cmd = 'cc "-Wl,--no-as-needed" -lm -ldl -o "'+outputName+'" "'+path+'" '+' '+exeFolder()+'simple.so'
	#cmd = 'cc -fpic -g -lm -ldl -o '+outputName+" "+path+' "-Wl,--no-as-needed" "'+exeFolder()+'simple.so"'
	display cmd + crlf
	display "		Executing compilation command "/*cmd */+ crlf
	display "		Executing build command "/*cmd */+ crlf
	display cmd + crlf
	system(cmd)
	treatProgramAttr()  cleanTempFiles([path,path+".o"]) 
	
block treatProgramAttr() 
	if specifyname
		display "Renaming "+outputName+".exe to "+name +".exe"+ crlf
		f = new File(outputName+".exe") display f.absolutePath()+crlf 
		f.renameTo(removeStr(outputName,strAfterLast(curePathSlashes(outputName),'\'))+name+".exe")
		outputName = removeStr(outputName,strAfterLast(curePathSlashes(outputName),'\'))+name
	end
	if specifysavepath 
		display "Moving "+outputName+" to "+folder + crlf
		if isWindows() 
			system("move "+outputName+'.exe '+folder+"/")
		elif isLinux()
			f = new File(outputName)
			#if f.exists() { f.delete() }
			f.moveTo(folder)
		else
		
		end
	end
	
	
block cleanTempFiles(tempfiles)
	if removeTemps 
		display "		Cleaning up temporary files... "+crlf 
			tlen = lengthOf(tempfiles) - 1
		for a = 0 to tlen
			display "	Deleting : "+tempfiles[a]+crlf
			file = new File(tempfiles[a]) if file.exists() file.delete() end
		end
	end  
	if deletesim display "	Deleting : "+sourceFile.name()+crlf sourceFile.delete() end
	
	
#This block is temporal until simple compiler @Bold simplify @EndBold
#It current usefulness is to clean and format the source code of 
#the simple file to enable it fit into the string quote i.e to make it 
#conform into the standard string in a C source file
block formatCode(code)
	#code = ''+replaceString(code, '"', '\"')
	#code = replaceString(code, ascii(10), '					"')
	finalCode = '"'
	display "->formating the simple source code (TEMP)"+crlf
	lineLen =lengthOf(code) - 1
	for a = 0 to lineLen
		if code[a] == '"'
			finalCode+= '\"'
		elif code[a] == '\'
			finalCode+= '\\'
		elif code[a] == ascii(13) #end of line
			finalCode+= '"'
		elif code[a] == ascii(10) #line break
			finalCode+= crlf+'" '
		else 
			finalCode+= code[a]
		end
	end
	return finalCode+'"'
	
block formatString(value)
	vlen = lengthOf(value) - 1
	value+= 'xs'
	display value
	return value
				
block help()
	display "This program is use to build simple source to platform executable
Usage:  bake ([OPTIONS]) [PATH]
	
The OPTIONS include :
	-F/</path>	specify the folder to place the program file
	-N/<name>	specify the output name of the program with no extension
	-I/icon		build your program with indicated icon
	-help 		display this help note
	-temp -t	leave generated and temporary files after build
	-delete -del	delete the simple source file after successful build
	-debug		when the simple.h file is at ../../simple/src/include/simple.h
	-S/<simple.h>	Indicate the path to simple.h
	
	(Compiler Option) ~ if none is supplied the available will be used
	-mingw		compile with mingw toolchain on windows
	-cygwin		compile with cygwin compiler on windows
	-vs 		use available Visual Studio build tools on windows
	
	(Architecture Option) ~ x86 is the default
	-x86 		use 32 bit compiler for the build
	-x64 		use 64 bit compiler for the build
======================================================="
	__exit__

block printError(msg)
	display "BAKE : "+msg + crlf
	display "======================================================="+crlf
	__exit__
	
	
/*
	BUG MAP 
	-------------------
	001 - the source file should not be gotten first


*
	
	
	
	
	
	
	
	
	
	
	
	
	
