/* 
	Copyright (c) 2016-2018 Azeez Adewale <azeezadewale98@gmail.com> 
	MIT License Copyright (c) 2018 simple 

*/

/* 
 * #filename - Zip.sim
 * #author - Azeez Adewale
 * #date - 10 Febuary 2017
 */

/*

*/
from archive.loadarchiver
import simple.core
 
/*

*/
module archive.zip

/*
	zip mode for writing into the zip archive
*/
ZIP_MODE_WRITE = "w"

/*
	zip mode for creating zip archive
*/
ZIP_MODE_CREATE = "w"

/*
	zip mode for appending new data into the zip archive
*/
ZIP_MODE_APPEND = "a"

/*
	zip mode for reading zip content into memory
*/
ZIP_MODE_READ = "r"

/*

*/
class Zip : Object

	/*

	*/
	string Path = null

	/*

	*/
	char Mode = "w"

	/*

	*/
	boolean IsStreamOpen = false

	/*

	*/
	pointer ZipPointer = null
	
	/*
	
	*/
	number Count = null
	
	/*
	
	*/
	number CompressionType = __ZIP_DEFAULT_COMPRESSION_LEVEL()

	/*

	*/
	block Init(object params...)
		paramsLen = LengthOf(params)
		
		/*if paramsLen == 1 {
			Path = CorrectPath(StringValue(params[0]))
		el*/if paramsLen == 2
			Path = CorrectPath(StringValue(params[0]))
			Mode = StringValue(params[1])
		elif paramsLen == 3 
			Path = StringValue(CorrectPath(params[0]))
			CompressionType = NumberValue(params[1])
			Mode = StringValue(params[2])
		else
			Throw(self, "Calling block with invalid length of parameter")
		}
		if !__file_exists(Path) and Mode != ZIP_MODE_WRITE {
			Throw(self, "The archive '" + Path + "' does not exists ")
			return
		}
		Open()

		return self

	/*

	*/
	block Open(/*string|number*/ params...)
		paramsLen = LengthOf(params)

		if paramsLen == 0 {
			if !IsStreamOpen {
				ZipPointer = __open_zip(Path, CompressionType, Mode)
				if IsNull(ZipPointer) {
					Throw(self, "The archive '" + Path + "' is not a valid zip archive")
					return
				}
				IsStreamOpen = true
			}
		elif paramsLen == 1
			entry = new ZipEntry(self, params[0])
			return entry
		else
			Throw(self, "Calling block with invalid length of parameter")
		}

	/*

	*/
	block Add(string newObject, string heirInZip)
		__open_zip_entry(ZipPointer,heirInZip) 
		__fwrite_zip_entry(ZipPointer,newObject)
		__close_zip_entry(ZipPointer)

	/*

	*/
	block Close()
		if IsStreamOpen {
			__close_zip(ZipPointer)
			IsStreamOpen = false
		}

	/*

	*/
	block Done()
		Close()
		if __vm_has_error() {
			Throw(self, __err__)
		}

	/*

	*/
	block Extract(string extPath)
		tempIsStreamOpen = IsStreamOpen
		if IsStreamOpen {
			Close()
		}
		__extract_zip(Path, extPath)
		IsStreamOpen = tempIsStreamOpen
		
	/*
	
	*/
	block GetCount()
		if !IsStreamOpen {
			return 0
		}
		if IsNull(Count) {
			Count = __total_zip_file_count(ZipPointer)
		}
		return Count
		
	/*

	*/
	block Operator(string op, object value) 
		switch op {
			case "=="
				return Equals(value)
			case "!="
				return !Equals(value)
			case "lengthOf"
				return GetCount()
			case "[]"
				return Open(value)
		}
		return super.Operator(op, value)
		
	/*
	
	*/
	block ToString()
		return "[" + Absolutename() + ":Path=" + Path + ",Mode=" + Mode + ",EntriesCount=" + __total_zip_file_count(ZipPointer) + "]"

	/*

	*/
	private

		/*

		*/
		block SetPath()

		/*

		*/
		block SetMode()

		/*

		*/
		block SetZipPointer()

		/*

		*/
		block SetCount()
