/* 
	Copyright (c) 2016-2018 Azeez Adewale <azeezadewale98@gmail.com> 
	MIT License Copyright (c) 2018 simple 

*/

/* 
 * #filename - ZipEntry.sim
 * #author - Azeez Adewale
 * #date - 11 Febuary 2017
 */
from simple.core.Object
from simple.util.DateTime
from simple.io.Path
from archive.zip.Zip

/*

*/
module archive.zip

/*

*/
class ZipEntry : Object

	/*

	*/
	string Name = ""

	/*

	*/
	string FullName = ""

	/*

	*/
	number Index = 0
	
	/*
	
	*/
	number CentraDirectoryOffset = 0
	
	/*
	
	*/
	number CreateVersion = 0
	
	/*
	
	*/
	number VersionNeeded = 0
	
	/*
	
	*/
	number BitFlag = 0
	
	/*
	
	*/
	number Method = 0
	
	/*
	
	*/
	/*DateTime */DateTime = null
	
	/*
	
	*/
	number CRC = 0

	/*

	*/
	number CompressSize = 0

	/*

	*/
	number Size = 0

	/*

	*/
	number InternalAttr = 0

	/*

	*/
	number ExternalAttr = 0

	/*

	*/
	number HeaderOffset = 0
	
	/*
	
	*/
	number CommentSize = 0
	
	/*
	
	*/
	string Comment = ""
	
	/*
	
	*/
	boolean IsStreamOpen = false
	
	/*
	
	*/
	list ZipStat = []
	
	/*
	
	*/
	boolean IsDirectory = false
	
	/*
	
	*/
	boolean ParentFullName = ""

	/*

	*/
	block Init(Zip zip, /*string|number*/ entry)
		ParentZip = zip
		entry = Normalize(entry)
		if IsString(entry) and StrEndsWith(entry, "/") {
			IsDirectory = true
			if ParentZip.Mode == "w" {
				entry = "/"+StrRemoveLastChar(entry)
				if StrStartsWith(entry, "/") or StrContains(entry, ":") {
					FullName = LastStrAfter(entry, "/") + "/"
				else
					FullName = entry + "/"
				}
				Name = LastStrAfter(entry, "/")
				return self
			}
			exists = false
			Warn(self, "Do not try this on a large zip",3)
			Warn(self, "Looping over zip file to determine if the directory entry '" + entry +"' exists",3)
			Warn(self, "If the directory entry '" + entry +"' exists, the zip file entry will be looped to check the directory contents",3)
			for ent in ParentZip {
				if StrStartsWith(ent.FullName, entry) {
					ent.ParentFullName = entry
					Size += ent.Size
					CompressSize += ent.CompressSize
					__add_to_list(ChildrenList, ent)
					if !exists { exists = true }
				elif exists
					break
				}
			}
			if !exists {
				Throw(self, "The directory entry '" + entry + "' does not exist in the zip archive '" + zip.Path + "'")
				return null
			}
			Index = ChildrenList[0].Index
			CentraDirectoryOffset = ChildrenList[0].CentraDirectoryOffset
			CreateVersion = ChildrenList[0].CreateVersion
			VersionNeeded = ChildrenList[0].VersionNeeded
			BitFlag = ChildrenList[0].BitFlag
			Method = ChildrenList[0].Method
			DateTime = ChildrenList[0].DateTime
			CRC = ChildrenList[0].CRC
			InternalAttr = ChildrenList[0].InternalAttr
			ExternalAttr = ChildrenList[0].ExternalAttr
			HeaderOffset = ChildrenList[0].HeaderOffset
			CommentSize = 9
			FullName = entry
			Comment = "directory"
			entry = "/"+StrRemoveLastChar(entry)
			if entry != "" {
				Name = LastStrAfter(entry, "/")
			}
			return self
		}
		ZipStat = __zip_entry_stat_info(zip.ZipPointer, entry) 
		if IsNull(ZipStat) {
			if ParentZip.Mode == "r" {
				Throw(self, "The entry '" + entry + "' does not exist in the zip archive '" + zip.Path + "'")
				return null
			else
				FullName = Normalize(StringValue(entry))
				if FullName != "" {
					Name = LastStrAfter(FullName, "/")
				}
				return self
			}
		}
		Index = ZipStat[0]
		CentraDirectoryOffset = ZipStat[1]
		CreateVersion = ZipStat[2]
		VersionNeeded = ZipStat[3]
		BitFlag = ZipStat[4]
		Method = ZipStat[5]
		DateTime = DateFromPointer(ZipStat[6])
		CRC = ZipStat[7]
		CompressSize = ZipStat[8]
		Size = ZipStat[9]
		InternalAttr = ZipStat[10]
		ExternalAttr = ZipStat[11]
		HeaderOffset = ZipStat[12]
		CommentSize = ZipStat[13]
		FullName = ZipStat[14]
		Comment = ZipStat[15]
		if FullName != "" {
			Name = LastStrAfter(FullName, "/")
		}
		
		return self
		
	/*
	
	*/
	block Equals(object obj)
		if !__instance_of(obj,"ZipEntry") {
			return false
		}
		return FullName == FullName && Size == Size && CompressSize == CompressSize
		
	/*

	*/
	block Operator(string op, object value) 
		switch op {
			case "=="
				return Equals(value)
			case "!="
				return !Equals(value)
			case "lengthOf"
				if !IsDirectory {
					Throw(self, "This zip entry is not a directory")
					return
				}
				return LengthOf(ChildrenList)
			case "[]"
				if !IsDirectory {
					Throw(self, "This zip entry is not a directory")
					return
				}
				return ChildrenList[NumValueOf(value)]
		}
		return super.Operator(op, value)
		
	/*
	
	*/
	block ToString()
		return "[" + Absolutename() + ":FullName=" + FullName + ",CompressSize=" + CompressSize + ",Size=" + Size + ",DateTime=" + StrValueOf(DateTime) + "]"
		
	/*
	
	*/
	block Extract(string path)
		if !IsNull(ParentZip) {
			if __dir_exists(path) == 1 {
				tempName = FullName
				if StrContains(FullName, "/") and !IsDirectory {
					iDir = RemoveStr(FullName, LastStrAfter(FullName, "/"))
					if ParentFullName != "" {
						iDir = StrRemoveFirst(iDir, ParentFullName) 
						tempName = StrRemoveFirst(tempName, ParentFullName) 
					}
					if __dir_exists(path + "/" + iDir) != 1 {
						sep = ""
						if !StrEndsWith(path,"/") { sep = "/" }
						if !MakeFullDir(path + sep + iDir) {
							Throw(self, "Cannot create directory '" + path + sep + iDir + "' ")
							return null
						}
					}
				}
				if IsDirectory {
					if ParentZip.Mode == "r" {
						for entry in ChildrenList {
							entry.Extract(path)
						}
					else
						Throw(self, "you cannot extract a directory from a zip file if not open with read mode 'r'")
					}
				else
					if ParentZip.Mode == "r" {
						__write_file(path + "/" + tempName, __extract_zip_entry(ParentZip.Path, FullName))	
					else
						Close()
						ParentZip.Close()
						tempZip = new Zip(ParentZip.Path, ParentZip.CompressionType, "r")
						__write_file(path + "/" + tempName, __extract_zip_entry(tempZip.Path, FullName))
						tempZip.Close()
						tempZip = null
						ParentZip.Open()
					}		
				}
			else
				Throw(self, "The directory '" + path + "' does not exists")
			}
		else 
			Throw(self, "Cannot extract the entry, the zip file is invalid")
		}
		
	/*
	
	*/
	block Open()
		if !IsStreamOpen {
			if __open_zip_entry(ParentZip.ZipPointer, FullName) != 0 and FullName != "" {
				Throw(self, "The entry '" + FullName + "' cannot be opened in the archive '" + ParentZip.Path + "'")
				return 
			}
			IsStreamOpen = true
		}
		
	/*
	
	*/
	block Close()
		if IsStreamOpen {
			if __close_zip_entry(ParentZip.ZipPointer) != 0 and FullName != ""  {
				Throw(self, "Cannot close the zip entry stream")
				return
			}
			IsStreamOpen = false
		}
		
	/*
	
	*/
	block Write(string value)
		Open()
		if IsStreamOpen {
			return __write_zip_entry(ParentZip.ZipPointer, value, LengthOf(value)) == 0
		else
			Throw(self, "Cannot write to the entry, Entry stream failed to open")
		}
		return false
		
	/*
	
	*/
	block Fwrite(string value)
		Open()
		if IsStreamOpen {
			if __file_exists(value) {
				return __fwrite_zip_entry(ParentZip.ZipPointer, value) == 0
			else
				Throw(self, "Cannot write file to entry, the file '" + value + "' does not exists")
				return false
			}			
		else
			Throw(self, "Cannot write to the entry, Entry stream failed to open")
		}
		return false
		
	/*
	
	*/
	block Dwrite(string value)	
		if DirPrefix = "" {
			DirPrefix = value
		}
		name = ""
		prefix = FullName
		if __dir_exists(value) == 1 {
			files = __blow_directory(value)
			if !StrEndsWith(prefix, '/') and name != "" {
				prefix += '/'
			}
			for file in files {
				if file[1] == 1 {
					sep = ""
					if FullName != "" {
						sep = "/"
					}
					Dwrite(value + '/' + file[0])
				else
					name = ReplaceStr(value + '/' + file[0], DirPrefix, prefix)
					path = value + '/' + file[0]
					if StrStartsWith(name,"/") {
						name = StrRemoveFirstChar(name)
					}
					if StrContains(CorrectPath(path), ParentZip.Path) {
						Warn("Cannot add the same archive that is been written into : " + ParentZip.Path)
						continue
					}
					if __open_zip_entry(ParentZip.ZipPointer, name) != 0 {
						Throw(self, "The entry '" + name + "' cannot be opened in the archive '" + ParentZip.Path + "'")
						return false
					}
					if __fwrite_zip_entry(ParentZip.ZipPointer, path) != 0 {
						Throw(self, "Error occur while adding file '" + path + "' into the archive")
						return false
					}
					if __close_zip_entry(ParentZip.ZipPointer) != 0 {
						Throw(self, "Cannot close the zip entry stream")
						return false
					}
					IsStreamOpen = false
				}
			}
		else
			Throw(self, "The directory '" + value + "' does not exists")
			return false
		}
		return true
		

	/*

	*/
	private 
	
		/*
		
		*/
		list ChildrenList = []

		/*

		*/
		pointer ParentZip = null
		
		/*
		
		*/
		pointer EntryPointer = null
		
		/*
		
		*/
		string DirPrefix = ""

		/*

		*/
		block SetFullName()

		/*

		*/
		block SetName()

		/*

		*/
		block SetSize()
		
		/*
		
		*/
		block Normalize(entry)
			if IsNumber(entry) {
				return entry
			}
			ent = CurePathSlashes(entry)
			ent = ReplaceStr(ent,'\', '/')
			entLen = LengthOf(ent) - 1
			entry = ""
			for a = 0 to entLen {
				switch ent[a] {
					case "/" 
						while a < entLen and ent[a+1] == "/" {
							a++
						}
						entry += ent[a]
					default
						entry += ent[a]
				}				
			}
			return entry
	
		/*
		
		*/
		block MakeFullDir(dir)
			dirs = StrSplit(dir, "/")
			path = ""
			for dir in dirs {
				if dir == "" or IsWhiteSpace(dir) {
					continue
				}
				path+=dir+'/'
				if __dir_exists(Normalize(path)) != 1 {
					if !__mk_directory(path, 0755) {
						return false
					}
				}
			}
			return true
		
		
		
		
		