
Prefix=file_savant
LibName=file_savant
FileName=file_savant
CreateSimpleWrapper=false
Makefile=false
Enum=false
Module=file_savant
ReadIncludesFile=false
IncludeDir=
SourceDir=
LDLIBSOPTIONS=

[IncludesFile] {
	"../../../simple/include/simple.h"
	"../../../simple/include/simple_state.h"
	<sys/types.h>
	<sys/stat.h>
	<stdarg.h>
}

[StructInit] {
	FILE
}

[ExportFunctions]{
	#int stat(const char *pathname, struct stat *statbuf)
    #int fstat(int fd, struct stat *statbuf)
    #int lstat(const char *pathname, struct stat *statbuf)
	int chmod(const char * path, mode_t mode)
	int fclose(FILE *stream)
	void clearerr(FILE *stream)
	int feof(FILE *stream)
	int ferror(FILE *stream)
	int fflush(FILE *stream)
	int fgetpos(FILE *stream, fpos_t *pos)
	FILE *fopen(const char *filename, const char *mode)
	size_t fread(char *ptr, size_t size, size_t nmemb, FILE *stream)
	size_t fread(void *ptr, size_t size, size_t nmemb, FILE *stream)
	FILE *freopen(const char *filename, const char *mode, FILE *stream)
	int fseek(FILE *stream, long int offset, int whence)
	int fsetpos(FILE *stream, const fpos_t *pos)
	long int ftell(FILE *stream)
	size_t fwrite(const char *ptr, size_t size, size_t nmemb, FILE *stream)
	size_t fwrite(const void *ptr, size_t size, size_t nmemb, FILE *stream)
	int remove(const char *filename)
	int rename(const char *old_filename, const char *new_filename)
	void rewind(FILE *stream)
	void setbuf(FILE *stream, char *buffer)
	int setvbuf(FILE *stream, char *buffer, int mode, size_t size)
	FILE *tmpfile(void)
	char *tmpnam(char *str)
	int fprintf(FILE *stream, const char *format, ...)
	int printf(const char *format, ...) 
	int sprintf(char *str, const char *format, ...)
	#int vfprintf(FILE *stream, const char *format, va_list arg)
	#int vprintf(const char *format, va_list arg)
	#int vsprintf(char *str, const char *format, va_list arg)
	int fscanf(FILE *stream, const char *format, ...)
	int scanf(const char *format, ...)
	int sscanf(const char *str, const char *format, ...)
	int fgetc(FILE *stream)
	char *fgets(char *str, int n, FILE *stream)
	int fputc(int char, FILE *stream)
	int fputs(const char *str, FILE *stream)
	int getc(FILE *stream)
	int getchar(void)
	char *gets(char *str)
	int putc(int char, FILE *stream)
	int putchar(int char)
	int puts(const char *str)
	int ungetc(int char, FILE *stream)
	void perror(const char *str)
	std_print[RegisterOnly]
	printwfb[RegisterOnly]
	cc_fprintf[RegisterOnly]
	ffread[RegisterOnly]
	read_file[RegisterOnly]
	write_file[RegisterOnly]
	file_exists[RegisterOnly]
	path_absolute_path[RegisterOnly]
	path_block_size[RegisterOnly]
	path_blocks[RegisterOnly]
	path_access_date[RegisterOnly]
	path_modify_date[RegisterOnly]
	path_status_date[RegisterOnly]
	path_uid[RegisterOnly]
	path_gid[RegisterOnly]
	path_link_count[RegisterOnly]
	path_node_number[RegisterOnly]
	path_type[RegisterOnly]
	path_size[RegisterOnly]
	check_path[RegisterOnly]
	file_rename[RegisterOnly]
	file_delete[RegisterOnly]
	file_delete_folder[RegisterOnly]
	blow_directory[RegisterOnly]
	mk_directory[RegisterOnly]
	dir_exists[RegisterOnly]
	GetFileAttributes[RegisterOnly]
	is_path_executable[RegisterOnly]
	void printv(char *str)
	void printi(char *str)
	void printw(char *str)
	void printe(char *str)
	void printa(char *str)
	int mkdir(const char *pathname, mode_t mode)
}

[Variables] {
	FILE* stderr
	FILE* stdin
	FILE* stdout
	void* NULL
	int errno
	int BUFSIZ
	int EOF
	int FOPEN_MAX
	int FILENAME_MAX
	int L_tmpnam
	int SEEK_CUR
	int SEEK_END
	int SEEK_SET
	int TMP_MAX
	int CC_FG_NONE
	int CC_FG_BLACK
	int CC_FG_DARK_RED
	int CC_FG_DARK_GREEN
	int CC_FG_DARK_YELLOW
	int CC_FG_DARK_BLUE
	int CC_FG_DARK_MAGENTA
	int CC_FG_DARK_CYAN
	int CC_FG_GRAY
	int CC_FG_DARK_GRAY
	int CC_FG_RED
	int CC_FG_GREEN
	int CC_FG_YELLOW
	int CC_FG_BLUE
	int CC_FG_MAGENTA
	int CC_FG_CYAN
	int CC_FG_WHITE
    int CC_BG_NONE
	int CC_BG_BLACK
	int CC_BG_DARK_RED
	int CC_BG_DARK_GREEN
	int CC_BG_DARK_YELLOW
	int CC_BG_DARK_BLUE
	int CC_BG_DARK_MAGENTA
	int CC_BG_DARK_CYAN
	int CC_BG_GRAY
	int CC_BG_DARK_GRAY
	int CC_BG_RED
	int CC_BG_GREEN
	int CC_BG_YELLOW
	int CC_BG_BLUE
	int CC_BG_MAGENTA
	int CC_BG_CYAN
	int CC_BG_WHITE
	mode_t S_ISUID
	mode_t S_ISGID
	mode_t S_ISVTX
	mode_t S_IRUSR
	mode_t S_IWUSR
	mode_t S_IXUSR
	mode_t S_IRGRP
	mode_t S_IWGRP
	mode_t S_IXGRP
	mode_t S_IROTH
	mode_t S_IWOTH
	mode_t S_IXOTH
	mode_t MS_MODE_MASK
	mode_t S_IWRITE
	mode_t S_IREAD
	mode_t S_IEXEC
}

[NumberType]{
	fpos_t
	size_t
	mode_t
}

[Code]{

/*
  Copyright (C) 2014 Yusuke Suzuki <utatane.tea@gmail.com>

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

/* 
    Copyright (c) 2018 Azeez Adewale <azeezadewale98@gmail.com> 
    MIT License Copyright (c) 2018 simple 

*/

/* 
 * File:   consoler.h
 * Author: thecarisma
 *
 * Created on February 11, 2018, 12:28 AM
 */
 
#ifndef _WIN32
#include <dirent.h>
#endif
 
#ifdef __cplusplus
extern "C" {
#endif

#if !defined(lstat) 
#define lstat(path, statstruct) stat(path, statstruct)
#endif

#define CC_COLOR_BITS 5

typedef enum {
    CC_FG_NONE         = 0  << 0,
    CC_FG_BLACK        = 1  << 0,
    CC_FG_DARK_RED     = 2  << 0,
    CC_FG_DARK_GREEN   = 3  << 0,
    CC_FG_DARK_YELLOW  = 4  << 0,
    CC_FG_DARK_BLUE    = 5  << 0,
    CC_FG_DARK_MAGENTA = 6  << 0,
    CC_FG_DARK_CYAN    = 7  << 0,
    CC_FG_GRAY         = 8  << 0,
    CC_FG_DARK_GRAY    = 9  << 0,
    CC_FG_RED          = 10 << 0,
    CC_FG_GREEN        = 11 << 0,
    CC_FG_YELLOW       = 12 << 0,
    CC_FG_BLUE         = 13 << 0,
    CC_FG_MAGENTA      = 14 << 0,
    CC_FG_CYAN         = 15 << 0,
    CC_FG_WHITE        = 16 << 0,

    CC_BG_NONE         = 0  << CC_COLOR_BITS,
    CC_BG_BLACK        = 1  << CC_COLOR_BITS,
    CC_BG_DARK_RED     = 2  << CC_COLOR_BITS,
    CC_BG_DARK_GREEN   = 3  << CC_COLOR_BITS,
    CC_BG_DARK_YELLOW  = 4  << CC_COLOR_BITS,
    CC_BG_DARK_BLUE    = 5  << CC_COLOR_BITS,
    CC_BG_DARK_MAGENTA = 6  << CC_COLOR_BITS,
    CC_BG_DARK_CYAN    = 7  << CC_COLOR_BITS,
    CC_BG_GRAY         = 8  << CC_COLOR_BITS,
    CC_BG_DARK_GRAY    = 9  << CC_COLOR_BITS,
    CC_BG_RED          = 10 << CC_COLOR_BITS,
    CC_BG_GREEN        = 11 << CC_COLOR_BITS,
    CC_BG_YELLOW       = 12 << CC_COLOR_BITS,
    CC_BG_BLUE         = 13 << CC_COLOR_BITS,
    CC_BG_MAGENTA      = 14 << CC_COLOR_BITS,
    CC_BG_CYAN         = 15 << CC_COLOR_BITS,
    CC_BG_WHITE        = 16 << CC_COLOR_BITS
} cc_color_t;

#ifndef COMMON_LVB_LEADING_BYTE
#define COMMON_LVB_LEADING_BYTE    0x0100
#endif

#ifndef COMMON_LVB_TRAILING_BYTE
#define COMMON_LVB_TRAILING_BYTE   0x0200
#endif

#ifndef COMMON_LVB_GRID_HORIZONTAL
#define COMMON_LVB_GRID_HORIZONTAL 0x0400
#endif

#ifndef COMMON_LVB_GRID_LVERTICAL
#define COMMON_LVB_GRID_LVERTICAL  0x0800
#endif

#ifndef COMMON_LVB_GRID_RVERTICAL
#define COMMON_LVB_GRID_RVERTICAL  0x1000
#endif

#ifndef COMMON_LVB_REVERSE_VIDEO
#define COMMON_LVB_REVERSE_VIDEO   0x4000
#endif

#ifndef COMMON_LVB_UNDERSCORE
#define COMMON_LVB_UNDERSCORE      0x8000
#endif

#ifdef __cplusplus
}
#endif


#ifdef _WIN32
	#define SIMPLE_API __declspec(dllexport)
#else
#if defined(_MSC_VER)
    //  Microsoft 
    #define SIMPLE_API __declspec(dllexport)
    #define SIMPLE_API __declspec(dllimport)
#elif defined(__GNUC__)
    //  GCC
    #define SIMPLE_API __attribute__((visibility("default")))
#else
    //  do nothing and hope for the best?
    #define SIMPLE_API
    #define SIMPLE_API
    #pragma warning Unknown dynamic link import/export semantics.
#endif
#endif

#define SIMPLE_VM_FILE_BUFFERSIZE "Buffer size must be >= 1"
#define SIMPLE_VM_POINTER_FILE "file"
#define SIMPLE_VM_POINTER_FILEPOS "filepos"
#define SIMPLE_API_BADDIRECTORY "Error, Couldn't open the directory"
#define FILE_SAVANT_FILE_ERROR "Error occur while stating the file, check the file existence and permissions"

/* Data */
typedef union Simple_uData {
	int iNumber  ;
	float fNumber  ;
	double dNumber  ;
	char cBytes[4]  ;
	char cBytesDouble[8]  ;
} Simple_uData ;

/*
**	Do nothing if S_ISDIR is defined
**	Else define it Issue with Microsoft Visual Studio
*/
#ifdef S_ISDIR
#else
#if defined(_MSC_VER) && _MSC_VER < 1900
#define S_ISDIR(m) (((m) & 0170000) == (0040000))
#endif
#endif
#if !defined(S_IFLNK)
#define        S_IFLNK  0120000  /* symbolic link */
#endif
#if !defined(S_IFSOCK)
#define        S_IFSOCK  0140000  /* socket */
#endif
#if !defined(S_IFWHT)
#define        S_IFWHT  0160000  /* whiteout */
#endif

#ifndef _POSIX_SOURCE 
#define	S_IREAD		S_IRUSR 
#define	S_IWRITE	S_IWUSR 
#define	S_IEXEC		S_IXUSR 
#endif


#if !defined(S_ISUID)
static const mode_t S_ISUID      = 0x08000000;           ///< does nothing
#endif
#if !defined(S_ISGID)
static const mode_t S_ISGID      = 0x04000000;           ///< does nothing
#endif
#if !defined(S_ISVTX)
static const mode_t S_ISVTX      = 0x02000000;           ///< does nothing
#endif

static const mode_t MS_MODE_MASK = 0x0000ffff;           ///< low word

#if !defined(chmod) && defined(_WIN32)
#define chmod(path, mode) _chmod(path, (mode & MS_MODE_MASK))
#endif
#if !defined(mkdir) && defined(_WIN32)
#define mkdir(path, permission) _mkdir(path)
#endif

int $(Prefix)_cc_fprintf(cc_color_t color, FILE* stream, const char* format, ...);

void $(Prefix)_std_print(void *pointer)
{
	FILE* std_output ;
	char *str  ;
    if ( SIMPLE_API_PARACOUNT != 2 ) {
		SIMPLE_API_ERROR(SIMPLE_API_MISS2PARA);
	} else {
		std_output = (FILE*) SIMPLE_API_GETCPOINTER(1,"SMOOTHC_FILE_SAVANT");
		str = SIMPLE_API_GETSTRING(2);
		fprintf( std_output, "%s", str );
	}
}

void $(Prefix)_printwfb( void *pointer )
{
	if ( SIMPLE_API_PARACOUNT != 4 ) {
		SIMPLE_API_ERROR(SIMPLE_API_MISS4PARA);
		return ;
	}
	SIMPLE_API_IGNORECPOINTERTYPE ;
	if ( ! SIMPLE_API_ISPOINTER(1) && ! SIMPLE_API_ISNUMBER(2) && ! SIMPLE_API_ISNUMBER(3) && SIMPLE_API_ISSTRING(4)) {
		SIMPLE_API_ERROR(SIMPLE_API_BADPARATYPE);
		return ;
	}
	FILE* std_output = (FILE*) SIMPLE_API_GETCPOINTER(1,"SMOOTHC_FILE_SAVANT");
	$(Prefix)_cc_fprintf(((int ) SIMPLE_API_GETNUMBER(2) << 0 ) | ((int ) SIMPLE_API_GETNUMBER(3) << CC_COLOR_BITS ), std_output, SIMPLE_API_GETSTRING(4));
}

void $(Prefix)_path_absolute_path(void *pointer)
{
	char resolved_path[SIMPLE_PATHSIZE];
	if ( SIMPLE_API_PARACOUNT != 1 ) {
		SIMPLE_API_ERROR(SIMPLE_API_MISS2PARA);
		return ;
	}
	if ( SIMPLE_API_ISSTRING(1) ) {
		#ifdef _WIN32
			_fullpath(resolved_path, SIMPLE_API_GETSTRING(1), SIMPLE_PATHSIZE);
		#else
			realpath(SIMPLE_API_GETSTRING(1), resolved_path);
		#endif
		SIMPLE_API_RETSTRING(resolved_path);
	}
}

void $(Prefix)_path_blocks(void *pointer)
{
	struct stat info;
	String * string;
	if ( SIMPLE_API_PARACOUNT != 1 ) {
		SIMPLE_API_ERROR(SIMPLE_API_MISS2PARA);
		return ;
	}
	if ( SIMPLE_API_ISSTRING(1) ) {
            string = simple_string_new_gc(((VM *) pointer)->sState,SIMPLE_API_GETSTRING(1));
            int err = stat(string->str, &info);
			if (err == -1) {
				SIMPLE_API_ERROR(FILE_SAVANT_FILE_ERROR);
			} else {
				#ifdef info.st_blocks
					SIMPLE_API_RETNUMBER((long) info.st_blksize);
				#else
					SIMPLE_API_RETNUMBER(-1);
				#endif
			}
			simple_string_delete_gc(((VM *) pointer)->sState,string);
	} else {
		SIMPLE_API_ERROR(SIMPLE_API_BADPARATYPE);
	}
}

void $(Prefix)_path_block_size(void *pointer)
{
	struct stat info;
	String * string;
	if ( SIMPLE_API_PARACOUNT != 1 ) {
		SIMPLE_API_ERROR(SIMPLE_API_MISS2PARA);
		return ;
	}
	if ( SIMPLE_API_ISSTRING(1) ) {
            string = simple_string_new_gc(((VM *) pointer)->sState,SIMPLE_API_GETSTRING(1));
            int err = stat(string->str, &info);
			if (err == -1) {
				SIMPLE_API_ERROR(FILE_SAVANT_FILE_ERROR);
			} else {
				#ifdef info.st_blksize
					SIMPLE_API_RETNUMBER((long) info.st_blksize);
				#else
					SIMPLE_API_RETNUMBER(512);
				#endif
			}
			simple_string_delete_gc(((VM *) pointer)->sState,string);
	} else {
		SIMPLE_API_ERROR(SIMPLE_API_BADPARATYPE);
	}
}

void $(Prefix)_path_status_date(void *pointer)
{
	struct stat info;
	String * string;
	if ( SIMPLE_API_PARACOUNT != 1 ) {
		SIMPLE_API_ERROR(SIMPLE_API_MISS2PARA);
		return ;
	}
	if ( SIMPLE_API_ISSTRING(1) ) {
            string = simple_string_new_gc(((VM *) pointer)->sState,SIMPLE_API_GETSTRING(1));
            int err = stat(string->str, &info);
			if (err == -1) {
				SIMPLE_API_ERROR(FILE_SAVANT_FILE_ERROR);
			} else {
				SIMPLE_API_RETCPOINTER(info.st_ctime,"SIMPLE_LANG_TIME_");
			}
			simple_string_delete_gc(((VM *) pointer)->sState,string);
	} else {
		SIMPLE_API_ERROR(SIMPLE_API_BADPARATYPE);
	}
}

void $(Prefix)_path_modify_date(void *pointer)
{
	struct stat info;
	String * string;
	if ( SIMPLE_API_PARACOUNT != 1 ) {
		SIMPLE_API_ERROR(SIMPLE_API_MISS2PARA);
		return ;
	}
	if ( SIMPLE_API_ISSTRING(1) ) {
            string = simple_string_new_gc(((VM *) pointer)->sState,SIMPLE_API_GETSTRING(1));
            int err = stat(string->str, &info);
			if (err == -1) {
				SIMPLE_API_ERROR(FILE_SAVANT_FILE_ERROR);
			} else {
				SIMPLE_API_RETCPOINTER(info.st_mtime,"SIMPLE_LANG_TIME_");
			}
			simple_string_delete_gc(((VM *) pointer)->sState,string);
	} else {
		SIMPLE_API_ERROR(SIMPLE_API_BADPARATYPE);
	}
}

void $(Prefix)_path_access_date(void *pointer)
{
	struct stat info;
	String * string;
	if ( SIMPLE_API_PARACOUNT != 1 ) {
		SIMPLE_API_ERROR(SIMPLE_API_MISS2PARA);
		return ;
	}
	if ( SIMPLE_API_ISSTRING(1) ) {
            string = simple_string_new_gc(((VM *) pointer)->sState,SIMPLE_API_GETSTRING(1));
            int err = stat(string->str, &info);
			if (err == -1) {
				SIMPLE_API_ERROR(FILE_SAVANT_FILE_ERROR);
			} else {
				SIMPLE_API_RETCPOINTER(info.st_atime,"SIMPLE_LANG_TIME_");
			}
			simple_string_delete_gc(((VM *) pointer)->sState,string);
	} else {
		SIMPLE_API_ERROR(SIMPLE_API_BADPARATYPE);
	}
}

void $(Prefix)_path_gid(void *pointer)
{
	struct stat info;
	String * string;
	if ( SIMPLE_API_PARACOUNT != 1 ) {
		SIMPLE_API_ERROR(SIMPLE_API_MISS2PARA);
		return ;
	}
	if ( SIMPLE_API_ISSTRING(1) ) {
            string = simple_string_new_gc(((VM *) pointer)->sState,SIMPLE_API_GETSTRING(1));
            int err = stat(string->str, &info);
			if (err == -1) {
				SIMPLE_API_ERROR(FILE_SAVANT_FILE_ERROR);
			} else {
				SIMPLE_API_RETNUMBER((long) info.st_gid);
			}
			simple_string_delete_gc(((VM *) pointer)->sState,string);
	} else {
		SIMPLE_API_ERROR(SIMPLE_API_BADPARATYPE);
	}
}

void $(Prefix)_path_uid(void *pointer)
{
	struct stat info;
	String * string;
	if ( SIMPLE_API_PARACOUNT != 1 ) {
		SIMPLE_API_ERROR(SIMPLE_API_MISS2PARA);
		return ;
	}
	if ( SIMPLE_API_ISSTRING(1) ) {
            string = simple_string_new_gc(((VM *) pointer)->sState,SIMPLE_API_GETSTRING(1));
            int err = stat(string->str, &info);
			if (err == -1) {
				SIMPLE_API_ERROR(FILE_SAVANT_FILE_ERROR);
			} else {
				SIMPLE_API_RETNUMBER((long) info.st_uid);
			}
			simple_string_delete_gc(((VM *) pointer)->sState,string);
	} else {
		SIMPLE_API_ERROR(SIMPLE_API_BADPARATYPE);
	}
}

void $(Prefix)_path_link_count(void *pointer)
{
	struct stat info;
	String * string;
	if ( SIMPLE_API_PARACOUNT != 1 ) {
		SIMPLE_API_ERROR(SIMPLE_API_MISS2PARA);
		return ;
	}
	if ( SIMPLE_API_ISSTRING(1) ) {
            string = simple_string_new_gc(((VM *) pointer)->sState,SIMPLE_API_GETSTRING(1));
            int err = stat(string->str, &info);
			if (err == -1) {
				SIMPLE_API_ERROR(FILE_SAVANT_FILE_ERROR);
			} else {
				SIMPLE_API_RETNUMBER((long) info.st_nlink);
			}
			simple_string_delete_gc(((VM *) pointer)->sState,string);
	} else {
		SIMPLE_API_ERROR(SIMPLE_API_BADPARATYPE);
	}
}

void $(Prefix)_path_node_number(void *pointer)
{
	struct stat info;
	String * string;
	if ( SIMPLE_API_PARACOUNT != 1 ) {
		SIMPLE_API_ERROR(SIMPLE_API_MISS2PARA);
		return ;
	}
	if ( SIMPLE_API_ISSTRING(1) ) {
            string = simple_string_new_gc(((VM *) pointer)->sState,SIMPLE_API_GETSTRING(1));
            int err = stat(string->str, &info);
			if (err == -1) {
				SIMPLE_API_ERROR(FILE_SAVANT_FILE_ERROR);
			} else {
				SIMPLE_API_RETNUMBER((long) info.st_ino);
			}
			simple_string_delete_gc(((VM *) pointer)->sState,string);
	} else {
		SIMPLE_API_ERROR(SIMPLE_API_BADPARATYPE);
	}
}

void $(Prefix)_path_type(void *pointer)
{
	struct stat info;
	String * string;
	if ( SIMPLE_API_PARACOUNT != 1 ) {
		SIMPLE_API_ERROR(SIMPLE_API_MISS2PARA);
		return ;
	}
	if ( SIMPLE_API_ISSTRING(1) ) {
            string = simple_string_new_gc(((VM *) pointer)->sState,SIMPLE_API_GETSTRING(1));
            int err = stat(string->str, &info);
			if (err == -1) {
				SIMPLE_API_ERROR(FILE_SAVANT_FILE_ERROR);
			} else {
				switch (info.st_mode & S_IFMT) {
					case S_IFWHT:  SIMPLE_API_RETNUMBER(160000);	break; 
					case S_IFBLK:  SIMPLE_API_RETNUMBER(60000);	break;
					case S_IFCHR:  SIMPLE_API_RETNUMBER(20000);	break;
					case S_IFDIR:  SIMPLE_API_RETNUMBER(40000);	break;
					case S_IFIFO:  SIMPLE_API_RETNUMBER(10000);	break;
					case S_IFLNK:  SIMPLE_API_RETNUMBER(120000);	break;
					case S_IFREG:  SIMPLE_API_RETNUMBER(100000);	break;
					case S_IFSOCK: SIMPLE_API_RETNUMBER(140000);	break;
					default:       SIMPLE_API_RETNUMBER(0000000);   break;
				}
			}
			simple_string_delete_gc(((VM *) pointer)->sState,string);
	} else {
		SIMPLE_API_ERROR(SIMPLE_API_BADPARATYPE);
	}
}

void $(Prefix)_path_size(void *pointer)
{
	struct stat info;
	String * string;
	if ( SIMPLE_API_PARACOUNT != 1 ) {
		SIMPLE_API_ERROR(SIMPLE_API_MISS2PARA);
		return ;
	}
	if ( SIMPLE_API_ISSTRING(1) ) {
            string = simple_string_new_gc(((VM *) pointer)->sState,SIMPLE_API_GETSTRING(1)); 
            int err = stat(string->str, &info);
			if (err == -1) 
				SIMPLE_API_ERROR(FILE_SAVANT_FILE_ERROR);
			else
				SIMPLE_API_RETNUMBER((long long) info.st_size);
			
			simple_string_delete_gc(((VM *) pointer)->sState,string);
	} else {
		SIMPLE_API_ERROR(SIMPLE_API_BADPARATYPE);
	}
}

void $(Prefix)_check_path(void *pointer)
{
	struct stat info;
	String * string;
	if ( SIMPLE_API_PARACOUNT != 1 ) {
		SIMPLE_API_ERROR(SIMPLE_API_MISS2PARA);
		return ;
	}
	if ( SIMPLE_API_ISSTRING(1) ) {
            string = simple_string_new_gc(((VM *) pointer)->sState,SIMPLE_API_GETSTRING(1)); 
            int err = stat(string->str, &info);
			SIMPLE_API_RETNUMBER(err);
			simple_string_delete_gc(((VM *) pointer)->sState,string);
	} else {
		SIMPLE_API_ERROR(SIMPLE_API_BADPARATYPE);
	}
}

void $(Prefix)_ffread ( void *pointer )
{
	char *str  ;
	int size  ;
	int nResult  ;
	FILE *fp  ;
	if ( SIMPLE_API_PARACOUNT != 3 ) {
		SIMPLE_API_ERROR(SIMPLE_API_MISS3PARA);
		return ;
	}
	if ( SIMPLE_API_ISPOINTER(1) && SIMPLE_API_ISNUMBER(2) && SIMPLE_API_ISNUMBER(3) ) {
		fp = (FILE *) SIMPLE_API_GETCPOINTER(1,"SMOOTHC_FILE_SAVANT") ;
		if ( fp != NULL ) {
			size = SIMPLE_API_GETNUMBER(3) ;
			if ( size < 1 ) {
				SIMPLE_API_ERROR(SIMPLE_VM_FILE_BUFFERSIZE);
				return ;
			}
			str = (char *) simple_state_malloc(((VM *) pointer)->sState,size);
			if ( str == NULL ) {
				SIMPLE_API_ERROR(SIMPLE_OOM);
				return ;
			}
			nResult = fread(str,SIMPLE_API_GETNUMBER(2),size,fp);
			if ( nResult == 0 ) {
				SIMPLE_API_RETNUMBER(nResult);
			} else {
				SIMPLE_API_RETSTRING2(str,nResult);
			}
			simple_state_free(((VM *) pointer)->sState,str);
		}
	} else {
		SIMPLE_API_ERROR(SIMPLE_API_BADPARATYPE);
	}
}

void $(Prefix)_read_file(void *pointer)
{
	FILE *fp  ;
	long int nSize  ;
	char *cBuffer  ;
	if ( SIMPLE_API_PARACOUNT != 1 ) {
		SIMPLE_API_ERROR(SIMPLE_API_MISS1PARA);
		return ;
	}
	if ( SIMPLE_API_ISSTRING(1) ) {
		fp = fopen(SIMPLE_API_GETSTRING(1) , "rb" );
		if ( fp == NULL ) {
			SIMPLE_API_ERROR(SIMPLE_VM_ERROR_CANTOPENFILE);
			return ;
		}
		fseek( fp , 0 , SEEK_END );
		nSize = ftell(fp);
		fseek( fp , 0 , SEEK_SET );
		cBuffer = (char *) simple_state_malloc(((VM *) pointer)->sState,nSize);
		if ( cBuffer == NULL ) {
			SIMPLE_API_ERROR(SIMPLE_OOM);
			return ;
		}
		fread( cBuffer , 1 , nSize , fp );
		fclose( fp ) ;
		SIMPLE_API_RETSTRING2(cBuffer,nSize);
		simple_state_free(((VM *) pointer)->sState,cBuffer);
	} else {
		SIMPLE_API_ERROR(SIMPLE_API_BADPARATYPE);
	}
}

void $(Prefix)_write_file ( void *pointer )
{
	FILE *fp  ;
	if ( SIMPLE_API_PARACOUNT != 2 ) {
		SIMPLE_API_ERROR(SIMPLE_API_MISS2PARA);
		return ;
	}
	if ( SIMPLE_API_ISSTRING(1) ) {
		if ( SIMPLE_API_ISSTRING(2) ) {
			fp = fopen(SIMPLE_API_GETSTRING(1) , "w+b" );
			if ( fp == NULL ) {
				SIMPLE_API_ERROR(SIMPLE_VM_ERROR_CANTOPENFILE);
				return ;
			}
			fwrite( SIMPLE_API_GETSTRING(2) , SIMPLE_API_GETSTRINGSIZE(2) , 1 , fp );
			fclose( fp ) ;
		} else {
			SIMPLE_API_ERROR("Error in second parameter, Function requires string !");
			return ;
		}
	} else {
		SIMPLE_API_ERROR(SIMPLE_API_BADPARATYPE);
	}
}

void $(Prefix)_file_exists ( void *pointer )
{
	if ( SIMPLE_API_PARACOUNT != 1 ) {
		SIMPLE_API_ERROR(SIMPLE_API_MISS1PARA);
		return ;
	}
	if ( SIMPLE_API_ISSTRING(1) ) {
            FILE *fp  ;
            fp = fopen(SIMPLE_API_GETSTRING(1) , "r" );
            if ( fp ) {
                fclose( fp ) ;
                SIMPLE_API_RETNUMBER(1);
            } else {
                SIMPLE_API_RETNUMBER(0);
            }
	} else {
		SIMPLE_API_ERROR(SIMPLE_API_BADPARATYPE);
	}
}

void $(Prefix)_file_rename ( void *pointer )
{
	if ( SIMPLE_API_PARACOUNT != 2 ) {
		SIMPLE_API_ERROR(SIMPLE_API_MISS2PARA);
		return ;
	}
	if ( SIMPLE_API_ISSTRING(1) && SIMPLE_API_ISSTRING(2) ) {
		if (rename(SIMPLE_API_GETSTRING(1),SIMPLE_API_GETSTRING(2)) == 0) {
			SIMPLE_API_RETNUMBER(1);
		} else {
			SIMPLE_API_RETNUMBER(0);
		}
	} else {
		SIMPLE_API_ERROR(SIMPLE_API_BADPARATYPE);
	}
}

void $(Prefix)_file_delete ( void *pointer )
{
	if ( SIMPLE_API_PARACOUNT != 1 ) {
		SIMPLE_API_ERROR(SIMPLE_API_MISS2PARA);
		return ;
	}
	if ( SIMPLE_API_ISSTRING(1) ) {
		#ifdef unlink
			SIMPLE_API_RETNUMBER(unlink(SIMPLE_API_GETSTRING(1)));
		#else
			SIMPLE_API_RETNUMBER(remove(SIMPLE_API_GETSTRING(1)));
		#endif
	} else {
		SIMPLE_API_ERROR(SIMPLE_API_BADPARATYPE);
	}
}

void $(Prefix)_file_delete_folder ( void *pointer )
{
	if ( SIMPLE_API_PARACOUNT != 1 ) {
		SIMPLE_API_ERROR(SIMPLE_API_MISS2PARA);
		return ;
	}
	if ( SIMPLE_API_ISSTRING(1) ) {
		#ifdef _WIN32
			SIMPLE_API_RETNUMBER(RemoveDirectory(SIMPLE_API_GETSTRING(1)));
		#else
			#ifdef rmdir
				SIMPLE_API_RETNUMBER(rmdir(SIMPLE_API_GETSTRING(1)));
			#else
				SIMPLE_API_RETNUMBER(remove(SIMPLE_API_GETSTRING(1)));
			#endif
		#endif
	} else {
		SIMPLE_API_ERROR(SIMPLE_API_BADPARATYPE);
	}
}

void $(Prefix)_blow_directory ( void *pointer )
{
	const char *cStr  ;
	List *pList, *pList2  ;
	#ifdef _WIN32
	/* Windows Only */
	WIN32_FIND_DATA fdFile  ;
	HANDLE hFind  ;
	String *pString  ;
	#else
	DIR *pDir  ;
	struct dirent *pDirent  ;
	struct stat st  ;
	String *child_string;
	#endif
	if ( SIMPLE_API_PARACOUNT != 1 ) {
		SIMPLE_API_ERROR(SIMPLE_API_MISS1PARA);
		return ;
	}
	if ( SIMPLE_API_ISSTRING(1) ) {
		cStr = SIMPLE_API_GETSTRING(1);
		pList = SIMPLE_API_NEWLIST ;
		#ifdef _WIN32
		/* Windows Only */
		pString = simple_string_new_gc(((VM *) pointer)->sState,cStr);
		simple_string_add_gc(((VM *) pointer)->sState,pString,"\\*.*");
		cStr = simple_string_get(pString);
		if ( ! ((hFind = FindFirstFile(cStr, &fdFile)) == INVALID_HANDLE_VALUE) ) {
			do {
				if ( strcmp(fdFile.cFileName, ".") != 0 && strcmp(fdFile.cFileName, "..") != 0 ) {
					pList2 = simple_list_newlist_gc(((VM *) pointer)->sState,pList);
					simple_list_addstring_gc(((VM *) pointer)->sState,pList2,fdFile.cFileName);
					if ( fdFile.dwFileAttributes & FILE_ATTRIBUTE_DIRECTORY ) {
						simple_list_adddouble_gc(((VM *) pointer)->sState,pList2,1);
					} else {
						simple_list_adddouble_gc(((VM *) pointer)->sState,pList2,0);
					}
				}
			} while (FindNextFile(hFind, &fdFile))  ;
			SIMPLE_API_RETLIST(pList);
		} else {
			SIMPLE_API_ERROR(SIMPLE_API_BADDIRECTORY);
		}
		simple_string_delete_gc(((VM *) pointer)->sState,pString);
		#else
		pDir = opendir(cStr);
		if ( pDir != NULL ) {
			while ( (pDirent = readdir(pDir)) ) {
				child_string = simple_string_new_gc(((VM *) pointer)->sState,cStr);
				simple_string_add_gc(((VM *) pointer)->sState,child_string,pDirent->d_name);
				if ( strcmp(pDirent->d_name, ".") != 0 && strcmp(pDirent->d_name, "..") != 0 ) {
					pList2 = simple_list_newlist_gc(((VM *) pointer)->sState,pList);
					simple_list_addstring_gc(((VM *) pointer)->sState,pList2,pDirent->d_name);
					int err = stat(child_string->str,&st);
					switch (st.st_mode & S_IFMT) {
						case S_IFWHT:  SIMPLE_API_RETNUMBER(160000);	break; 
						case S_IFBLK:  SIMPLE_API_RETNUMBER(60000);	break;
						case S_IFCHR:  SIMPLE_API_RETNUMBER(20000);	break;
						case S_IFDIR:  simple_list_adddouble_gc(((VM *) pointer)->sState,pList2,1);	break;
						case S_IFIFO:  SIMPLE_API_RETNUMBER(10000);	break;
						case S_IFLNK:  SIMPLE_API_RETNUMBER(120000);	break;
						case S_IFREG:  simple_list_adddouble_gc(((VM *) pointer)->sState,pList2,0);	break;
						case S_IFSOCK: SIMPLE_API_RETNUMBER(140000);	break;
						default:       SIMPLE_API_RETNUMBER(0000000);   break;
					}
				}
			}
			closedir(pDir);
			SIMPLE_API_RETLIST(pList);
		} else {
			SIMPLE_API_ERROR(SIMPLE_API_BADDIRECTORY);
		}
		simple_string_delete_gc(((VM *) pointer)->sState,child_string);
		#endif
	} else {
		SIMPLE_API_ERROR(SIMPLE_API_BADPARATYPE);
	}
}

void $(Prefix)_mk_directory ( void *pointer )
{
	if ( SIMPLE_API_PARACOUNT != 2 ) {
		SIMPLE_API_ERROR(SIMPLE_API_MISS2PARA);
		return ;
	}
	if ( SIMPLE_API_ISSTRING(1) && SIMPLE_API_ISNUMBER(2)) {
            #ifdef _WIN32
                SIMPLE_API_RETNUMBER(_mkdir(SIMPLE_API_GETSTRING(1)) == 0);
            #else
                SIMPLE_API_RETNUMBER(mkdir(SIMPLE_API_GETSTRING(1), SIMPLE_API_GETNUMBER(2)) == 0); 
            #endif
	} else {
		SIMPLE_API_ERROR(SIMPLE_API_BADPARATYPE);
	}
}

void $(Prefix)_dir_exists ( void *pointer )
{
	if ( SIMPLE_API_PARACOUNT != 1 ) {
		SIMPLE_API_ERROR(SIMPLE_API_MISS2PARA);
		return ;
	}
	if ( SIMPLE_API_ISSTRING(1) ) {
            struct stat info;
            int err = stat(SIMPLE_API_GETSTRING(1), &info);
            if (err == -1 ) {
                if (ENOENT == errno) {
                    SIMPLE_API_RETNUMBER(-1); //does not exist
                } else {
                    SIMPLE_API_RETNUMBER(-2); //unknown error 
                }
            } else {
                if (S_ISDIR(info.st_mode)) {
                    SIMPLE_API_RETNUMBER(1); //it is a directory
                } else {
                    SIMPLE_API_RETNUMBER(0); //it not a directory
                }
            }
	} else {
		SIMPLE_API_ERROR(SIMPLE_API_BADPARATYPE);
	}
}

//todo so badly
void $(Prefix)_GetFileAttributes ( void *pointer )
{
	if ( SIMPLE_API_PARACOUNT != 1 ) {
		SIMPLE_API_ERROR(SIMPLE_API_MISS2PARA);
		return ;
	}
	if ( SIMPLE_API_ISSTRING(1) ) {
		#if defined(_WIN32)
			SIMPLE_API_RETNUMBER(GetFileAttributes(SIMPLE_API_GETSTRING(1)));
		#else
			//check all the atributes to immitate the windows api GetFileAttributes
			SIMPLE_API_RETNUMBER(-1);
		#endif
	} else {
		SIMPLE_API_ERROR(SIMPLE_API_BADPARATYPE);
	}
}

void $(Prefix)_is_path_executable(void *pointer)
{
	struct stat info;
	String * string;
	if ( SIMPLE_API_PARACOUNT != 1 ) {
		SIMPLE_API_ERROR(SIMPLE_API_MISS2PARA);
		return ;
	}
	if ( SIMPLE_API_ISSTRING(1) ) {
            string = simple_string_new_gc(((VM *) pointer)->sState,SIMPLE_API_GETSTRING(1));
			int err = stat(string->str, &info);
			if (err == -1) {
				SIMPLE_API_ERROR(FILE_SAVANT_FILE_ERROR);
			} else {
				SIMPLE_API_RETNUMBER(info.st_mode & S_IXUSR == 1);
			}
			simple_string_delete_gc(((VM *) pointer)->sState,string);
	} else {
		SIMPLE_API_ERROR(SIMPLE_API_BADPARATYPE);
	}
}

}

[PostCode] {
static int Write(FILE *stream, const char *format, va_list ap) {
#if defined(_WIN32) && !defined(__MINGW32__)
    return vfprintf_s(stream, format, ap);
#else
    return vfprintf(stream, format, ap);
#endif
}

#ifdef _WIN32
static const WORD FG[] = {
/* NONE         */  0,
/* BLACK        */  0,
/* DARK_RED     */  FOREGROUND_RED,
/* DARK_GREEN   */  FOREGROUND_GREEN,
/* DARK_YELLOW  */  FOREGROUND_RED | FOREGROUND_GREEN,
/* DARK_BLUE    */  FOREGROUND_BLUE,
/* DARK_MAGENTA */  FOREGROUND_RED | FOREGROUND_BLUE,
/* DARK_CYAN    */  FOREGROUND_GREEN | FOREGROUND_BLUE,
/* GRAY         */  FOREGROUND_GREEN | FOREGROUND_BLUE | FOREGROUND_RED,
/* DARK_GRAY    */  FOREGROUND_INTENSITY,
/* RED          */  FOREGROUND_INTENSITY | FOREGROUND_RED,
/* GREEN        */  FOREGROUND_INTENSITY | FOREGROUND_GREEN,
/* YELLOW       */  FOREGROUND_INTENSITY | FOREGROUND_RED | FOREGROUND_GREEN,
/* BLUE         */  FOREGROUND_INTENSITY | FOREGROUND_BLUE,
/* MAGENTA      */  FOREGROUND_INTENSITY | FOREGROUND_RED | FOREGROUND_BLUE,
/* CYAN         */  FOREGROUND_INTENSITY | FOREGROUND_GREEN | FOREGROUND_BLUE,
/* WHITE        */  FOREGROUND_INTENSITY | FOREGROUND_GREEN | FOREGROUND_BLUE | FOREGROUND_RED,
};

static const WORD BG[] = {
/* NONE         */  0,
/* BLACK        */  0,
/* DARK_RED     */  BACKGROUND_RED,
/* DARK_GREEN   */  BACKGROUND_GREEN,
/* DARK_YELLOW  */  BACKGROUND_RED | BACKGROUND_GREEN,
/* DARK_BLUE    */  BACKGROUND_BLUE,
/* DARK_MAGENTA */  BACKGROUND_RED | BACKGROUND_BLUE,
/* DARK_CYAN    */  BACKGROUND_GREEN | BACKGROUND_BLUE,
/* GRAY         */  BACKGROUND_GREEN | BACKGROUND_BLUE | BACKGROUND_RED,
/* DARK_GRAY    */  BACKGROUND_INTENSITY,
/* RED          */  BACKGROUND_INTENSITY | BACKGROUND_RED,
/* GREEN        */  BACKGROUND_INTENSITY | BACKGROUND_GREEN,
/* YELLOW       */  BACKGROUND_INTENSITY | BACKGROUND_RED | BACKGROUND_GREEN,
/* BLUE         */  BACKGROUND_INTENSITY | BACKGROUND_BLUE,
/* MAGENTA      */  BACKGROUND_INTENSITY | BACKGROUND_RED | BACKGROUND_BLUE,
/* CYAN         */  BACKGROUND_INTENSITY | BACKGROUND_GREEN | BACKGROUND_BLUE,
/* WHITE        */  BACKGROUND_INTENSITY | BACKGROUND_GREEN | BACKGROUND_BLUE | BACKGROUND_RED,
};

static WORD ExtractForeground(WORD attributes) {
    const WORD mask =
        FOREGROUND_INTENSITY |
        FOREGROUND_GREEN |
        FOREGROUND_BLUE |
        FOREGROUND_RED;
    return attributes & mask;
}

static WORD ExtractBackground(WORD attributes) {
    const WORD mask =
        BACKGROUND_INTENSITY |
        BACKGROUND_GREEN |
        BACKGROUND_BLUE |
        BACKGROUND_RED;
    return attributes & mask;
}

static WORD ExtractOthers(WORD attributes) {
    const WORD mask =
        COMMON_LVB_LEADING_BYTE |
        COMMON_LVB_TRAILING_BYTE |
        COMMON_LVB_GRID_HORIZONTAL |
        COMMON_LVB_GRID_LVERTICAL |
        COMMON_LVB_GRID_RVERTICAL |
        COMMON_LVB_REVERSE_VIDEO |
        COMMON_LVB_UNDERSCORE;
    return attributes & mask;
}

static WORD Generate(unsigned int fg, unsigned int bg, WORD attributes) {
    WORD result = ExtractOthers(attributes);
    result |= ((fg == 0) ? ExtractForeground(attributes) : FG[fg]);
    result |= ((bg == 0) ? ExtractBackground(attributes) : BG[bg]);
    return result;
}

#else

static inline unsigned int Shift(
        unsigned int val, unsigned int normal, unsigned int bright) {
    if (val == 0) {
        return 9 + normal;
    }
    val -= 1;
    /* background */
    if (val >= 8) {
        return (val - 8) + bright;
    }
    return val + normal;
}

static void UnixTerminalColorize(
        FILE* stream, unsigned int fg, unsigned int bg) {
        fprintf(stream, "\x1B[39;49;%u;%um", Shift(fg, 30, 90), Shift(bg, 40, 100));
}

static void UnixTerminalRestore(FILE* stream) {
    fputs("\x1B[39;49m\x1B[K", stream);
}
#endif  /* _WIN32 */

int $(Prefix)_cc_fprintf(cc_color_t color, FILE* stream, const char* format, ...) {
    unsigned int fg;
    unsigned int bg;
    int result = -EINVAL;
    va_list ap;
#ifdef _WIN32
    HANDLE console;
	CONSOLE_SCREEN_BUFFER_INFO csbi;
#endif  /* _WIN32 */

    va_start(ap, format);

    if (!isatty(fileno(stream)) || (stream != stdout && stream != stderr)) {
        result = Write(stream, format, ap);
        goto finish;
    }

    fg = color & ((1 << CC_COLOR_BITS) - 1);
    bg = (color >> CC_COLOR_BITS) & ((1 << CC_COLOR_BITS) - 1);

#ifdef _WIN32
    console = GetStdHandle(
            stream == stdout ? STD_OUTPUT_HANDLE : STD_ERROR_HANDLE);
    if (console == INVALID_HANDLE_VALUE) {
        result = Write(stream, format, ap);
        goto finish;
    }
    if (!GetConsoleScreenBufferInfo(console, &csbi)) {
        result = Write(stream, format, ap);
        goto finish;
    }
    SetConsoleTextAttribute(console, Generate(fg, bg, csbi.wAttributes));
    result = Write(stream, format, ap);
    SetConsoleTextAttribute(console, csbi.wAttributes);
#else
    UnixTerminalColorize(stream, fg, bg);
    Write(stream, format, ap);
    UnixTerminalRestore(stream);
#endif  /* _WIN32 */

finish:
    va_end(ap);
    return result;
}

}
