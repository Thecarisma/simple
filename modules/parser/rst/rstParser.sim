
/*

*/

/* 
 * @Filename - rstBlock.sim
 * @Author - Azeez Adewale
 * @Date - 16 March 2019
 */

/*

*/
from simple.core.Object
from simple.util.LookAhead
from parser.rst.rstBlock
from parser.rst.rstDirective

/*

*/
module parser.rst
	
/*

*/
class rstParser : Object

	/*
	
	*/
	final Nothing = 0

	/*
	
	*/
	final Heading1 = 1
	
	/*
	
	*/
	final Heading2 = 2
	
	/*
	
	*/
	final Heading3 = 3
	
	/*
	
	*/
	final Paragraph = 4
	
	/*
	
	*/
	final NewLine = 5
	
	/*
	
	*/
	final ListItem = 6
	
	/*
	
	*/
	final Literal = 7
	
	/*
	
	*/
	final Comment = 8
	
	/*
	
	*/
	final Directive = 9
	
	/*
	
	*/
	final Link = 10
	
	/*
	
	*/
	final Reference = 11

	/*
	
	*/
	final members = []

	/*
	
	*/
	block Init(string rsText)
		lookAhead = new LookAhead(ReplaceStr(rsText+nl+nl,crlf,nl))
		
	/*
	
	*/
	block Parse()
		components = []
		currentType = Nothing
		currentValue = ""
		currentIndex = -1
		
		while lookAhead.Peek() != EOF {
				
			if IsNewToken(nl) {
				lookAhead.Pop() lookAhead.Pop()
				
				if lookAhead.Peek() == "*" {
					__add_to_list(members, ParseList())
					
				else
					continue					
				}
				
			elif lookAhead.Peek() == "*"
				__add_to_list(members, ParseList())
				
			elif lookAhead.Peek() == ":" and lookAhead.Peek(1) == ":"
				lookAhead.Pop() lookAhead.Pop()
				ParseWhiteSpace()
				currentValue = ParseParagraph(tab)
				__add_to_list(members, new RstBlock(Literal, currentValue))
				
			elif lookAhead.Peek() == "." and lookAhead.Peek(1) == "."
				lookAhead.Pop() lookAhead.Pop()
				ParseWhiteSpace()
				if lookAhead.Peek() == "_" {
					ParseLink()
					
				elif lookAhead.Peek() == "["
					ParseReference()
					
				else
					currentValue = ""
					while lookAhead.Peek() != nl {
						currentValue += lookAhead.Pop()
					}
					if StrContains(currentValue,"::") {
						directiveHead = StrSplit(currentValue, "::")
						directiveName = StrTrim(directiveHead[0])
						directiveValue = ""
						directiveContent = ""
						directiveOptions = []
						if LengthOf(directiveHead) <= 1 {
							lookAhead.Pop()
							while lookAhead.Peek() != nl {
								directiveValue += lookAhead.Pop()
							}
							directiveValue = StrTrim(directiveValue)
							if directiveValue == "" or StrStartsWith(directiveValue, ":") {
								Warn(self, "Syntax Error : Expecting at least 1 argument in '" + directiveName + "' directive. At Line " + lookAhead.Position())
							}
							
						else
							directiveValue = StrTrim(directiveHead[1])
						}
						if StrStartsWith(directiveValue, ":") {
							valueSplit = StrSplit(directiveValue, ":")
							if LengthOf(valueSplit) < 3 {
								Throw(self, "Syntax Error : Error in '" + directiveName + "' directive: invalid option '" + valueSplit[1] + "' expecting value nothing found At Line " + lookAhead.Position() )
								return
							}
							directiveOptions[valueSplit[1]] = StrTrim(valueSplit[2])
							directiveValue = ""
						}
						currentValue = ParseParagraph()
						values = StrSplit(currentValue, nl)
						for value in values {
							if value == "" { continue }
							if (!StrStartsWith(value, " ") and !StrStartsWith(value, tab)) {
								Throw(self, "Syntax Error : Explicit markup ends without a blank line. At Line " + lookAhead.Position() )
								return
							}
							value = StrTrim(value)
							if !StrStartsWith(value, ":") {
								directiveContent += value + nl
								continue
								
								
							}
							valueSplit = StrSplit(value, ":")
							if LengthOf(valueSplit) < 3 {
								Throw(self, "Syntax Error : Error in '" + directiveName + "' directive: invalid option '" + valueSplit[1] + "' expecting value nothing found At Line " + lookAhead.Position() )
								return
							}
							directiveOptions[valueSplit[1]] = StrTrim(valueSplit[2])
						}
						
						__add_to_list(members, new RstBlock(Directive, new RstDirective(directiveName, directiveValue, directiveOptions, directiveContent)))
					else
						currentValue = ParseParagraph()
						__add_to_list(members, new RstBlock(Comment, currentValue))
					}
					
				}
				
			elif IsWhiteSpace(lookAhead.Peek()) 
				ParseWhiteSpace()
				
			else
				currentValue = ParseParagraph()
				spLen = LengthOf(StrSplit(currentValue,nl))
				if spLen == 2 or spLen == 3 {
					if spLen == 3 {
						sp = StrSplit(currentValue,nl)
						if (!StrStartsWith(sp[0],"=") or !StrEndsWith(sp[0],"=")) And
							(!StrStartsWith(sp[0],"-") or !StrEndsWith(sp[0],"-")) And
							(!StrStartsWith(sp[0],"'") or !StrEndsWith(sp[0],"'")) And
							(!StrStartsWith(sp[0],"^") or !StrEndsWith(sp[0],"^")) {
							Throw(self, "Syntax Error : Invalid Heading and Paragraph detected. At Line " + lookAhead.Position() )
							return
						}
						currentValue = ""
						currentValue += sp[1] + nl + sp[2]
					}
					if StrEndsWith(currentValue,"==") {
						spl = StrSplit(currentValue,"===")
						__add_to_list(members, new RstBlock(Heading1, spl[0]))
						
					elif StrEndsWith(currentValue,"^^")
						spl = StrSplit(currentValue,"^^^")
						__add_to_list(members, new RstBlock(Heading1, spl[0]))
						
					elif StrEndsWith(currentValue,"---")
						spl = StrSplit(currentValue,"---")
						__add_to_list(members, new RstBlock(Heading2, spl[0]))
						
					elif StrEndsWith(currentValue,"'''")
						spl = StrSplit(currentValue,"'''")
						__add_to_list(members, new RstBlock(Heading3, spl[0]))
						
					else
						__add_to_list(members, new RstBlock(Paragraph, currentValue))
					}
				else
					if StrEndsWith(currentValue,"===") or StrEndsWith(currentValue,"^^^") or StrEndsWith(currentValue,"---") or StrEndsWith(currentValue,"'''"){
						Throw(self, "Syntax Error : Invalid Heading and Paragraph detected. At Line " + lookAhead.Position() )
						return
					}
					__add_to_list(members, new RstBlock(Paragraph, currentValue))
				}
				
				
				
			}
		}
		
		if LengthOf(references) > 0 and !addedReference {
			addedReference = true
			__add_to_list(members, new RstBlock(Reference, references))
		}
		return self
		
	/*
	
	*/
	block Operator(string op, object value) 
		switch op {
			case "lengthOf"
				return LengthOf(members)
			case "[]"
				return members[value]
		}
		return super.Operator(op, value)
		
	/*
	
	*/
	private 
	
		/*
		
		*/
		LookAhead lookAhead = null
		
		/*
		
		*/
		EOF = -1
		
		/*
		
		*/
		currentTab = ""
		
		/*
		
		*/
		globalState = true
		
		/*
		
		*/
		references = []
		
		/*
		
		*/
		addedReference = false
		
		/*
		
		*/
		block ParseReference()
			lookAhead.Pop()
			currentValue = ""
			index = "" 
			
			while lookAhead.Peek() != "]" {
				index += lookAhead.Pop()
			}
			lookAhead.Pop()
			
			if !IsDigit(index) and !StrStartsWith(index, "#")
				Throw(self, "Syntax Error : Malformed reference tag detected, expecting a digit or a tag beginning with '#'. At Line " + lookAhead.Position() )
				return
			}
			while lookAhead.Peek() != EOF {
				if lookAhead.Peek() == nl {
					if (lookAhead.Peek(1)+lookAhead.Peek(2)) == ".." {
						break
					else
						currentValue += lookAhead.Pop()
					}
					
				else
					currentValue += lookAhead.Pop()
				}
				
			}
			if !IsNull(references[index]) {
				Throw(self, "Syntax Error : Duplicate explicit target detected '" + index + "'. At Line " + lookAhead.Position() )
				return
			}
			references[index] = currentValue
		
		/*
		
		*/#ignore : after Http(s)
		block ParseLink()
			lookAhead.Pop()
			currentValue = ""
			linkAttr = []
			if !IsAlphaNum(lookAhead.Peek()) {
				Throw(self, "Syntax Error : Malformed url detected. At Line " + lookAhead.Position() )
				return
			}
			while lookAhead.Peek() != EOF {
				if lookAhead.Peek() == nl {
					__add_to_list(linkAttr, StrTrim(currentValue))
					currentValue = ""
					__add_to_list(members, new RstBlock(Link, linkAttr))
					break
				elif lookAhead.Peek() == ":" and LengthOf(linkAttr) == 0
					lookAhead.Pop()
					if !IsWhiteSpace(lookAhead.Peek()) {
						Throw(self, "Syntax Error : Malformed url detected. At Line " + lookAhead.Position() )
						return
					}
					__add_to_list(linkAttr, StrTrim(currentValue))
					currentValue = ""
				else
					currentValue += lookAhead.Pop()
				}
				
			}
			
		
		/*
		
		*/
		block ParseParagraph(params...)
			currentValue = ""
			_tab = ""
			if LengthOf(params) > 0 {
				_tab = params[0]
				#@_tab+"<"
			}
			while lookAhead.Peek() != EOF {
				
				if IsWhiteSpace(lookAhead.Peek()) {
					currentTab = ""
					check = IsNewToken(nl)
					currentValue += currentTab
					if check {
						return currentValue
					else
						currentValue += lookAhead.Pop()
					}
				else
					if lookAhead.Peek() == tab { }
					currentValue += lookAhead.Pop()
				}				
			}
			return currentValue
		
		/*
		
		*/
		block ParseList()
			currentValue = ""
			lookAhead.Pop()
			
			if IsWhiteSpace(lookAhead.Peek()) {
				currentTab = ""
				ParseWhiteSpace()
				while lookAhead.Peek() != EOF {
					if IsWhiteSpace(lookAhead.Peek()) {
						currentTab = ""
						check = IsNewToken(nl, currentTab)
						currentValue += currentTab
						if check or lookAhead.Peek() == "*" {
							break
						else
							currentValue += lookAhead.Pop()
						}
						
					else
						currentValue += lookAhead.Pop()
					}
				}
				
			else
				Throw(self, "Syntax Error : Unexpected character, Expected white Spaces(s), found '" + lookAhead.Pop() + "' at Line " + lookAhead.Position() )
			}
			
			return (new RstBlock(ListItem, currentValue))
		
		/*
		
		*/
		block ParseWhiteSpace()
			while IsWhiteSpace(lookAhead.Peek()) {
				if lookAhead.Peek() == tab {
					currentTab += StrCopy(" ", 3)
					lookAhead.Pop() lookAhead.Pop()
				else
					currentTab += " "
					lookAhead.Pop()
				}
			}
			
		/*
		
		*/
		block IsNewToken(token, params...)
			if lookAhead.Peek() == nl {
				leadingTab = ""
				if LengthOf(params) > 0 {
					leadingTab = params[0]
				}
				while IsWhiteSpace(lookAhead.Peek()) {
					if lookAhead.Peek(1) == token and !IsWhiteSpace(lookAhead.Peek(2)) {
						return true
					elif IsAlphaNum(lookAhead.Peek(1))
						if leadingTab != "" {
						}
						if leadingTab != "" and lookAhead.Peek() == nl {
							lookAhead.Pop()
							Throw(self, "Syntax Error : Bullet list ends without a NewLine at Line " + lookAhead.Position() )
						}
						return false
					}

					currentTab += lookAhead.Pop()
				}
			}
			return false
			
			
			
			
			
			
	
	