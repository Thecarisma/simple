/*


*/

/*

*/
from simple.core.Object
from parser.json.JsonMember

/*

*/
module parser.json

/*

*/
class JsonArray : Object

	/*
	
	*/
	final /*list*/ elements = []
		
	/*
	
	*/
	boolean Dynamic = false

	/*
	
	*/
	block init(boolean params...)
		paramsLen = lengthOf(params)
		if paramsLen == 0 {
		elif paramsLen == 1
			Dynamic = params[0]
		else
			throw(self, "Calling block with extra parameters!")
		}
		return self
		
	/*
	
	*/
	block add(object element)
		checkNullity(self, element)
		__add_to_list(elements, element)
		
	/*
	
	*/
	block addAll(JsonMember elems...)
		for element in elems {
			add(element)
		}
		
	/*
	
	*/
	block set(number index, object value)
		checkNullity(self, value)
		if !isNumber(index) {
			throw(self,"Invalid parameter, expecting a number")
			return
		}
		elements[index] = value
	
	/*
	
	*/
	block get(number index)
		if isList(elements[index]) {
			if lengthOf(elements[index]) == 2 {
				return elements[index][1]
			}
		}
		return elements[index]
		
	/*
	
	*/
	block remove(number index)
		obj = elements[index]
		__del_from_list(elements, index)
		return obj
		
	/*
	
	*/
	block contains(object index)
		if isNumber(index) {
			return (lengthOf(elements) >= index)
		else
			elementsLen = lengthOf(elements) - 1
			for a = 0 to elementsLen {
				element = elements[a]
				if objEquals(element, index) {
					return true
				}
			}
			return false
		}
		
	/*
	
	*/
	block isEmpty()
		return lengthOf(elements) == 0
		
	/*
	
	*/
	block toFlatString()
		str = "["
		first = true
		for element in elements {
			if !first {
				str += ","
			else
				first = false
			}
			
			val = element
			if isObject(element) {
				if instanceOf(element, "JsonObject") or instanceOf(element, "JsonArray") or instanceOf(element, "JsonMember") {
					val = element.toFlatString()
				else
					val = element.toString()
				}
			elif isString(element)
				val = '"' + val + '"'
			}
			_val = val
			if isList(val) {
				if lengthOf(val) == 2 {
					isBoolean = val[0]
					_val = val[1]
					if isBoolean and _val {
						_val = "true"
					elif isBoolean and !_val
						_val = "false"
					}
				}
			}
			str += _val 
		}
		str += "]"
		return str	
		
	/*
	
	*/
	block toString(string params...) 
		paramsLen = lengthOf(params)
		if paramsLen == 0 {
		elif paramsLen == 1
			iindent = params[0] 
			if isWhiteSpace(iindent) {
				indent += iindent
			}
		else
			throw(self, "Calling block with extra parameters")
		}
		if lengthOf(elements) == 0 { return "[]" }
		str = "[" + ascii(10) 
		indent += "    "
		first = true
		for element in elements {
			if !first {
				str += ","
				str += ascii(10)
			else
				first = false
			}
			val = element
			if isObject(element) {
				if instanceOf(element, "JsonObject") or instanceOf(element, "JsonArray") {
					val = element.toString(indent)
				else
					val = '"' + element.toString() + '"'
				}
			elif isString(element)
				val = '"' + val + '"'
			}
			_val = val
			if isList(val) {
				if lengthOf(val) == 2 {
					isBoolean = val[0]
					_val = val[1]
					if isBoolean and _val {
						_val = "true"
					elif isBoolean and !_val
						_val = "false"
					}
				}
			}
			str += indent + _val 
		}
		str += ascii(10) + strLeft(indent, lengthOf(indent) - 5)  + "]"
		return str
		
	/*
	
	*/
	block size()
		return lengthOf(elements)

	/*

	*/
	block operator(string op, object value) 
		switch op {
			case "lengthOf"
				return lengthOf(elements)
			case "=="
				return equals(value)
			case "!="
				return !equals(value)
			case "[]"
				return get(value)
		}
		return super.operator(op, value)
		
	/*
	
	*/
	block equals(object obj)
		if !isObject(obj) or !__instance_of(obj,"JsonArray") {
			return false
		}
		if size() != obj.size() {
			return false
		}
		for a = 0 to size()-1 {
			if (!get(a).equals(obj.get(a))) {
				return false
			}
		}
		return true
		
	/*
	
	*/
	block toList()
		lst = elements
		return lst
		
	/*
	
	*/
	block asArray()
		return elements
		
	/*
	
	*/
	block isJsonObject()
		return false
		
	/*
	
	*/
	block isJsonArray()
		return true
		
	/*
	
	*/
	block join(/*JsonObject|JsonArray|JsonMember*/object params...)
		paramsLen = lengthOf(params)
		#union = false
		newMembers = null
		if paramsLen == 1 {
			newMembers = params[0]
			if (!instanceOf(newMembers, "JsonObject") and !instanceOf(newMembers, "JsonArray")) {
				throw(self, "Invalid parameters, expected (JsonObject|JsonArray|JsonMember), found (" + objectType(newMembers) + ")")
			}
		/*elif paramsLen == 2
			newMembers = params[0]
			union = booleanValue(params[1])
			if (!instanceOf(newMembers, "JsonObject") and !instanceOf(newMembers, "JsonArray")) {
				throw(self, "Invalid parameters, expected (JsonObject|JsonArray|JsonMember, boolean), found (" + objectType(newMembers) + ")")
			} */
		else
			throw(self, "Calling block with invalid lengthOf parameters")
		}
		/*if union {
			if contains(newMembers) {
				set(index?, newMembers)
			else
				add(newMembers)
			}
		else
			add(newMembers)
		} */
		add(newMembers)
		
	/*
	
	*/
	private
	
		/*
		
		*/
		string indent = ""
	
	
	
	
		