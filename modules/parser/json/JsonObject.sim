/*


*/

/*

*/
from simple.core.Object
from parser.json.JsonMember

/*

*/
module parser.json

/*

*/
class JsonObject : Object

	/*
	
	*/
	final /*list*/ members = []
		
	/*
	
	*/
	boolean Dynamic = false

	/*
	
	*/
	block init(boolean params...)
		paramsLen = lengthOf(params)
		if paramsLen == 0 {
		elif paramsLen == 1
			Dynamic = params[0]
		else
			throw(self, "Calling block with extra parameters!")
		}
		return self
		
	/*
	
	*/
	block add(object params...)
		name = null
		value = null
		member = null
		paramsLen = lengthOf(params)
		
		if paramsLen == 1 {
			member = params[0]
			if !instanceOf(member,"JsonMember") {
				throw(self, "Invalid parameter, expected (parser.json.JsonMember), found (" + objectType(member) + ")")
				return
			}
		elif paramsLen == 2
			name = params[0]
			value = params[1] 
			if isString(name) {
				member = new JsonMember(name, value)
			else
				throw(self, "Invalid parameter, expected (string, object), found (" + objectType(name) + "," + objectType(value) + ")")
				return
			}
		else
			throw(self, "Calling block with extra parameters")
			return
		}
		__add_to_list(members, member)
		if Dynamic {
			__add_attribute_to_object(self,member.Name) 
			__set_attribute_value(self,member.Name,member.Value) 
			
			/*getter = block { 
				return get(0)	
			}
			setter = block(value) { 
				set(0, value)
			}
			__add_method_to_object(self, "get" + member.Name, getter)
			__add_method_to_object(self, "set" + member.Name, setter) */
		}
		
	/*
	
	*/
	block addAll(JsonMember mems...)
		for member in mems {
			add(member)
		}
		
	/*
	
	*/
	block set(object index, object value)
		if isNumber(index) {
			if instanceOf(value,"JsonMember") {
				members[index] = value
			else
				member = new JsonMember(members[index].Name, value)
				members[index] = member
			}
		elif isString(index)
			membersLen = lengthOf(members) - 1
			for a = 0 to membersLen {
				member = members[a]
				if objEquals(member.Name, index) {
					if instanceOf(value,"JsonMember") {
						members[a] = value
					else
						member = new JsonMember(members[a].Name, value)
						members[a] = member
					}
					return
				}
			}
			add(index, value)
		else
			throw(self, "Invalid parameter, expected (String|Number, object), found (" + objectType(index) + "," + objectType(value) + ")")
		}
	
	/*
	
	*/
	block get(object index)
		if isNumber(index) {
			return members[index]
		elif isString(index) 
			membersLen = lengthOf(members) - 1
			for a = 0 to membersLen {
				if objEquals(members[a].getName(), index) {
					return members[a]
				}
			}
			throw(self, strFormat("The requested JSON member '%s' cannot be found", index) )
		else
			throw(self, "Invalid parameter, expected (String|Number), found (" + objectType(index) + ")")
		}
		
	/*
	
	*/
	block getValue(object index)
		return get(index).getValue()
		
	/*
	
	*/
	block remove(object index)
		if isNumber(index) {
			obj = members[index]
			__del_from_list(members, index)
			return obj
		elif isString(index)
			membersLen = lengthOf(members) - 1
			for a = 0 to membersLen {
				member = members[a]
				if objEquals(member.getName(), index) {
					__del_from_list(members, a)
					return member
				}
			}
			return null
		else
			throw(self, "Invalid parameter, expected (String|Number), found (" + objectType(index) + ")")
			return null
		}
		
	/*
	
	*/
	block contains(object index)
		if isNumber(index) {
			return (lengthOf(members) >= index)
		elif isString(index)
			membersLen = lengthOf(members) - 1
			for a = 0 to membersLen {
				member = members[a]
				if objEquals(member.getName(), index) {
					return true
				}
			}
			return false
		else
			throw(self, "Invalid parameter, expected (String|Number), found (" + objectType(index) + ")")
			return null
		}
		
	/*
	
	*/
	block isEmpty()
		return lengthOf(members) == 0
		
	/*
	
	*/
	block toFlatString()
		str = "{"
		first = true
		for member in members {
			if !first {
				str += ","
			else
				first = false
			}
			str += member.toFlatString()
		}
		str += "}"
		return str	
		
	/*
	
	*/
	block toString(string params...)
		paramsLen = lengthOf(params)
		if paramsLen == 0 {
		elif paramsLen == 1
			iindent = params[0]
			if isWhiteSpace(iindent) {
				indent += iindent
			}
		else
			throw(self, "Calling block with extra parameters")
		}
		if lengthOf(members) == 0 { return "{}" }
		str = "{" + ascii(10) 
		indent += "    "
		first = true
		for member in members {
			if !first {
				str += ","
				str += ascii(10)
			else
				first = false
			}
			str += indent + member.toString(indent)
		}
		str += ascii(10) + strLeft(indent, lengthOf(indent) - 5)  + "}"
		return str
		
	/*
	
	*/
	block size()
		return lengthOf(members)

	/*

	*/
	block operator(string op, object value) 
		switch op {
			case "lengthOf"
				return lengthOf(members)
			case "=="
				return equals(value)
			case "!="
				return !equals(value)
			case "[]"
				return get(value)
		}
		return super.operator(op, value)
		
	/*
	
	*/
	block equals(object obj)
		if !isObject(obj) or !__instance_of(obj,"JsonObject") {
			return false
		}
		if size() != obj.size() {
			return false
		}
		for a = 0 to size()-1 {
			if (!get(a).equals(obj.get(a))) {
				return false
			}
		}
		return true
		
	/*
	
	*/
	block toList()
		lst = members
		return lst
		
	/*
	
	*/
	block asArray()
		return members
		
	/*
	
	*/
	block isJsonObject()
		return true
		
	/*
	
	*/
	block isJsonArray()
		return false
		
	/*
	
	*/
	block join(/*JsonObject|JsonMember*/object params...)
		paramsLen = lengthOf(params)
		union = false
		newMembers = null
		if paramsLen == 1 {
			newMembers = params[0]
			if !instanceOf(newMembers, "JsonObject") and !instanceOf(newMembers, "JsonMember") {
				throw(self, "Invalid parameters, expected (JsonObject|JsonMember), found (" + objectType(newMembers) + ")")
			}
		elif paramsLen == 2
			newMembers = params[0]
			union = booleanValue(params[1])
			if (!instanceOf(newMembers, "JsonObject") and !instanceOf(newMembers, "JsonMember")) {
				throw(self, "Invalid parameters, expected (JsonObject|JsonMember, boolean), found (" + objectType(newMembers) + ")")
			}
		else
			throw(self, "Calling block with invalid lengthOf parameters")
		}
		if instanceOf(newMembers, "JsonObject") {
			for member in newMembers {
				if union {
					if contains(member.Name) {
						set(member.Name, member)
					else 
						add(member)
					}
				else
					add(member)
				}
			}
		else
			if union {
				if contains(newMembers.Name) {
					set(newMembers.Name, newMembers)
				else 
					add(newMembers)
				}
			else
				add(newMembers)
			}
		}
		
	/*
	
	*/
	private
	
		/*
		
		*/
		string indent = ""
	
	
	
	
		