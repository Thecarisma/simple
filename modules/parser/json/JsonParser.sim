/*


*/

/*@Prefix
	http://json.org/
	https://github.com/llbit/jo-json
*/

/*

*/
from simple.core.Object
from parser.json.JsonObject
from parser.json.JsonArray
from parser.json.JsonMember
from simple.util.Type
from simple.util.LookAhead

/*

*/
module parser.json

/*

*/
block ObjectToJson(object params...)
	paramsLen = LengthOf(params)
	key = null
	obj = null
	json = null
	isJsonObject = false
	if paramsLen == 1 {
		obj = params[0]
		json = new JsonArray(true)
	elif paramsLen == 2
		key = params[0]
		obj = params[1]
		json = new JsonObject(true)
		isJsonObject = true
		if !IsString(key) {
			Throw("parser.json:objectToJson", "Invalid parameters, Expected (string, object), Found (" + ObjectType(key) + "," + ObjectType(obj) + ")")
		}
	else
		Throw("parser.json:objectToJson", "Calling block with invalid length of parameter")
		return null
	}
	if IsObject(obj) {
		jsonObj = new JsonObject(true)
		attributes = __object_attributes(obj)
		for attribute in attributes {
			__value = __get_attribute_value(obj, attribute)
			value = null
			if IsObject(__value) {
				value = ObjectToJson(value)
			elif IsList(__value)
				value = ListToJson(__value)
			else
				value = __value
			}
			jsonObj.Add(attribute, value)
		}
		if isJsonObject {
			json.Add(key, jsonObj)
		else
			return jsonObj
		}
		
	elif IsList(obj)
		if isJsonObject {
			return ListToJson(key, obj)
		else
			return ListToJson(obj)
		}
		
	else
		if isJsonObject {
			json.Add(key, jsonObj)
		else
			json.Add(jsonObj)
		}
		
	}
	return json
	
/*

*/
block ListToJson(object params...)
	paramsLen = LengthOf(params)
	key = null
	obj = null
	json = null
	json2 = new JsonArray(true)
	isJsonObject = false
	if paramsLen == 1 {
		obj = params[0]
		json = new JsonArray(true)
		if IsObject(obj) and InstanceOf(obj, "List") {
			obj = obj.ToList()
		}
		if !IsList(obj) {
			Throw("parser.json:objectToJson", "Invalid parameters, Expected (list|List), Found (" + ObjectType(obj) + ")")
		}
	elif paramsLen == 2
		key = params[0]
		obj = params[1]
		json = new JsonObject(true)
		isJsonObject = true
		if IsObject(obj) and InstanceOf(obj, "List") {
			obj = obj.ToList()
		}
		if !IsString(key) or !IsList(obj) {
			Throw("parser.json:objectToJson", "Invalid parameters, Expected (string, list|List), Found (" + ObjectType(key) + "," + ObjectType(obj) + ")")
		}
	else
		Throw("parser.json:objectToJson", "Calling block with invalid length of parameter")
		return null
	}
	for item in obj {
		nkey = null 
		element = null
		if IsObject(item) {
			element = ObjectToJson(item)
		elif IsList(item)
			if LengthOf(item) == 2 {
				if IsString(item[0]) {
					element = ObjectToJson(item[0], item[1])
				else
					element = ListToJson(item)
				}
			else
				element = ListToJson(item)
			}
		else
			element = item
		}
		if !IsNull(nkey) {
			element = new JsonMember(nkey, value)
		}
		json2.Add(element)
		
	}
	if isJsonObject {
		json.Add(key, json2)
		return json
	}
		
	return json2

/*

*/
class JsonParser : Object
		
	/*
	
	*/
	boolean Dynamic = false

	/*
	
	*/
	block Init(object param)
		if IsString(param) {
			IsString = true
			lookAhead = new LookAhead(param)
			EOF = ""
			
		elif InstanceOf(param, "FileStream")
			
		else
			Throw(self, "Invalid parameter, Expecting (String|FileStream), Found (" + ObjectType(param) + ")")
		}
		
		return self
		
	/*
	
	*/
	block Parse()
		jsonValue = null
		SkipWhiteSpace()
		switch lookAhead.Peek() {
			case StartObject
				jsonValue = ParseObject()
			case StartArray 
				jsonValue = ParseArray()
			default
				Throw(self, "Syntax Error : Expected JSON Array or Object")
				return null
		}
		SkipWhiteSpace() 
		if lookAhead.Peek() != EOF or lookAhead.Peek() != "" {
			Throw(self, "Syntax Error : Unexpected character at end of JSON input : " + lookAhead.Peek())
		}
		return jsonValue
		
	/*
	
	*/
	block ParseDynamic()
		Dynamic = true
		return Parse()

	/*
	
	*/
	private

		/*
		
		*/
		LookAhead lookAhead = null
	
		/*
		
		*/
		boolean IsString = false
	
		/*
		
		*/
		char StartArray = '['
		
		/*
		
		*/
		char EndArray = ']'
	
		/*
		
		*/
		char StartObject = '{'
		
		/*
		
		*/
		char EndObject = '}'
		
		/*
		
		*/
		char NameSeparator = ':'
		
		/*
		
		*/
		char ValueSeparator = ','
		
		/*
		
		*/
		char QuoteCharacter = '"'
		
		/*
		
		*/
		char EscapeCharacter = '\'
		
		/*
		
		*/
		int EOF = -1
		
		/*
		
		*/
		block SkipWhiteSpace()
			while (IsWhiteSpace(lookAhead.Peek())) {
				lookAhead.Pop()
			}
			
		/*
		
		*/
		block ParseArray()
			AcceptChar(StartArray)
			jsonArray = new JsonArray(Dynamic)
			do {
				SkipWhiteSpace()
				if lookAhead.Peek() == EndArray {
					break
				}
				value = ParseValue()
				if IsNull(value) {
					if jsonArray.IsEmpty() or lookAhead.Peek() == ValueSeparator {
						Throw(self, "Syntax Error : missing element in JSON array")
						return null
					}
					break
				}
				jsonArray.Add(value)
				SkipWhiteSpace()
			
			} while (SkipChar(ValueSeparator))
			AcceptChar(EndArray)
			return jsonArray
			
		/*
		
		*/
		block ParseObject()
			AcceptChar(StartObject)	
			jsonObject = new JsonObject(Dynamic)
			do {
				SkipWhiteSpace()
				if lookAhead.Peek() == EndObject {
					break
				}
				member = ParseMember()
				if IsNull(member) {
					next = lookAhead.Pop()
					if next != EOF or next != "" and (next == ValueSeparator or next != EndObject) {
						Throw(self, "Syntax Error : missing member in JSON object")
						return null
					}
					break
				}
				jsonObject.Add(member)
				SkipWhiteSpace()
			
			} while (SkipChar(ValueSeparator))
			AcceptChar(EndObject)	
			return jsonObject
			
		/*
		
		*/
		block ParseMember()
			if lookAhead.Peek() == QuoteCharacter {
				name = ParseString()
				SkipWhiteSpace()
				AcceptChar(NameSeparator)
				SkipWhiteSpace() 
				jsonValue = ParseValue()
				/*if IsNull(jsonValue) {
					#null is a valid value
					Throw(self, "Syntax Error : missing the object member value")
					return null
				}*/
				value = jsonValue
				isBool = false
				if IsList(jsonValue) {
					value = jsonValue[1]
					isBool = jsonValue[0]
				}
				member = new JsonMember(name, value)
				member.IsBoolean = isBool
				return member
			}
			return null
			
		/*
		
		*/
		block ParseString()
			AcceptChar(QuoteCharacter)
			str = ""
			while true {
				next = lookAhead.Pop()
				if next == EOF {
					Throw(self, "Syntax Error : end of JSON input while parsing the JSON string. Expected " + '"')
				elif next == EscapeCharacter
					str += UnunEscapeStringChar()
				elif next = QuoteCharacter
					break
				else
					str += next
				}
			}
			return str
			
		/*
		
		*/
		block UnunEscapeStringChar()
			next = lookAhead.Pop()
			switch next {
				case QuoteCharacter
					return QuoteCharacter
				case EscapeCharacter
					return EscapeCharacter
				case '/'
					return Ascii(47)
				case 'b'
					return Ascii(08)
				case 'f'
					return Ascii(12)
				case 'n'
					return Ascii(10)
				case 'r'
					return Ascii(13)
				case 't'
					return Ascii(09)
				case 'u'
					uchar = [HexDigit(), HexDigit(), HexDigit(), HexDigit()]
					return Ascii((uchar[0] << 12) | (uchar[1] << 8) | (uchar[2] << 4) | (uchar[3]))
				case EOF
					Throw(self, "Syntax Error : Unexpected end of input in JSON string escape sequence")
					return null
				default
					Throw(self, "Syntax Error : Illegal escape sequence in JSON string escape sequence : " + next)
					return null
			}
			
		/*
		
		*/
		block HexDigit()
			next = lookAhead.Pop()
			v1 = __char_to_number(next) - __char_to_number('0')
			v2 = __char_to_number(next) - __char_to_number('A') + H('0xA')
			v3 = __char_to_number(next) - __char_to_number('a') + H('0xA')
			if v1 >= 0 and v1 <= 9 {
				return v1
			}
			if v2 >= H('0xA') and v2 <= H('0xF') {
				return v2
			}
			if v3 >= H('0xA') and v3 <= H('0xF') {
				return v3
			}
			Throw(self, "Syntax Error : non-hexadecimal digit '" + next + "' in Unicode escape sequence")
			
		/*
		
		*/
		block ParseValue()
			switch lookAhead.Peek() {
				case StartObject
					return ParseObject()
				case StartArray
					return ParseArray()
				case '0'
					return ParseNumber()
				case '1'
					return ParseNumber()
				case '2'
					return ParseNumber()
				case '3'
					return ParseNumber()
				case '4'
					return ParseNumber()
				case '5'
					return ParseNumber()
				case '6'
					return ParseNumber()
				case '7'
					return ParseNumber()
				case '8'
					return ParseNumber()
				case '9'
					return ParseNumber()
				case '-'
					return ParseNumber()
				case '.'
					return ParseNumber()
				case '+'
					return ParseNumber()
				case 't'
					AcceptString("true")
					return [true,true]
				case 'f'
					AcceptString("false")
					return [true,false]
				case 'n'
					AcceptString("null")
					return null
				case QuoteCharacter
					return ParseString()
				default 
					return new JsonObject(Dynamic)
			}
			
		/*
		
		*/
		block ParseNumber()
			str = ""
			while true {
				switch lookAhead.Peek() {
					case EOF 
						Throw(self, "Syntax Error : unexpected end of input while parsing JSON number")
					case '0'
						str += lookAhead.Pop()
					case '1'
						str += lookAhead.Pop()
					case '2'
						str += lookAhead.Pop()
					case '3'
						str += lookAhead.Pop()
					case '4'
						str += lookAhead.Pop()
					case '5'
						str += lookAhead.Pop()
					case '6'
						str += lookAhead.Pop()
					case '7'
						str += lookAhead.Pop()
					case '8'
						str += lookAhead.Pop()
					case '9'
						str += lookAhead.Pop()
					case '.'
						str += lookAhead.Pop()
					case '-'
						str += lookAhead.Pop()
					case '+'
						str += lookAhead.Pop()
					case 'e'
						str += lookAhead.Pop()
					case 'E'
						str += lookAhead.Pop()
					default 
						return NumValueOf(str)
				}
			}
			
		/*
		
		*/
		block AcceptString(string strs)
			for str in strs {
				if lookAhead.Pop() != str {
					Throw(self, "Syntax Error : the JSON Literal is not valid")
				}
			}

		/*
		
		*/
		block SkipChar(char c)
			ret = (lookAhead.Peek() == c)
			if ret {
				lookAhead.Pop()
			}
			return ret
			
		/*
		
		*/
		block AcceptChar(char c)
			pop = lookAhead.Pop()
			
			if pop == EOF or pop == "" {
				Throw(self, "Syntax Error : Unexpected end of JSON input. Expected " + c)
			}
			if pop != c {
				Throw(self, "Syntax Error : Unexpected character Expected '" + c + "', found '" + pop + "'" )
			}
			
			
		