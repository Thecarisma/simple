
/*

*/
from simple.core.Object
from fulltick.base.FWidget
from fulltick.painting.FColor
from fulltick.drawing.FAlignment
from fulltick.drawing.FFont
from fulltick.drawing.FBoxType
from fulltick.widgets.menu.FMenu_

/*

*/
module fulltick.widgets.menu

/*

*/
class FMenuBar : FMenu_

    /*

    */
    Width = FApp.Scheme.getShemeValue("FMenuBar.Width") 

    /*

    */
    Height = FApp.Scheme.getShemeValue("FMenuBar.Height") 

    /*

    */
    X = FApp.Scheme.getShemeValue("FMenuBar.X") 

    /*

    */
    Y = FApp.Scheme.getShemeValue("FMenuBar.Y") 

    /*

    */
    Label = FApp.Scheme.getShemeValue("FMenuBar.Label") 

    /*

    */
    Background = FApp.Scheme.getShemeValue("FMenuBar.Background") 

    /*

    */
    LabelAlignment = FApp.Scheme.getShemeValue("FMenuBar.LabelAlignment") 

    /*

    */
    Box = FApp.Scheme.getShemeValue("FMenuBar.Box") 

    /*

    */
    Border = FApp.Scheme.getShemeValue("FMenuBar.Border") 

    /*

    */
    HasBorder = FApp.Scheme.getShemeValue("FMenuBar.HasBorder") 

    /*

    */
    AcceptInput = FApp.Scheme.getShemeValue("FMenuBar.AcceptInput")

    /*

    */
    Visible = FApp.Scheme.getShemeValue("FMenuBar.Visible") 

    /*

    */
    KeyboardFocusable = FApp.Scheme.getShemeValue("FMenuBar.KeyboardFocusable") 

    /*

    */
    Tooltip = FApp.Scheme.getShemeValue("FMenuBar.Tooltip") 

    /*

    */
    LabelColor = FApp.Scheme.getShemeValue("FMenuBar.LabelColor") 

    /*

    */
    LabelFont = FApp.Scheme.getShemeValue("FMenuBar.LabelFont") 

    /*

    */
    LabelSize = FApp.Scheme.getShemeValue("FMenuBar.LabelSize")

    /*

    */
    LabelType = FApp.Scheme.getShemeValue("FMenuBar.LabelType")

    /*

    */
    SelectionColor = FApp.Scheme.getShemeValue("FMenuBar.SelectionColor")
	
	/*
	
	*/
	DownBox = FApp.Scheme.getShemeValue("FMenuBar.DownBox")

    /*

    */
    DownColor = FApp.Scheme.getShemeValue("FMenuBar.DownColor")
	
	/*
	
	*/
	TextColor = FApp.Scheme.getShemeValue("FMenuBar.TextColor")
	
	/*
	
	*/
	TextFont = FApp.Scheme.getShemeValue("FMenuBar.TextFont")
	
	/*
	
	*/
	TextSize = FApp.Scheme.getShemeValue("FMenuBar.TextSize")

    /*

    */
    block init(params...)
        paramsLen = lengthOf(params)
		menuItems = []
        if paramsLen == 1 {
            menuItems = params[0]
            if !isList(menuItems) {
                throw(self,"Invalid parameter Expecting 'List' as FMenuBar Menu Items")
            }
        elif paramsLen == 2
            X = params[0]
            Y = params[1]
            if !isNumber(X) or !isNumber(Y) {
                throw(self,"Invalid parameter Expecting 'number' as FMenuBar X and Y")
            }
        elif paramsLen == 3 
            X = params[0]
            Y = params[1]
            menuItems = params[2]
            if !isNumber(X) or !isNumber(Y) {
                throw(self,"Invalid parameter Expecting 'number' as FMenuBar X and Y")
            }
            if !isList(menuItems) {
                throw(self,"Invalid parameter Expecting 'List' as FMenuBar Menu Items")
            }
        elif paramsLen == 4
            X = params[0]
            Y = params[1]
            Width = params[2]
            Height = params[3]
            if !isNumber(X) or !isNumber(Y) {
                throw(self,"Invalid parameter Expecting 'number' as FMenuBar X and Y")
            }
            if !isNumber(Width) or !isNumber(Height) {
                throw(self,"Invalid parameter Expecting 'number' as FMenuBar Width and Height")
            }
        elif paramsLen == 5
            X = params[0]
            Y = params[1]
            Width = params[2]
            Height = params[3]
            menuItems = params[4]
            if !isNumber(X) or !isNumber(Y) {
                throw(self,"Invalid parameter Expecting 'number' as FMenuBar X and Y")
            }
            if !isNumber(Width) or !isNumber(Height) {
                throw(self,"Invalid parameter Expecting 'number' as FMenuBar Width and Height")
            }
            if !isList(menuItems) {
                throw(self,"Invalid parameter Expecting 'List' as FMenuBar Menu Items")
            }
        else    
            if paramsLen != 0 {
                throw(self,"Calling block with invalid legth of parameter")
            }
        } 

        Ptr = __Fl_Menu_Bar(X, Y, Width, Height, Label) 
        registerWidget()
        setLabelAlignment(LabelAlignment)
        setBox(Box)
        setBorder(Border)
        construct()
		menu(menuItems, null)
		setDownBox(DownBox)
		setDownColor(DownColor)
		setTextColor(TextColor)
		setTextFont(TextFont)
		setTextSize(TextSize)
        
        return self

    /*

    */
    private 
    

