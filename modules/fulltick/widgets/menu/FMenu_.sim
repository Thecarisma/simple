
/*

*/
from simple.core.Object
from fulltick.base.FWidget
from fulltick.painting.FColor
from fulltick.drawing.FAlignment
from fulltick.drawing.FFont
from fulltick.drawing.FBoxType
from fulltick.widgets.menu.FMenuItem
import simple.system

/*

*/
module fulltick.widgets.menu

/*

*/
final Fl_Menu_Inactive = __FL_MENU_INACTIVE()

/*

*/
final Fl_Menu_Toggle = __FL_MENU_TOGGLE()

/*

*/
final Fl_Menu_Value = __FL_MENU_VALUE()

/*

*/
final Fl_Menu_Radio = __FL_MENU_RADIO()

/*

*/
final Fl_Menu_Invisible = __FL_MENU_INVISIBLE()

/*

*/
final Fl_Submenu_Pointer = __FL_SUBMENU_POINTER()

/*

*/
final Fl_Submenu = __FL_SUBMENU()

/*

*/
final Fl_Menu_Divider = __FL_MENU_DIVIDER()

/*

*/
final Fl_Menu_Horizontal = __FL_MENU_HORIZONTAL()

/*

*/
class FMenu_ : FWidget
	
	/*
	
	*/
	MenuItems = []

    /*

    */
    block Init()
        Throw(self, "This is a base class it cannot be instiated")
		
	/*
	
	*/
	#TODO : prevent multiple addition of a menu entry, do not trade speed at all
	block AddItem(/*MenuItem|int|string*/ params...)
		paramsLen = LengthOf(params)
		tag = null
		shortcut = null
		item = null
		
		if paramsLen == 1 {
			item = params[0]
			if !InstanceOf(item, "FMenuItem") {
				Throw(self, "Invalid parameter, expecting an instance of FMenuItem")
				return
			}
			
		elif paramsLen == 2
			item = new FMenuItem(params[0], params[1])
			
		elif paramsLen == 3
			item = new FMenuItem(params[0], params[1], params[2])
			
		elif paramsLen == 4
			item = new FMenuItem(params[0], params[1], params[2], params[3])
		else
			Throw(self, "Calling block with invalid length of parameters")
			return
		}
		
		if item.HasChildMenus {
			for menu in item.ChildMenus {
				AddItem(menu)
			}
		else
			__fltk_created_menus_count++
			item.Index = __Fl_Menu__add(Ptr, item.FullText, item.Shortcut, null, __fltk_created_menus_count, item.Flags)
			item.Parent = self
			MenuItems[''+__fltk_created_menus_count+''] = item
			__add_to_list(__fltk_created_menus,item)
		}
		MenuItemsLen++
		
	/*
		
	*/
	#TODO : make list menuList, string parent... after resolving variadic param issue
	block Menu(list menuList, string parent)
		menuListLen = LengthOf(menuList) - 1
		for a = 0 to menuListLen {
			menuLi = menuList[a]
			if IsList(menuLi) {
				menuLiLen = LengthOf(menuLi)
				if menuLiLen == 2 {
					p1 = menuLi[0]
					p2 = menuLi[1]
					if IsNumber(p2) {
						if IsNull(parent) {
							AddItem(p1, p2)
						else
							AddItem(parent+"/"+p1, p2)
						}
						
					elif IsList(p2)
						if LengthOf(p2) == 0 {
							if IsNull(parent) {
								AddItem(p1, 0)
							else
								AddItem(parent+"/"+p1, 0)
							}
						else
							MenuItemsLen++
							if IsNull(parent) {
								Menu(p2, p1)
							else
								Menu(p2, parent+"/"+p1)
							}
						}
						
					else
						Throw(self, "Invalid menu entry, near '" + p1 + "'")						
					}
					
				elif menuLiLen == 3
					p1 = menuLi[0]
					p2 = menuLi[1]
					p3 = menuLi[2]
					if IsNumber(p2) and (IsString(p3) or IsNull(p3)) {
						if IsNull(parent) {
							AddItem(p1, p2, p3)
						else
							AddItem(parent+"/"+p1, p2, p3)
						}
						
					else
						Throw(self, "Invalid menu entry, near '" + p1 + "'")						
					}
					
				elif menuLiLen == 4
					p1 = menuLi[0]
					p2 = menuLi[1]
					p3 = menuLi[2]
					p4 = menuLi[3]
					if IsNumber(p2) and (IsString(p3) or IsNull(p3)) and IsNumber(p4) {
						if IsNull(parent) {
							AddItem(p1, p2, p3, p4)
						else
							AddItem(parent+"/"+p1, p2, p3, p4)
						}
						
					else
						Throw(self, "Invalid menu entry, near '" + p1 + "'")						
					}
					
					
				else
					Throw(self, "The menu entry list has invalid length of " + menuLiLen)
				}
			elif InstanceOf(menuLi, "FMenuItem")
				AddItem(menuLi)
			else
				Throw(self, "Invalid menu entry in the list item")
			}
		}
		
	/*
		Remove all the added menu items in this widget and also destroy the reference to 
		@Field __fltk_created_menus. It does not remove the item from @Field __fltk_created_menus
		but make it null, removing item will make the calling the @Class MenuItem added to the list 
		callback incorect. All required list are destroyed here but the menu items remains for the 
		GC to decide
	*/
	block Clear()
		ValidatePointer()
		__Fl_Menu__clear(Ptr)
		RedrawParent() 
		for item in MenuItems {
			index = 1*item[0]
			__del_from_list(__fltk_created_menus,index)
			__insert_into_list(__fltk_created_menus,index,null)
		}
		MenuItems = []

    /*
		
    */
    block SetDownBox(/*FBoxType|number*/ value) 
        if IsNumber(value) {
			__Fl_Menu__down_box_1(Ptr,value)
			DownBox = new FBoxType(value)
		else
			__Fl_Menu__down_box_1(Ptr,value.BoxType) 
			if !IsNull(value.BoxColor) { 
				SetDownColor(value.BoxColor)
			}
			DownBox = value
		}

    /*

    */
    block GetDownBox()
        return DownBox 

    /*

    */
    block SetDownColor(/*FColor|number*/ value) 
        if IsNumber(value) or InstanceOf(value,"FColor") {
            if IsNumber(value) {
                __Fl_Menu__down_color_1(Ptr,value)
                DownColor = new FColor(value)
            else
                __Fl_Menu__down_color_1(Ptr,value.ColorAsNumber())
                DownColor = value
            }
        else
            Throw(self,"Invalid parameter. Expecting (Number|fulltick.painting.FColor), Found (" + ObjectType(value) + ")")
        }

    /*

    */
    block GetDownColor()
        return DownColor
		
	/*
	
	*/
	block MakeGlobal()
		ValidatePointer()
		__Fl_Menu__global(Ptr)

    /*

    */
    block SetTextColor(/*FColor|number*/ value) 
        if IsNumber(value) or InstanceOf(value,"FColor") {
            if IsNumber(value) {
                __Fl_Menu__textcolor_1(Ptr,value)
                TextColor = new FColor(value)
            else
                __Fl_Menu__textcolor_1(Ptr,value.ColorAsNumber())
                TextColor = value
            }
        else
            Throw(self,"Invalid parameter. Expecting (Number|fulltick.painting.FColor), Found (" + ObjectType(value) + ")")
        }

    /*

    */
    block GetTextColor()
        return TextColor

    /*

    */
    block SetTextFont(/*FFont|int*/ value)
		if IsNumber(value) {
			__value = NumberValue(value)
            __Fl_Menu__textfont_1(Ptr,__value)
            value = new FFont(__value) 
		else
			__Fl_Menu__textfont_1(Ptr,value.FontValue)
		}
        TextFont = value

    /*

    */
    block GetTextFont()
        return TextFont    

    /*

    */
    block SetTextSize(int value)
		if value <= 0 {
			Throw(self,"FWidget Label Size cannot be less than 0 ")
			return
		}
		__Fl_Menu__textsize_1(Ptr,value)
        TextSize = value

    /*

    */
    block GetTextSize()
        return TextSize
		
	/*
	
	*/
	#Tooooo slow [disable]
	/*block Insert(int index, /*MenuItem|int|string* params...)
		paramsLen = LengthOf(params)
		tag = null
		shortcut = null
		item = null
		
		if paramsLen == 1 {
			item = params[0]
			if !InstanceOf(item, "FMenuItem") {
				Throw(self, "Invalid parameter, expecting an instance of FMenuItem")
				return
			}
			
		elif paramsLen == 2
			item = new FMenuItem(params[0], params[1])
			
		elif paramsLen == 3
			item = new FMenuItem(params[0], params[1], params[2])
			
		elif paramsLen == 4
			item = new FMenuItem(params[0], params[1], params[2], params[3])
		else
			Throw(self, "Calling block with invalid length of parameters")
			return
		}
		
		if item.HasChildMenus {
			for menu in item.ChildMenus {
				AddItem(menu)
			}
		else
			if index > MenuItemsLen+1 or index < 0 {
				Throw(self, "Index out of bound. You cannot insert a menu item in non existing index ")
				return 
			}
			__fltk_created_menus_count++
			item.Index = __Fl_Menu__insert(Ptr, index, item.FullText, item.Shortcut, null, __fltk_created_menus_count, item.Flags)
			item.Parent = self
			MenuItems[''+__fltk_created_menus_count+''] = item
			__add_to_list(__fltk_created_menus,item)
		}
		MenuItemsLen++
		RedrawParent()*/

    /*
        
    */
    block SetPlatformScheme(string schemeName)
        if schemeName == FScheme.Android {
            SetBackground(new FColor(62,78,184))
            SetTextColor(FColor.FCOLOR_WHITE)

        elif schemeName == FScheme.Windows
			SetBackground(new FColor(242,242,242))
			SetDownColor(new FColor(33,147,239))

        elif schemeName == FScheme.Macosx
            SetBackground(new FColor(238,244,249))
			SetTextColor(new FColor(54,101,148))

        elif schemeName == FScheme.Linux
			SetBackground(new FColor(225,214,204))
			
		else
			Throw(self, "Invalid platform scheme name : " + schemeName)

        }

    /*

    */
    private
	
		/*
		
		*/
		MenuItems = [] 
		
		/*
		
		*/
		MenuItemsLen = 0
		
    

