
/*

*/
from simple.core.Object
from simple.system.Color
from fulltick.base.FWidget
from fulltick.painting.FColor
from fulltick.drawing.FAlignment
from fulltick.drawing.FBoxType

/*

*/
module fulltick.widgets

/*

*/
class FButton : FWidget

    /*

    */
    Width = FApp.Scheme.GetShemeValue("FButton.Width") 

    /*

    */
    Height = FApp.Scheme.GetShemeValue("FButton.Height") 

    /*

    */
    X = FApp.Scheme.GetShemeValue("FButton.X") 

    /*

    */
    Y = FApp.Scheme.GetShemeValue("FButton.Y") 

    /*

    */
    Label = FApp.Scheme.GetShemeValue("FButton.Label") 

    /*

    */
    CapitalizeLabel = FApp.Scheme.GetShemeValue("FButton.CapitalizeLabel") 

    /*

    */
    Background = FApp.Scheme.GetShemeValue("FButton.Background") 

    /*

    */
    LabelAlignment = FApp.Scheme.GetShemeValue("FButton.LabelAlignment") 

    /*

    */
    BaseColor = FApp.Scheme.GetShemeValue("FButton.BaseColor") 

    /*

    */
    Box = FApp.Scheme.GetShemeValue("FButton.Box") 

    /*

    */
    BaseBox = FApp.Scheme.GetShemeValue("FButton.BaseBox") 

    /*

    */
    Border = FApp.Scheme.GetShemeValue("FButton.Border") 

    /*

    */
    HasBorder = FApp.Scheme.GetShemeValue("FButton.HasBorder") 

    /*

    */
    AcceptInput = FApp.Scheme.GetShemeValue("FButton.AcceptInput")

    /*

    */
    Visible = FApp.Scheme.GetShemeValue("FButton.Visible") 

    /*

    */
    KeyboardFocusable = FApp.Scheme.GetShemeValue("FButton.KeyboardFocusable") 

    /*

    */
    Text = FApp.Scheme.GetShemeValue("FButton.Text") 

    /*

    */
    Tooltip = FApp.Scheme.GetShemeValue("FButton.Tooltip") 

    /*

    */
    LabelColor = FApp.Scheme.GetShemeValue("FButton.LabelColor") 

    /*

    */
    LabelFont = FApp.Scheme.GetShemeValue("FButton.LabelFont") 

    /*

    */
    LabelSize = FApp.Scheme.GetShemeValue("FButton.LabelSize")

    /*

    */
    LabelType = FApp.Scheme.GetShemeValue("FButton.LabelType")

    /*

    */
    SelectionColor = FApp.Scheme.GetShemeValue("FButton.SelectionColor")

    /*

    */
    Shortcut = FApp.Scheme.GetShemeValue("FButton.Shortcut")

    /*

    */
    Value = FApp.Scheme.GetShemeValue("FButton.Value")

    /*

    */
    Text = null

    /*

    */
    block Init(params...)
        paramsLen = LengthOf(params)
        if paramsLen == 1 {
            Label = params[0]
            if !IsString(Label) {
                Throw(self,"Invalid parameter Expecting 'string' as FButton Label")
            }
        elif paramsLen == 2
            X = params[0]
            Y = params[1]
            if !IsNumber(X) or !IsNumber(Y) {
                Throw(self,"Invalid parameter Expecting 'number' as FButton X and Y")
            }
        elif paramsLen == 3 
            X = params[0]
            Y = params[1]
            Label = params[2]
            if !IsNumber(X) or !IsNumber(Y) {
                Throw(self,"Invalid parameter Expecting 'number' as FButton X and Y")
            }
            if !IsString(Label) {
                Throw(self,"Invalid parameter Expecting 'string' as FButton Label")
            }
        elif paramsLen == 4
            X = params[0]
            Y = params[1]
            Width = params[2]
            Height = params[3]
            if !IsNumber(X) or !IsNumber(Y) {
                Throw(self,"Invalid parameter Expecting 'number' as FButton X and Y")
            }
            if !IsNumber(Width) or !IsNumber(Height) {
                Throw(self,"Invalid parameter Expecting 'number' as FButton Width and Height")
            }
        elif paramsLen == 5
            X = params[0]
            Y = params[1]
            Width = params[2]
            Height = params[3]
            Label = params[4]
            if !IsNumber(X) or !IsNumber(Y) {
                Throw(self,"Invalid parameter Expecting 'number' as FButton X and Y")
            }
            if !IsNumber(Width) or !IsNumber(Height) {
                Throw(self,"Invalid parameter Expecting 'number' as FButton Width and Height")
            }
            if !IsString(Label) {
                Throw(self,"Invalid parameter Expecting 'string' as FButton Label")
            }
        else    
            if paramsLen != 0 {
                Throw(self,"Calling block with invalid legth of parameter")
            }
        } 

        if CapitalizeLabel {
            Label = ToUpperCase(Label)
        }
        Ptr = __Fl_Button(X, Y, Width, Height, Label)
        RegisterWidget()
        #Resize(X, Y, Width, Height)
        SetLabelAlignment(LabelAlignment)
        SetBox(Box)
        SetBaseColor(BaseColor)
        SetBaseBox(BaseBox)
        SetBorder(Border)
        Construct()
        SetValue(Value)
        
        return self

    /*

    */
    block SetBaseColor(value) 
        if IsNumber(value) or InstanceOf(value,"FColor") {
            if IsNumber(value) {
                __Fl_Button_down_color_1(Ptr,value)
                BaseColor = new FColor(value)
            else
                __Fl_Button_down_color_1(Ptr,value.ColorAsNumber())
                BaseColor = value
            }
        else
            Throw(self,"Invalid parameter. Expecting (Number|fulltick.painting.FColor), Found (" + ObjectType(value) + ")")
        }

    /*

    */
    block GetBaseColor()
        return BaseColor

    /*

    */
    block SetBaseBox(value) 
        if IsNumber(value) or InstanceOf(value,"FBoxType") {
            if IsNumber(value) {
                __Fl_Button_down_box_1(Ptr,value)
                BaseBox = new FBoxType(value)
            else
                __Fl_Button_down_box_1(Ptr,value.BoxType) 
                if !IsNull(value.BoxColor) { 
                    SetBaseColor(value.BoxColor)
                }
                BaseBox = value
            }
        else
            Throw(self,"Invalid parameter. Expecting (Number|fulltick.drawing.FBoxType), Found (" + ObjectType(value) + ")")
        }

    /*

    */
    block GetBaseBox()
        return BaseBox

    /*

    */
    block Handle(event)
        @"button handling it event : " + event
        return 0

    /*

    */
    block SetText(value)
        SetLabel(value)
        Text = value

    /*

    */
    block GetText()
        return Label

    /*

    */
    block Set()
        __Fl_Button_set(Ptr)

    /*

    */
    block SetOnly()
        __Fl_Button_setonly(Ptr)

    /*

    */
    block SetValue(value)
        value = BooleanValue(value)
        if value {
            __Fl_Button_value(Ptr,true)
        else
            __Fl_Button_value(Ptr,false)
        }
        Value = value
		
	/*
	
	*/
	block GetValue()
		ValidatePointer()
		return __Fl_Button_value_1(Ptr)

    /*

    */
    block SetShortcut(number value) 
        __Fl_Button_shortcut_1(Ptr,value)
        Shortcut = value

    /*

    */
    block GetShortcut()
        return Shortcut

    /*
        
    */
    block SetPlatformScheme(string schemeName)
        if schemeName == FScheme.Android {
            SetBackground(new FColor(214,215,215))
			SetBaseColor(new FColor(175,175,175))
			SetCapitalizeLabel(true)
			SetHasBorder(false)

        elif schemeName == FScheme.Windows
			SetBackground(new FColor(225,225,225))
			SetSelectionColor(new FColor(108,176,232))
	        SetBorder(new FBorder(1,1,1,1,__FL_FLAT_BOX(),new FColor(173,173,173)))

        elif schemeName == FScheme.Macosx
            SetBox(new FBoxType(__fl_define_FL_ROUNDED_BOX(),new FColor(239,239,239)))
			SetBaseBox(new FBoxType(__fl_define_FL_ROUNDED_BOX(),new FColor(177,204,247)))
			SetBorder(new FBorder(2,2,2,2,__fl_define_FL_ROUNDED_BOX(),new FColor(157,157,157)))

        elif schemeName == FScheme.Linux
			SetBackground(new FColor(229,220,212))
			SetBaseColor(new FColor(214,85,53))
			SetBorder(new FBorder(2,2,2,2,__FL_FLAT_BOX(),new FColor(194,85,41)))
			
		else
			Throw(self, "Invalid platform scheme name : " + schemeName)

        }

    /*

    */
    private 

		/*
		
		*/
		block Construct()
			SetLabel(Label)
			super.Construct()