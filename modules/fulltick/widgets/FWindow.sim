
/*

*/
from simple.core.Object
from simple.graphics.Dimension
from simple.graphics.Rectangle
from simple.graphics.Point
from simple.system.ScreenDimension
from fulltick.FApp
from fulltick.FScheme
from fulltick.base.FWidget
from fulltick.widgets.FGroup
from fulltick.widgets.FLabel
from fulltick.objects.FCursor
import fulltick.base

/*

*/
module fulltick.widgets

/*

*/
FWindowModality = new FWindowModality

/*

*/
#TODO : expand variadic params
block FWindow(params...)
	return new FWindow(params)

/*

*/
class FWindow : FGroup

    /*

    */
    Title = FApp.Scheme.GetShemeValue("FWindow.Title")

    /*

    */
    Background = FApp.Scheme.GetShemeValue("FWindow.Background")

    /*

    */
    Width = FApp.Scheme.GetShemeValue("FWindow.Width")

    /*

    */
    MinWidth = FApp.Scheme.GetShemeValue("FWindow.MinWidth") 

    /*

    */
    MaxWidth = FApp.Scheme.GetShemeValue("FWindow.MaxWidth") 

    /*

    */
    Height = FApp.Scheme.GetShemeValue("FWindow.Height") 

    /*

    */
    MinHeight = FApp.Scheme.GetShemeValue("FWindow.MinHeight") 

    /*

    */
    MaxHeight = FApp.Scheme.GetShemeValue("FWindow.MaxHeight") 

    /*

    */
    X = FApp.Scheme.GetShemeValue("FWindow.X")

    /*

    */
    XRoot = FApp.Scheme.GetShemeValue("FWindow.XRoot")

    /*

    */
    Y = FApp.Scheme.GetShemeValue("FWindow.Y")

    /*

    */
    YRoot = FApp.Scheme.GetShemeValue("FWindow.YRoot") 

    /*

    */
    Y_Diff = FApp.Scheme.GetShemeValue("FWindow.Y_Diff") 

    /*

    */
    HasWindowBorder = FApp.Scheme.GetShemeValue("FWindow.HasWindowBorder")

    /*

    */
    Cursor = FApp.Scheme.GetShemeValue("FWindow.Cursor")

    /*

    */
    Fullscreen = FApp.Scheme.GetShemeValue("FWindow.Fullscreen")

    /*

    */
    IconLabel = FApp.Scheme.GetShemeValue("FWindow.IconLabel")

    /*

    */
    Label = FApp.Scheme.GetShemeValue("FWindow.Label")

    /*

    */
    TooltipWindow = FApp.Scheme.GetShemeValue("FWindow.TooltipWindow")

    /*

    */
    IsMenuWindow = FApp.Scheme.GetShemeValue("FWindow.IsMenuWindow")

    /*

    */
    IsModal = FApp.Scheme.GetShemeValue("FWindow.IsModal")

    /*

    */
    Modality = FApp.Scheme.GetShemeValue("FWindow.Modality")

    /*

    */
    AdaptiveSize = FApp.Scheme.GetShemeValue("FWindow.AdaptiveSize") 

    /*

    */
    AcceptInput = FApp.Scheme.GetShemeValue("FWindow.AcceptInput")

    /*

    */
    Visible = FApp.Scheme.GetShemeValue("FWindow.Visible") 

    /*

    */
    KeyboardFocusable = FApp.Scheme.GetShemeValue("FWindow.KeyboardFocusable") 

    /*

    */
    Tooltip = FApp.Scheme.GetShemeValue("FWindow.Tooltip") 

    /*

    */
    LabelColor = FApp.Scheme.GetShemeValue("FWindow.LabelColor") 

    /*

    */
    LabelFont = FApp.Scheme.GetShemeValue("FWindow.LabelFont")

    /*

    */
    LabelSize = FApp.Scheme.GetShemeValue("FWindow.LabelSize") 

    /*

    */
    LabelType = FApp.Scheme.GetShemeValue("FWindow.LabelType")

    /*

    */
    SelectionColor = FApp.Scheme.GetShemeValue("FWindow.SelectionColor")

    /*

    */
    WindowEvent = null

    /*

    */
    HasActionBar = false

    /*

    */
    ActionBar = null

    /*

    */
    ActionBarLabel = null

    /*

    */
    block Init(params...) 
        paramsLen = LengthOf(params)
        if paramsLen == 1 {
            Title = params[0]
            if !IsString(Title) {
                Throw(self,"Invalid parameter. Expecting 'string' as FWindow Title")
            }
        elif paramsLen == 2
            Width = params[0]
            Height = params[1]
            if !IsNumber(Width) or !IsNumber(Height) {
                Throw(self,"Invalid parameter. Expecting 'number' as FWindow Width and Height")
            }
        elif paramsLen == 3 
            Width = params[0]
            Height = params[1]
            Title = params[2]
            if !IsNumber(Width) or !IsNumber(Height) {
                Throw(self,"Invalid parameter. Expecting 'number' as FWindow Width and Height")
            }
            if !IsString(Title) {
                Throw(self,"Invalid parameter. Expecting 'string' as FWindow Title")
            }
        elif paramsLen == 4
            X = params[0]
            Y = params[1]
            Width = params[2]
            Height = params[3]
            if !IsNumber(X) or !IsNumber(Y) {
                Throw(self,"Invalid parameter. Expecting 'number' as FWindow X and Y")
            }
            if !IsNumber(Width) or !IsNumber(Height) {
                Throw(self,"Invalid parameter. Expecting 'number' as FWindow Width and Height")
            }
        elif paramsLen == 5
            X = params[0]
            Y = params[1]
            Width = params[2]
            Height = params[3]
            Title = params[4]
            if !IsNumber(X) or !IsNumber(Y) {
                Throw(self,"Invalid parameter. Expecting 'number' as FWindow X and Y")
            }
            if !IsNumber(Width) or !IsNumber(Height) {
                Throw(self,"Invalid parameter. Expecting 'number' as FWindow Width and Height")
            }
            if !IsString(Title) {
                Throw(self,"Invalid parameter. Expecting 'string' as FWindow Title")
            }
        else    
            if paramsLen != 0 {
                Throw(self,"Calling block with invalid legth of parameter")
            }
        } 

        Ptr = __Fl_Window_1(0, 0, 0, 0, Title) 
        Resize(X, Y, Width, Height)
        RootBox = new FGroup(0, 0, 0, 0)
        Construct()
        RootBox.Hide()
        RootBox.__Name = "RootBox" 
        super.SetResizable(RootBox)  
        #MakeCurrent() since we are calling endBegin
        EndBegin()
        SetHasWindowBorder(HasWindowBorder)
        if IsAndroid() and FScheme.UsePlatformUI { 
            HasActionBar = true
            BuildActionBar() 
        }
        RegisterWidget()
        return self

    /*
        #faulty
    */
    block SetResizable(condition) 
        if IsObject(condition) { 
            if Resizable {
                super.SetResizable(condition) 
            else
                super.SetResizable(false) 
            }
        elif IsNumber(condition)
            if IsNull(ResizableWidget) or ResizableWidget.Equals(RootBox) {
                if condition {
                    super.SetResizable(RootBox)
                else 
                    super.SetResizable(false)
                }
            else 
                super.SetResizable(ResizableWidget)
            }
           
        }

    /*

    */
    block Show(params...)
        paramsLen = LengthOf(params)
        
        if paramsLen == 0 {
            __Fl_Window_show(Ptr) 
        else
            __Fl_Window_show(Ptr) 
            return 
            #todo
            argv = ""
            for arg in params {
                argv + arg + " "
            }
            __Fl_Window_show_1(Ptr,paramsLen-1,argv) 
        }
        WaitForExpose()
        Visible = true

    /*

    */
    block Hide()
        __Fl_Window_hide(Ptr)
        Visible = false

    /*

    */
    block SetHasWindowBorder(value)   
        if (!IsNull(value) and IsNumber(value)) and value == true or value = false {
            __Fl_Window_border(Ptr,value) 
            HasWindowBorder = value
            if value == false {
                Resize(X,Y,Width,Height)
                #SetY(Y)
            }
            return
        else
            Throw(self,FULLTICK_INVALID_PARAMETER+" You can only use a Boolean value to change FWindow border")
        }

    /*

    */
    block GetHasWindowBorder()
        return HasWindowBorder

    /*

    */
    block ClearModalStates()
        Hide()
        __Fl_Window_clear_modal_states(Ptr)
        Show()
        Modality = FWindowModality.NORMAL

    /*

    */
    block SetTitle(string title) 
		Title = title
        if HasActionBar {
			ActionBarLabel.Label = Title
		}
		__Fl_Window_copy_label(Ptr,Title)

    /*

    */
    block GetTitle()
        return Title

    /*

    */#accept rgb image later
    block SetCursor(value)  
        if IsNumber(value) or IsObject(value) {
            if IsNumber(value) { 
                tvalue = new FCursor(value)
            else
                tvalue = value
            }
            __Fl_Window_cursor(Ptr,tvalue.CursorValue)
            Cursor = tvalue  
        else
            Throw(self,FULLTICK_INVALID_PARAMETER+" Only String is accepted as a parameter for FWindow Title")
        }

    /*

    */
    block GetCursor()
        return Cursor

    /*

    */
    block DecoratedHeight()
        return __Fl_Window_decorated_h(Ptr)

    /*

    */
    block DecoratedWidth()
        return __Fl_Window_decorated_w(Ptr)

    /*

    */
    block FreePosition()
        __Fl_Window_free_position(Ptr)

    /*

    */
    block SetFullscreen(value)
        if (!IsNull(value) and IsNumber(value)) and value == true or value = false {
            if value {
                __Fl_Window_fullscreen(Ptr) 
            else
                __Fl_Window_fullscreen_off(Ptr)
            }
            Fullscreen = value
            return
        else
            Throw(self,FULLTICK_INVALID_PARAMETER+" You can only use a Boolean value to set FWindow fullscreen")
        }

    /*

    */
    block GetFullscreen()
        return Fullscreen

    /*

    */
    block Hotspot(x, y, offscreenv...) 
        offscreenvLen = LengthOf(offscreenv)
        offscreen = 0 
        if offscreenvLen == 1 {
            offscreen = offscreenv[0]
        elif offscreenvLen < 1
        else
            Throw(self,"Calling block with invalid legth of parameter")
        }
        if IsNumber(x) and IsNumber(y) and IsNumber(offscreen) {
            X = x
            Y = y
            
            __Fl_Window_hotspot(Ptr,X,Y,offscreen)
        else
            Throw(self,FULLTICK_INVALID_PARAMETER+" Only Number, ScreenPosition allowed as FWindow X and Y")
        }

    /*

    */#use instance of FRGBImage
    block Icon(iconImage)
        __Fl_Window_icon(Ptr,null)

    /*

    */
    block Iconize()
        __Fl_Window_iconize(Ptr)

    /*

    */
    block SetIconLabel(value)
        if IsString(value) {
            __Fl_Window_iconlabel_1(Ptr,value)
            IconLabel = value       
        else
            Throw(self,FULLTICK_INVALID_PARAMETER+" Only String allowed as FWindow icon label ")
        }

    /*

    */
    block GetIconLabel()
        return IconLabel

    /*

    */
    block SetLabel(value) 
        if IsString(value) { 
            __Fl_Window_label_1(Ptr,value)
            Label = value      
        else
            Throw(self,"Invalid parameter. Only String allowed as FWindow label ")
        }

    /*

    */
    block GetLabel()
        return Label

    /*

    */
    block MakeCurrent()
        FApp.CurrentWidget = self
        __Fl_Window_make_current(Ptr)

    /*

    */
    block GetIsMenuWindow()
        return IsMenuWindow

    /*

    */
    block SetIsModal(value)
        if (!IsNull(value) and IsNumber(value)) and value == true or value = false {
            Hide()
            if value {
                __Fl_Window_set_modal(Ptr) 
                Modality = FWindowModality.MODAL
            else
                __Fl_Window_set_non_modal(Ptr)
                Modality = FWindowModality.NON_MODAL
            }
            Show()
            IsModal = value
            return
        else
            Throw(self,FULLTICK_INVALID_PARAMETER+" You can only use a Boolean value to change FWindow modality")
        }

    /*

    */
    block GetIsModal()
        return __Fl_Window_modal(Ptr)

    /*

    */
    block GetWindowState()
        return WindowState

    /*

    */
    block SetTooltipWindow()
        __Fl_Window_set_tooltip_window(Ptr)

    /*

    */
    block GetTooltipWindow()
        return __Fl_Window_tooltip_window(Ptr)

    /*

    */
    block IsShown()
        return __Fl_Window_shown(Ptr)

    /*

    */
    block SizeRange(params...)
        paramsLen = LengthOf(params)
        minh = 1
        minw = 1
        maxh = 1
        maxw = 1

        if paramsLen == 0 {
            minDimension = new Dimension(MinWidth,MinHeight)
            maxDimension = new Dimension(MaxWidth,MaxHeight)
            return [minDimension, maxDimension]

        elif paramsLen == 1
            dimensionList = params[0]
            if !IsNull(dimensionList) and IsList(dimensionList) and LengthOf(dimensionList) > 0 and LengthOf(dimensionList) < 3 {
                minDimension = dimensionList[0]
                maxDimension = dimensionList[1]
                if InstanceOf(minDimension,"Dimension") and InstanceOf(maxDimension,"Dimension") {
                    MinWidth = minDimension.Width
                    MinHeight = minDimension.Height
                    MaxWidth = maxDimension.Width
                    MaxHeight = maxDimension.Height
                    __Fl_Window_size_range(Ptr,MinWidth,MinHeight,MaxWidth,MaxHeight,1,1,1)
                else
                    Throw(self,"The parameter is not valid. Expecting ([Dimension, Dimension]) as FWindow sizeRange . Found (" + ObjectType(dimensionList) + ")") 
                }
            else
                Throw(self,"The parameter is not valid. Expecting ([Dimension, Dimension]) as FWindow sizeRange . Found (" + ObjectType(dimensionList) + ")") 
            }

        elif paramsLen == 2
            minDimension = params[0]
            maxDimension = params[1]
            if InstanceOf(minDimension,"Dimension") and InstanceOf(maxDimension,"Dimension") {
                MinWidth = minDimension.Width
                MinHeight = minDimension.Height
                MaxWidth = maxDimension.Width
                MaxHeight = maxDimension.Height
                __Fl_Window_size_range(Ptr,MinWidth,MinHeight,MaxWidth,MaxHeight,1,1,1)
            else
                Throw(self,"The parameter is not valid. Expecting (Dimension, Dimension) as FWindow sizeRange . Found (" + ObjectType(minDimension) + ", " + ObjectType(maxDimension) + ")") 
            }
        elif paramsLen == 4
            minw = params[0]
            minh = params[1]
            maxw = params[2]
            maxh = params[3]
            if IsNumber(minh) and IsNumber(minw) and IsNumber(maxh) and IsNumber(maxw) {
                MinWidth = Floor(minw)
                MinHeight = Floor(minh)
                MaxWidth = Floor(maxw)
                MaxHeight = Floor(maxh)
                __Fl_Window_size_range(Ptr,MinWidth,MinHeight,MaxWidth,MaxHeight,1,1,1)
            else
                Throw(self,"The parameter is not valid. Expecting (Number, Number, Number, Number) as FWindow sizeRange . Found (" + ObjectType(minw) + ", " + ObjectType(minh) + ", " + ObjectType(maxw) + ", " + ObjectType(maxh) + ")")
            }

        else
            Throw(self,"Setting FWindows sizeRange with invalid length of parameters")
        }

    /*

    */
    block SetMinWidth(value)
        if IsNumber(value) {
            SizeRange(value,MinHeight,MaxWidth,MaxHeight)
        else
            Throw(self,"Invalid parameter expecting Number as MinWidth")
        }

    /*

    */
    block SetMinHeight(value)
        if IsNumber(value) {
            SizeRange(MinWidth,value,MaxWidth,MaxHeight)
        else
            Throw(self,"Invalid parameter expecting Number as MinHeight")
        }

    /*

    */
    block SetMaxWidth(value)
        if IsNumber(value) {
            SizeRange(MinWidth,MinHeight,value,MaxHeight)
        else
            Throw(self,"Invalid parameter expecting Number as MaxWidth")
        }

    /*

    */
    block SetMaxHeight(value)
        if IsNumber(value) {
            SizeRange(MinWidth,MinHeight,MaxWidth,value)
        else
            Throw(self,"Invalid parameter expecting Number as MaxHeight")
        }

    /*

    */
    block GetXRoot()
        return __Fl_Window_x_root(Ptr)

    /*

    */
    block GetYRoot()
        return __Fl_Window_y_root(Ptr)

    /*

    */
    block WaitForExpose()
        __Fl_Window_wait_for_expose(Ptr)

    /*

    */
    block CenterOnScreen()
        screenDimension = new ScreenDimension()
        screenWidth = screenDimension.Width
        screenHeight = screenDimension.Height
        xpos = (screenWidth/2) - (Width/2)
        ypos = (screenHeight/2) - (Height/2)
        Resize(xpos,ypos,Width,Height)

    /*

    */
    block SetWindowListener(listener)
        if InstanceOf(listener,"FWindowEvent") {
            WindowEvent = listener
            __fltk_created_widgets[PtrAddress] = self #do something about this
        else
            Throw(self,"Invalid window listener, only an instance of fulltick.events.WindowEvent allow, Found (" + ObjectType(listener) + ")")
        }

    /*

    */
    block SetWindowEvent(listener)
        SetWindowListener(listener)

    /*

    */
    block GetWindowListener() 
        return WindowEvent

    /*

    */
    block GetWindowEvent() 
        return WindowEvent

    /*

    */
    private 

        /*

        */
        RootBox = null

        /*

        */
        __Cursor = Cursor

        /*

        */
        block SetIsMenuWindow()

        /*

        */
        block SetXRoot()

        /*

        */
        block SetYRoot()

        /*

        */
        block Reshow()
            ValidatePointer()
            Hide()
            Show()

        /*

        */
        block BuildActionBar() 
            ActionBar = new FGroup(0,0,Width,ActionBarSize) {
                SetBox(FBoxType.FLAT_BOX) 
                SetBackground(new FColor(62,78,184)) 
                __Name = "WindowActionBar"
                this.ActionBarLabel = new FLabel(10,20,this.Title) {
                    SetLabelSize(18)
                    SetLabelColor(FColor.FCOLOR_WHITE)
                    SetLabelFont(1)
                } 
                Add(this.ActionBarLabel)
            } 
            Add(ActionBar)
        


/*

*/
class FWindowModality

    /*

    */
    NORMAL = 0

    /*

    */
    MODAL = 1

    /*

    */
    NON_MODAL = 2

