
/*

*/
from simple.core.Object
from fulltick.base/FWidget
from fulltick.painting.FColor
from fulltick.drawing.FAlignment
from fulltick.drawing.FFont
from fulltick.drawing.FBoxType
from fulltick.widgets.FInput_

/*

*/
module fulltick.widgets

/*

*/
class FFileInput : FInput_

    /*

    */
    Width = FApp.Scheme.GetShemeValue("FFileInput.Width") 

    /*

    */
    Height = FApp.Scheme.GetShemeValue("FFileInput.Height") 

    /*

    */
    X = FApp.Scheme.GetShemeValue("FFileInput.X") 

    /*

    */
    Y = FApp.Scheme.GetShemeValue("FFileInput.Y") 

    /*

    */
    Label = FApp.Scheme.GetShemeValue("FFileInput.Label") 

    /*

    */
    CapitalizeLabel = FApp.Scheme.GetShemeValue("FFileInput.CapitalizeLabel") 

    /*

    */
    Background = FApp.Scheme.GetShemeValue("FFileInput.Background") 

    /*

    */
    LabelAlignment = FApp.Scheme.GetShemeValue("FFileInput.LabelAlignment") 

    /*

    */
    Box = FApp.Scheme.GetShemeValue("FFileInput.Box") 

    /*

    */
    Border = FApp.Scheme.GetShemeValue("FFileInput.Border") 

    /*

    */
    HasBorder = FApp.Scheme.GetShemeValue("FFileInput.HasBorder") 

    /*

    */
    AcceptInput = FApp.Scheme.GetShemeValue("FFileInput.AcceptInput")

    /*

    */
    Visible = FApp.Scheme.GetShemeValue("FFileInput.Visible") 

    /*

    */
    KeyboardFocusable = FApp.Scheme.GetShemeValue("FFileInput.KeyboardFocusable") 

    /*

    */
    Tooltip = FApp.Scheme.GetShemeValue("FFileInput.Tooltip") 

    /*

    */
    LabelColor = FApp.Scheme.GetShemeValue("FFileInput.LabelColor") 

    /*

    */
    LabelFont = FApp.Scheme.GetShemeValue("FFileInput.LabelFont") 

    /*

    */
    LabelSize = FApp.Scheme.GetShemeValue("FFileInput.LabelSize")

    /*

    */
    LabelType = FApp.Scheme.GetShemeValue("FFileInput.LabelType")

    /*

    */
    SelectionColor = FApp.Scheme.GetShemeValue("FFileInput.SelectionColor")

    /*

    */
    Text = null

    /*

    */
    Value = FApp.Scheme.GetShemeValue("FFileInput.Value")

    /*

    */
    CursorColor = FApp.Scheme.GetShemeValue("FFileInput.CursorColor")

    /*

    */
    Mark = FApp.Scheme.GetShemeValue("FFileInput.Mark")

    /*

    */
    MaximumSize = FApp.Scheme.GetShemeValue("FFileInput.MaximumSize")
	
	/*
	
	*/
	CaretPosition = FApp.Scheme.GetShemeValue("FFileInput.CaretPosition")
	
	/*
	
	*/
	ReadOnly = FApp.Scheme.GetShemeValue("FFileInput.ReadOnly")

    /*

    */
    Shortcut = FApp.Scheme.GetShemeValue("FFileInput.Shortcut")

    /*

    */
    TabNav = FApp.Scheme.GetShemeValue("FFileInput.TabNav")

    /*

    */
    Wrap = FApp.Scheme.GetShemeValue("FFileInput.Wrap")

    /*

    */
    TextColor = FApp.Scheme.GetShemeValue("FFileInput.TextColor") 

    /*

    */
    TextFont = FApp.Scheme.GetShemeValue("FFileInput.TextFont") 

    /*

    */
    TextSize = FApp.Scheme.GetShemeValue("FFileInput.TextSize")
	
	/*
	
	*/
	DownBox = FApp.Scheme.GetShemeValue("FFileInput.DownBox")
	
	/*
	
	*/
	ErrorColor = FApp.Scheme.GetShemeValue("FFileInput.ErrorColor")

    /*

    */
    block Init(params...)
        paramsLen = LengthOf(params)
        if paramsLen == 1 {
            Value = params[0]
            if !IsString(Value) {
                Throw(self,"Invalid parameter Expecting 'string' as FFileInput Value")
            }
        elif paramsLen == 2
            X = params[0]
            Y = params[1]
            if !IsNumber(X) or !IsNumber(Y) {
                Throw(self,"Invalid parameter Expecting 'number' as FFileInput X and Y")
            }
        elif paramsLen == 3 
            X = params[0]
            Y = params[1]
            Value = params[2]
            if !IsNumber(X) or !IsNumber(Y) {
                Throw(self,"Invalid parameter Expecting 'number' as FFileInput X and Y")
            }
            if !IsString(Value) {
                Throw(self,"Invalid parameter Expecting 'string' as FFileInput Value")
            }
        elif paramsLen == 4
            X = params[0]
            Y = params[1]
            Width = params[2]
            Height = params[3]
            if !IsNumber(X) or !IsNumber(Y) {
                Throw(self,"Invalid parameter Expecting 'number' as FFileInput X and Y")
            }
            if !IsNumber(Width) or !IsNumber(Height) {
                Throw(self,"Invalid parameter Expecting 'number' as FFileInput Width and Height")
            }
        elif paramsLen == 5
            X = params[0]
            Y = params[1]
            Width = params[2]
            Height = params[3]
            Value = params[4]
            if !IsNumber(X) or !IsNumber(Y) {
                Throw(self,"Invalid parameter Expecting 'number' as FFileInput X and Y")
            }
            if !IsNumber(Width) or !IsNumber(Height) {
                Throw(self,"Invalid parameter Expecting 'number' as FFileInput Width and Height")
            }
            if !IsString(Value) {
                Throw(self,"Invalid parameter Expecting 'string' as FFileInput Value")
            }
        else    
            if paramsLen != 0 {
                Throw(self,"Calling block with invalid legth of parameter")
            }
        } 
        Ptr = __Fl_File_Input(X, Y, Width, Height, "") 
        RegisterWidget()
        SetBox(Box)
        SetBorder(Border)
        Construct()
		SetDownBox(DownBox)
		SetErrorColor(ErrorColor)
        
        return self

    /*

    */
    block SetDownBox(/*FBoxType|number*/ value) 
        if IsNumber(value) {
			__Fl_File_Input_down_box_1(Ptr,value)
			DownBox = new FBoxType(value)
		else
			__Fl_File_Input_down_box_1(Ptr,value.BoxType) 
			if !IsNull(value.BoxColor) { 
				SetBaseColor(value.BoxColor)
			}
			DownBox = value
		}

    /*

    */
    block GetDownBox()
        return DownBox
		
	/*

    */
    block SetErrorColor(/*FColor|number|string*/ value)
		if IsNumber(value) or IsString(value) {
			__Fl_File_Input_errorcolor_1(Ptr,value)
			value = new FColor(value) 
		else
			__Fl_File_Input_errorcolor_1(Ptr,value.ColorAsNumber())
		}
		ErrorColor = value
        

    /*

    */
    block GetErrorColor()
        return ErrorColor

    /*

    */
    private 
    
        

