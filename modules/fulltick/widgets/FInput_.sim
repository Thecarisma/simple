
/*

*/
from simple.core.Object
from simple.system.Color
from fulltick.base.FWidget
from fulltick.drawing.FAlignment
from fulltick.drawing.FFont
from fulltick.drawing.FBoxType
from fulltick.painting.FColor

/*

*/
module fulltick.widgets

/*

*/
class FInput_ : FWidget

    /*

    */
    Width = FApp.Scheme.GetShemeValue("FInput_.Width") 

    /*

    */
    Height = FApp.Scheme.GetShemeValue("FInput_.Height") 

    /*

    */
    X = FApp.Scheme.GetShemeValue("FInput_.X") 

    /*

    */
    Y = FApp.Scheme.GetShemeValue("FInput_.Y") 

    /*

    */
    Label = FApp.Scheme.GetShemeValue("FInput_.Label") 

    /*

    */
    CapitalizeLabel = FApp.Scheme.GetShemeValue("FInput_.CapitalizeLabel") 

    /*

    */
    Background = FApp.Scheme.GetShemeValue("FInput_.Background") 

    /*

    */
    LabelAlignment = FApp.Scheme.GetShemeValue("FInput_.LabelAlignment") 

    /*

    */
    Box = FApp.Scheme.GetShemeValue("FInput_.Box") 

    /*

    */
    Border = FApp.Scheme.GetShemeValue("FInput_.Border") 

    /*

    */
    HasBorder = FApp.Scheme.GetShemeValue("FInput_.HasBorder") 

    /*

    */
    AcceptInput = FApp.Scheme.GetShemeValue("FInput_.AcceptInput")

    /*

    */
    Visible = FApp.Scheme.GetShemeValue("FInput_.Visible") 

    /*

    */
    KeyboardFocusable = FApp.Scheme.GetShemeValue("FInput_.KeyboardFocusable") 

    /*

    */
    Tooltip = FApp.Scheme.GetShemeValue("FInput_.Tooltip") 

    /*

    */
    LabelColor = FApp.Scheme.GetShemeValue("FInput_.LabelColor") 

    /*

    */
    LabelFont = FApp.Scheme.GetShemeValue("FInput_.LabelFont") 

    /*

    */
    LabelSize = FApp.Scheme.GetShemeValue("FInput_.LabelSize")

    /*

    */
    LabelType = FApp.Scheme.GetShemeValue("FInput_.LabelType")

    /*

    */
    SelectionColor = FApp.Scheme.GetShemeValue("FInput_.SelectionColor")

    /*

    */
    Text = null

    /*

    */
    Value = FApp.Scheme.GetShemeValue("FInput_.Value")

    /*

    */
    CursorColor = FApp.Scheme.GetShemeValue("FInput_.CursorColor")

    /*

    */
    Mark = FApp.Scheme.GetShemeValue("FInput_.Mark")

    /*

    */
    MaximumSize = FApp.Scheme.GetShemeValue("FInput_.MaximumSize")
	
	/*
	
	*/
	CaretPosition = FApp.Scheme.GetShemeValue("FInput_.CaretPosition")
	
	/*
	
	*/
	ReadOnly = FApp.Scheme.GetShemeValue("FInput_.ReadOnly")

    /*

    */
    Shortcut = FApp.Scheme.GetShemeValue("FInput_.Shortcut")

    /*

    */
    TabNav = FApp.Scheme.GetShemeValue("FInput_.TabNav")

    /*

    */
    Wrap = FApp.Scheme.GetShemeValue("FInput_.Wrap")

    /*

    */
    TextColor = FApp.Scheme.GetShemeValue("FInput_.TextColor") 

    /*

    */
    TextFont = FApp.Scheme.GetShemeValue("FInput_.TextFont") 

    /*

    */
    TextSize = FApp.Scheme.GetShemeValue("FInput_.TextSize")

    /*

    */
    block Init(params...)
        paramsLen = LengthOf(params)
        if paramsLen == 1 {
            Label = params[0]
            if !IsString(Label) {
                Throw(self,"Invalid parameter Expecting 'string' as FInput_ Label")
            }
        elif paramsLen == 2
            X = params[0]
            Y = params[1]
            if !IsNumber(X) or !IsNumber(Y) {
                Throw(self,"Invalid parameter Expecting 'number' as FInput_ X and Y")
            }
        elif paramsLen == 3 
            X = params[0]
            Y = params[1]
            Label = params[2]
            if !IsNumber(X) or !IsNumber(Y) {
                Throw(self,"Invalid parameter Expecting 'number' as FInput_ X and Y")
            }
            if !IsString(Label) {
                Throw(self,"Invalid parameter Expecting 'string' as FInput_ Label")
            }
        elif paramsLen == 4
            X = params[0]
            Y = params[1]
            Width = params[2]
            Height = params[3]
            if !IsNumber(X) or !IsNumber(Y) {
                Throw(self,"Invalid parameter Expecting 'number' as FInput_ X and Y")
            }
            if !IsNumber(Width) or !IsNumber(Height) {
                Throw(self,"Invalid parameter Expecting 'number' as FInput_ Width and Height")
            }
        elif paramsLen == 5
            X = params[0]
            Y = params[1]
            Width = params[2]
            Height = params[3]
            Label = params[4]
            if !IsNumber(X) or !IsNumber(Y) {
                Throw(self,"Invalid parameter Expecting 'number' as FInput_ X and Y")
            }
            if !IsNumber(Width) or !IsNumber(Height) {
                Throw(self,"Invalid parameter Expecting 'number' as FInput_ Width and Height")
            }
            if !IsString(Label) {
                Throw(self,"Invalid parameter Expecting 'string' as FInput_ Label")
            }
        else    
            if paramsLen != 0 {
                Throw(self,"Calling block with invalid legth of parameter")
            }
        } 
        if CapitalizeLabel {
            Label = ToUpperCase(Label)
        }
        Ptr = __Fl_Box(X, Y, Width, Height, Label) 
        RegisterWidget()
        Construct()     
        
        return self
		
	/*
	
	*/
	block Copy(number clipboard...)
		ValidatePointer()
		clipboardLen = LengthOf(clipboard)
		clip = 1
		
		if clipboardLen == 0 {
		elif clipboardLen == 1
			clip = clipboard[0]
		else
			Throw(self, "Calling block with invalid length of parameters")
		}
		return __Fl_Input__copy_4(Ptr, clip) 
		
	/*
	
	*/
	block CopyCuts()
		ValidatePointer()
		return __Fl_Input__copy_cuts(Ptr) 
		
	/*
	
	*/
	block Cut(number plusChars...)
		ValidatePointer()
		plusCharsLen = LengthOf(plusChars)
		
		Copy()
		if plusCharsLen == 0 {
			return __Fl_Input__cut(Ptr)  
		elif plusCharsLen == 1
			return __Fl_Input__cut_1(Ptr, plusChars[0])
		elif plusCharsLen == 2
			Warn("The cut text is not copied ")
			return __Fl_Input__cut_2(Ptr, plusChars[0], plusChars[1])
		else
			Throw(self, "Calling block with invalid length of parameters")
		}
		
	/*
		
	*/
	block DeleteSelected()
		ValidatePointer()
		return __Fl_Input__cut(Ptr) 

    /*

    */
    block SetCursorColor(value)
        if IsObject(value) {
            if __instance_of(value,"FColor") {
                __Fl_Input__cursor_color_1(Ptr,value.ColorAsNumber())
            }
        elif IsNumber(value) or IsString(value) 
            __Fl_Input__cursor_color_1(Ptr,value)
            value = new FColor(value) 
        else
            Throw(self,"invalid parameter. Expecting innstance of 'Fcolor', 'Color', 'Number' or 'String' ")
        }
        CursorColor = value 
		
	/*
	
	*/
	block GetCursorColor()
		return CursorColor
		
	/*
	
	*/
	block Index(number n)
		ValidatePointer()
		return Ascii(__Fl_Input__index(Ptr, n))
		
	/*
	
	*/
	block Insert(string value)
		ValidatePointer()
		return __Fl_Input__insert(Ptr, value, 0)
		
	/*
	
	*/
	block GetMark()
		ValidatePointer()
		return __Fl_Input__mark(Ptr)
		
	/*
	
	*/
	block SetMark(number value)
		ValidatePointer()
		return __Fl_Input__mark_1(Ptr, value)
		
	/*
	
	*/
	block GetMaximumSize()
		return MaximumSize
		
	/*
	
	*/
	block SetMaximumSize(int value)
		ValidatePointer()
		MaximumSize = value
		return __Fl_Input__maximum_size_1(Ptr, value)
		
	/*
	
	*/
	block GetCaretPosition()
		return CaretPosition
		
	/*
	
	*/
	block SetCaretPosition(int values...)
		ValidatePointer()
		valuesLen = LengthOf(values)
		
		if valuesLen == 1 {
			CaretPosition = values[0]%LengthOf(GetValue())
			__Fl_Input__position_2(Ptr, CaretPosition)
		elif valuesLen == 2
			CaretPosition = values[0]%LengthOf(GetValue())
			__Fl_Input__position_1(Ptr, CaretPosition, values[1])
		else
			Throw(self, "Calling block with invalid length of parameter")
		}

    /*

    */
    block GetReadOnly()
        return ReadOnly

    /*

    */
    block SetReadOnly(boolean value)
		ReadOnly = value
        __Fl_Input__readonly_1(Ptr, value)
		
	/*
	
	*/
	block Replace(int from, int too, string text)
		ValidatePointer()
		return __Fl_Input__replace(Ptr, from, too, text, 0)

    /*

    */
    block GetShortcut()
        return Shortcut

    /*

    */
    block SetShortcut(number value) 
        __Fl_Input__shortcut_1(Ptr,value)
        Shortcut = value

    /*

    */
    block GetTabNav()
        return TabNav

    /*

    */
    block SetTabNav(number value) 
        __Fl_Input__tab_nav(Ptr,value)
        TabNav = value
		
	/*
	
	*/
	block Undo()
		ValidatePointer()
		return __Fl_Input__undo(Ptr)

    /*

    */
    block GetWrap()
        return Wrap

    /*

    */
    block SetWrap(number value) 
        __Fl_Input__wrap_1(Ptr,value)
        Wrap = value
		
	/*

    */
    block SetTextColor(/*FColor|number|string*/ value)
		if IsNumber(value) or IsString(value) {
			__Fl_Input__textcolor_1(Ptr,value)
			value = new FColor(value) 
		else
			__Fl_Input__textcolor_1(Ptr,value.ColorAsNumber())
		}
		TextColor = value
        

    /*

    */
    block GetTextColor()
        return TextColor   

    /*

    */
    block SetTextFont(/*FFont|number*/ value)
		if IsNumber(value) {
            __Fl_Input__textfont_1(Ptr,value)
            value = new FFont(value) 
		else
			__Fl_Input__textfont_1(Ptr,value.FontValue)
		}
		TextFont = value
        

    /*

    */
    block GetTextFont()
        return TextFont    

    /*

    */
    block SetTextSize(number value)
		if value <= 0 {
			Throw(self,"FWidget Label Size cannot be less than 0 ")
			return
		}
		__Fl_Input__textsize_1(Ptr,value)
		TextSize = value

    /*

    */
    block GetTextSize()
        return TextSize

    /*

    */
    block GetText()
        return GetValue()

    /*

    */
    block SetText(value)
        SetValue(value)

    /*
        
    */
    block SetPlatformScheme(schemeName)
        schemeName = StringValue(schemeName)
        if schemeName == FScheme.Android {
            SetBackground(new FColor(250,250,250))
	        SetBorder(new FBorder(0,4,0,0,__FL_FLAT_BOX(),new FColor(255,106,154)))

        elif schemeName == FScheme.Windows
	        SetBorder(new FBorder(1,1,1,1,__FL_DOWN_BOX(),new FColor(172,172,172)))

        elif schemeName == FScheme.Macosx
            SetBorder(new FBorder(2,2,2,2,__FL_FLAT_BOX(),new FColor(197,197,197)))

        elif schemeName == FScheme.Linux
			SetBackground(new FColor(229,220,212))
            SetBorder(new FBorder(2,2,2,2,__FL_FLAT_BOX(),new FColor(194,85,41)))

        }

    /*

    */
    block SetValue(string value)
        __Fl_Input__value(Ptr,value)

    /*

    */
    block GetValue()
		ValidatePointer()
        return __Fl_Input__value_2(Ptr)

    /*

    */
    private 

        /*

        */
        block Construct()   
            SetLabelAlignment(LabelAlignment)
            SetBox(Box)
            SetBorder(Border)
            SetValue(Value)
            SetLabel(Label)
			SetReadOnly(ReadOnly)
			SetTextColor(TextColor)
			SetTextFont(TextFont)
			SetTextSize(TextSize)
			SetCursorColor(CursorColor)
            super.Construct()
