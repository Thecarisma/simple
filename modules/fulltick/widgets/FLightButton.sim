
/*

*/
from simple.core.Object
from simple.system.Color
from fulltick.base.FWidget
from fulltick.painting.FColor
from fulltick.drawing.FAlignment
from fulltick.drawing.FBoxType
from fulltick.widgets.FButton

/*

*/
module fulltick.widgets

/*

*/
class FLightButton : FButton

    /*

    */
    Width = FApp.Scheme.GetShemeValue("FLightButton.Width") 

    /*

    */
    Height = FApp.Scheme.GetShemeValue("FLightButton.Height") 

    /*

    */
    X = FApp.Scheme.GetShemeValue("FLightButton.X") 

    /*

    */
    Y = FApp.Scheme.GetShemeValue("FLightButton.Y") 

    /*

    */
    Label = FApp.Scheme.GetShemeValue("FLightButton.Label") 

    /*

    */
    CapitalizeLabel = FApp.Scheme.GetShemeValue("FLightButton.CapitalizeLabel") 

    /*

    */
    Background = FApp.Scheme.GetShemeValue("FLightButton.Background") 

    /*

    */
    LabelAlignment = FApp.Scheme.GetShemeValue("FLightButton.LabelAlignment") 

    /*

    */
    BaseColor = FApp.Scheme.GetShemeValue("FLightButton.BaseColor") 

    /*

    */
    Box = FApp.Scheme.GetShemeValue("FLightButton.Box") 

    /*

    */
    BaseBox = FApp.Scheme.GetShemeValue("FLightButton.BaseBox") 

    /*

    */
    Border = FApp.Scheme.GetShemeValue("FLightButton.Border") 

    /*

    */
    HasBorder = FApp.Scheme.GetShemeValue("FLightButton.HasBorder") 

    /*

    */
    AcceptInput = FApp.Scheme.GetShemeValue("FLightButton.AcceptInput")

    /*

    */
    Visible = FApp.Scheme.GetShemeValue("FLightButton.Visible") 

    /*

    */
    KeyboardFocusable = FApp.Scheme.GetShemeValue("FLightButton.KeyboardFocusable") 

    /*

    */
    Text = FApp.Scheme.GetShemeValue("FLightButton.Text") 

    /*

    */
    Tooltip = FApp.Scheme.GetShemeValue("FLightButton.Tooltip") 

    /*

    */
    LabelColor = FApp.Scheme.GetShemeValue("FLightButton.LabelColor") 

    /*

    */
    LabelFont = FApp.Scheme.GetShemeValue("FLightButton.LabelFont") 

    /*

    */
    LabelSize = FApp.Scheme.GetShemeValue("FLightButton.LabelSize")

    /*

    */
    LabelType = FApp.Scheme.GetShemeValue("FLightButton.LabelType")

    /*

    */
    SelectionColor = FApp.Scheme.GetShemeValue("FLightButton.SelectionColor")

    /*

    */
    Shortcut = FApp.Scheme.GetShemeValue("FLightButton.Shortcut")

    /*

    */
    Value = FApp.Scheme.GetShemeValue("FLightButton.Value")

    /*

    */
    Text = null

    /*

    */
    block Init(params...)
        paramsLen = LengthOf(params)
        if paramsLen == 1 {
            Label = params[0]
            if !IsString(Label) {
                Throw(self,"Invalid parameter Expecting 'string' as FLightButton Label")
            }
        elif paramsLen == 2
            Width = params[0]
            Height = params[1]
            if !IsNumber(Width) or !IsNumber(Height) {
                Throw(self,"Invalid parameter Expecting 'number' as FLightButton Width and Height")
            }
        elif paramsLen == 3 
            Width = params[0]
            Height = params[1]
            Label = params[2]
            if !IsNumber(Width) or !IsNumber(Height) {
                Throw(self,"Invalid parameter Expecting 'number' as FLightButton Width and Height")
            }
            if !IsString(Label) {
                Throw(self,"Invalid parameter Expecting 'string' as FLightButton Label")
            }
        elif paramsLen == 4
            X = params[0]
            Y = params[1]
            Width = params[2]
            Height = params[3]
            if !IsNumber(X) or !IsNumber(Y) {
                Throw(self,"Invalid parameter Expecting 'number' as FLightButton X and Y")
            }
            if !IsNumber(Width) or !IsNumber(Height) {
                Throw(self,"Invalid parameter Expecting 'number' as FLightButton Width and Height")
            }
        elif paramsLen == 5
            X = params[0]
            Y = params[1]
            Width = params[2]
            Height = params[3]
            Label = params[4]
            if !IsNumber(X) or !IsNumber(Y) {
                Throw(self,"Invalid parameter Expecting 'number' as FLightButton X and Y")
            }
            if !IsNumber(Width) or !IsNumber(Height) {
                Throw(self,"Invalid parameter Expecting 'number' as FLightButton Width and Height")
            }
            if !IsString(Label) {
                Throw(self,"Invalid parameter Expecting 'string' as FLightButton Label")
            }
        else    
            if paramsLen != 0 {
                Throw(self,"Calling block with invalid legth of parameter")
            }
        } 

        if CapitalizeLabel {
            Label = ToUpperCase(Label)
        }
        Ptr = __Fl_Light_Button(X, Y, Width, Height, "")
        RegisterWidget()
        #Resize(X, Y, Width, Height)
        SetLabelAlignment(LabelAlignment)
        SetBox(Box)
        SetBaseColor(BaseColor)
        SetBaseBox(BaseBox)
        SetBorder(Border)
        Construct()
        SetValue(Value)
        
        return self

    /*

    */
    private 

