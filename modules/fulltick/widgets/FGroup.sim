
/*

*/
from simple.core.Object
from simple.system.System
from simple.graphics.Dimension
from simple.system.ScreenDimension
from fulltick.base.FWidget
import fulltick.widgets

/*

*/
module fulltick.widgets

/*

*/
class FGroup : FWidget 

    /*

    */
    Label = FApp.Scheme.GetShemeValue("FGroup.Label")

    /*

    */
    Width = FApp.Scheme.GetShemeValue("FGroup.Width")

    /*

    */
    Height = FApp.Scheme.GetShemeValue("FGroup.Height") 

    /*

    */
    X = FApp.Scheme.GetShemeValue("FGroup.X")

    /*

    */
    Y = FApp.Scheme.GetShemeValue("FGroup.Y") 

    /*

    */
    Y_Diff = FApp.Scheme.GetShemeValue("FGroup.Y_Diff") 

    /*

    */
    ClipChildren = FApp.Scheme.GetShemeValue("FGroup.ClipChildren") 

    /*

    */
    AdaptiveSize = FApp.Scheme.GetShemeValue("FGroup.AdaptiveSize") 

    /*

    */
    CapitalizeLabel = FApp.Scheme.GetShemeValue("FGroup.CapitalizeLabel") 

    /*

    */
    Box = FApp.Scheme.GetShemeValue("FGroup.Box") 

    /*

    */
    Border = FApp.Scheme.GetShemeValue("FGroup.Border") 

    /*

    */
    HasBorder = FApp.Scheme.GetShemeValue("FGroup.HasBorder") 

    /*

    */
    AcceptInput = FApp.Scheme.GetShemeValue("FGroup.AcceptInput")

    /*

    */
    Visible = FApp.Scheme.GetShemeValue("FGroup.Visible") 

    /*

    */
    KeyboardFocusable = FApp.Scheme.GetShemeValue("FGroup.KeyboardFocusable") 

    /*

    */
    Tooltip = FApp.Scheme.GetShemeValue("FGroup.Tooltip") 

    /*

    */
    LabelColor = FApp.Scheme.GetShemeValue("FGroup.LabelColor") 

    /*

    */
    LabelFont = FApp.Scheme.GetShemeValue("FGroup.LabelFont") 

    /*

    */
    LabelSize = FApp.Scheme.GetShemeValue("FGroup.LabelSize") 

    /*

    */
    LabelType = FApp.Scheme.GetShemeValue("FGroup.LabelType")

    /*

    */
    SelectionColor = FApp.Scheme.GetShemeValue("FGroup.SelectionColor")

    /*

    */
    AddedWidgets = [
        
    ]

    /*

    */
    ResizableWidget = null

    /*

    */
    block Init(params...) 
        paramsLen = LengthOf(params)
        asBorder = false
        if paramsLen == 1 {
            Label = params[0]
            if !IsString(Label) {
                Throw(self,"Invalid parameter Expecting 'string' as FGroup Label")
            }
        elif paramsLen == 2
            Width = params[0]
            Height = params[1]
            if !IsNumber(Width) or !IsNumber(Height) {
                Throw(self,"Invalid parameter Expecting 'number' as FGroup Width and Height")
            }
        elif paramsLen == 3 
            Width = params[0]
            Height = params[1]
            Label = params[2]
            if !IsNumber(Width) or !IsNumber(Height) {
                Throw(self,"Invalid parameter Expecting 'number' as FGroup Width and Height")
            }
            if !IsString(Label) {
                Throw(self,"Invalid parameter Expecting 'string' as FGroup Label")
            }
        elif paramsLen == 4
            X = params[0]
            Y = params[1]
            Width = params[2]
            Height = params[3]
            if !IsNumber(X) or !IsNumber(Y) {
                Throw(self,"Invalid parameter Expecting 'number' as FGroup X and Y")
            }
            if !IsNumber(Width) or !IsNumber(Height) {
                Throw(self,"Invalid parameter Expecting 'number' as FGroup Width and Height")
            }
        elif paramsLen == 5
            X = params[0]
            Y = params[1]
            Width = params[2]
            Height = params[3]
            Label = params[4]
            if !IsNumber(X) or !IsNumber(Y) {
                Throw(self,"Invalid parameter Expecting 'number' as FGroup X and Y")
            }
            if !IsNumber(Width) or !IsNumber(Height) {
                Throw(self,"Invalid parameter Expecting 'number' as FGroup Width and Height")
            }
            if !IsString(Label) {
                Throw(self,"Invalid parameter Expecting 'string' as FGroup Label")
            }
        else    
            if paramsLen != 0 {
                Throw(self,"Calling block with invalid legth of parameter")
            }
        } 
        Ptr = __Fl_Group_1(X,Y,Width,Height,Label) 
        SetBorder(Border)
        Construct()
        SetResizable(false)
        EndBegin()
        if !asBorder { RegisterWidget() }
        return self

    /*

    */#move adaptive to layout completely
    block Add(FWidget widgets...)  
        x = 0
        y = 0
        for widget in widgets { 
            widget.ValidatePointer() 
			#__fltk_created_widgets[widget.PtrIndex].Parent = self #currently slowing callback #TODO : revisit
			if widget.HasBorder() {
				__Fl_Group_add(Ptr,widget.BorderBox.Ptr)
			else
				__Fl_Group_add(Ptr,widget.Ptr)
			}
			AddChildWidget(__fltk_created_widgets[widget.PtrIndex]) 
			__fltk_created_widgets[widget.PtrIndex].Parent = self
			__fltk_created_widgets[widget.PtrIndex].ResolvePendingOps()
			if AdaptiveSize {
				
				if x < widget.X {
					x += widget.X
					Width += widget.Width
					#widget.X -= widget.X #when ref passed
				else 
				}
				if y < widget.Y {
					y += widget.Height  
					Height += widget.Height 
					#widget.Y -= widget.Y #when ref passed
				else y = 0 #remove when ref passed
				}
			} 
			if widget.__Name != "WindowActionBar" and Name == "FWindow" and IsAndroid() and FScheme.UsePlatformUI  {
				widget.SetY(widget.Y + ActionBarSize + 10)
			}            
        }
        if AdaptiveSize { 
            Resize(0,0,Width+100,Height)
        }

    /*

    */
    block SetAddedWidgets(value)
        Throw(self,FULLTICK_SET_OPS+" 'AddedWidgets'")

    /*

    */
    block AddedWidgetsSize()
        return LengthOf(AddedWidgets)

    /*

    */
    block Clear()
        __Fl_Group_clear(Ptr)

    /*

    */
    block GetClipChildren()
        return ClipChildren

    /*

    */
    block SetClipChildren(condition)
        if IsNumber(condition) {
            if condition == true or condition == false {
                ClipChildren = condition
                __Fl_Group_clip_children(Ptr,condition)
            }
        else
            Throw(self,FULLTICK_INVALID_PARAMETER+" Expecting a boolean value for FGroup 'ClipChildren'")
        } 

    /*

    */
    block FindWidgetIndex(widget) 
        if IsObject(widget) and __instance_of(widget,"FWidget") {
            widget.ValidatePointer()
            return  __Fl_Group_find(Ptr,widget.Ptr) - 1
        else
            Throw(self,FULLTICK_INVALID_PARAMETER+" You can only find the index of FWidget instance in the FGroup widget")
        }
        return -1

    /*

    */
    block Focus(widget) 
        if IsObject(widget) and __instance_of(widget,"FWidget") {
            widget.ValidatePointer()
           __Fl_Group_focus(Ptr,widget.Ptr) 
        else
            Throw(self,FULLTICK_INVALID_PARAMETER+" Expecting an instance of FWidget to be focused in FGroup widget")
        }

    /*

    */
    block Insert(widget,index) 
        if IsObject(widget) and __instance_of(widget,"FWidget") {
            widget.ValidatePointer()
            if IsNumber(index) {
                widget.Parent = self
                __Fl_Group_insert(Ptr,widget.Ptr,index + 1) 
                AddChildWidget(widget) 
                #widget.Resizable = false
                widget.ResolvePendingOps()
            else
                Throw(self,FULLTICK_INVALID_PARAMETER+" Expecting a Number")
            }
        else
            Throw(self,FULLTICK_INVALID_PARAMETER+" Expecting an instance of FWidget only")
        }

    /*

    */
    block InsertResizable(widget,index) 
        if IsObject(widget) and __instance_of(widget,"FWidget") {
            widget.ValidatePointer()
            if IsNumber(index) {
                widget.Parent = self
                __Fl_Group_insert(Ptr,widget.Ptr,index + 1) 
                widget.Resizable = true
                AddChildWidget(widget) 
                widget.ResolvePendingOps()
            else
                Throw(self,FULLTICK_INVALID_PARAMETER+" Expecting a Number")
            }
        else
            Throw(self,FULLTICK_INVALID_PARAMETER+" Expecting an instance of FWidget only")
        }

    /*

    */
    block Remove(object) 
        if IsObject(object) and __instance_of(object,"FWidget") {
            object.ValidatePointer()
            object.RemoveParent(self)
            __Fl_Group_remove_2(Ptr,object.Ptr)
            RemoveChildWidget(object) 
        elif IsNumber(object) Remove("")
            AddedWidgets[object].RemoveParent(self)
            __Fl_Group_remove(Ptr,object.Ptr)
            RemoveChildWidget(AddedWidgets[object]) 
        else
            Throw(self,"Invalid parameter. Expecting an instance of FWidget or Number")
        }

    /*

    */
    block SetResizable(condition) 
        if IsObject(condition) and __instance_of(condition,"FWidget") {
            condition.ValidatePointer()
            __Fl_Group_resizable(Ptr,condition.Ptr)
            if condition.__Name != "RootBox" {
                ResizableWidget = condition
            } 
            Resizable = true 
            return
        elif IsNumber(condition) and (condition == true or condition == false)
            
        else
            Throw(self,"Invalid parameter. Expecting 'boolean' 'true' or 'false' as FGroup Resizable value")
        }        

        Resizable = condition 
        if Resizable { 
            __Fl_Group_resizable_1(Ptr,Ptr) 
        else 
            ResizableWidget = null
            __Fl_Group_not_resizable(Ptr) 
        }

    /*

    */
    block Begin(params...)
        paramsLen = LengthOf(params)
        if paramsLen == 0 {
            Throw(self,"Unsafe method. Add child widget to self widget using the 'Add(...)' method instead")
        elif paramsLen == 1
            condition = params[0]
            if condition {
                __Fl_Group_begin(Ptr)
            }
        else
            Throw(self,"Calling block with invalid legth of parameter")
        }

    /*

    */
    block EndBegin()
        __Fl_Group_end(Ptr)


    /*

    */
    block GetResazable()
        return Resizable
        
    /*

    */
    block Resize(params...) 
        paramsLen = LengthOf(params)

        if paramsLen == 1 {
            object = params[0]
            if InstanceOf(object,"Rectangle") {
                x = object.X
                y = object.Y
                width = object.Width
                height = object.Height
            else
                Throw(self, FULLTICK_INVALID_PARAMETER+" Expecting (simple.graphics.Rectangle) for resizing FGroup. Found (" + ObjectType(object) + ")")
            }
        elif paramsLen == 2
            point = params[0]
            dimension = params[1]
            if InstanceOf(point,"Point") and InstanceOf(dimension,"Dimension") {
                x = point.X
                y = point.Y
                width = dimension.Width
                height = dimension.Height
            else
                Throw(self, FULLTICK_INVALID_PARAMETER+" Expecting (simple.graphics.Point,simple.graphics.Dimension) for resizing FGroup. Found (" + ObjectType(point) + ", " + ObjectType(dimension) + ")")
            }
        elif paramsLen == 4
            x = params[0]
            y = params[1]
            width = params[2]
            height = params[3]
            if !IsNumber(x) or !IsNumber(y) or !IsNumber(width) or !IsNumber(height) {
                Throw(self, FULLTICK_INVALID_PARAMETER+" Expecting (Number, Number, Number, Number). Found (" + ObjectType(x) + ", " + ObjectType(y) + ", " + ObjectType(width) + ", " + ObjectType(height) + ")")
            }
        else
            Throw(self,"Changine FGroup size with invalid length of parameters")
            return
        }
        if IsAndroid() {
            sw = PrimaryScreenWidth()
            sh = PrimaryScreenHeight()
            
            if width > sw {
                width = Width
            }
            if height > sh {
                height = Height
            }
            if x < 0 {
                x = 0
            }
            if y < 0 {
                y = 0
            }
        }
        
        X = x
        Y = y
        Width = width
        Height = height
        if __instance_of(self,"FWindow") { 
            if self.HasWindowBorder or IsAndroid() {
                y += Y_Diff 
            }
        }
        __Fl_Group_resize(Ptr,x,y,width,height)

    /*

    */
    block CenterOnParent(params...)
        paramsLen = LengthOf(params)

        if paramsLen == 0 {
            if HasParent() { 
                screenDimension = new ScreenDimension()
                screenWidth = Parent.Width
                screenHeight = Parent.Height
                xpos = (screenWidth/2) - (Width/2)
                ypos = (screenHeight/2) - (Height/2)
                Resize(xpos,ypos,Width,Height)  
            else
                PendingOps["centeronparent"] = "true"
            }

        elif paramsLen == 1
            parent = params[0]
            if Isinstance(parent) {
                if IsNull(Parent) {
                    Parent = parent
                } 
                if Width <= 0 or Height <= 0 {
                    return 
                }
                screenDimension = new ScreenDimension()
                screenWidth = parent.Width 
                screenHeight = parent.Height 
                xpos = (screenWidth/2) - (Width/2)
                ypos = (screenHeight/2) - (Height/2)
                Resize(xpos,ypos,Width,Height) 
            else
                Throw(self,"The parent type is invalid, expecting instance Of (simple.widgets.FGroup). Found (" + ObjectType(parent) + ")")
            }

        else
            Throw(self,"Invalid length of parameters, a widget can have only one parent")
        }

    /*

    */
    block AdaptToChildrenSize()
        AdaptiveSize = true 

    /*
        #internal use only
    */
    block SetOnlyChild(widget)
        if HasOnlyChild() {
            Throw(self,"This widget can have only one child widget")
        }
        if InstanceOf(widget,"FWidget") {
            OnlyChild = widget
        else
            Throw(self,"Invalid parameter. Expecting (fulltick.base.Widget), Found (" + ObjectType(widget) + ")")
        }

    /*

    */
    block GetOnlyChild()
        return OnlyChild

    /*

    */
    block HasOnlyChild()
        return !IsNull(OnlyChild)
        
    /*

    */
    block Handle(event)
        #@"groupy : " + event
        return 0
        

    /*

    */
    private 

        /*

        */
        OnlyChild = null

        /*

        */
        block AddChildWidget(widget)
            #__add_to_list(AddedWidgets,widget) #makes rendering very slow

        /*

        */
        block RemoveChildWidget(widget)
            index = __find_in_list(AddedWidgets,widget)
            if index >= 0 {
                __del_from_list(AddedWidgets,index)
            }
            
