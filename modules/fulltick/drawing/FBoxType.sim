
/*

*/
from fulltick.base.FWidget
from fulltick.painting.FColor
from fulltick.objects.FBorder
import simple.core, simple.system, simple.util

/*

*/
module fulltick.drawing

/*

*/
final FBoxType = new fulltick.drawing.FBoxType

/*
    
*/
class FBoxType : Object

    /*

    */
    NO_BOX = null

    /*

    */
    FLAT_BOX = null

    /*

    */
    BoxType = 0

    /*

    */
    BoxColor = null

    /*

    */
    block Init(params...)
        paramsLen = LengthOf(params)

        if paramsLen == 0 {
            BoxType = __FL_FLAT_BOX()
        elif paramsLen == 1 
            type = params[0]
            if IsNumber(type) {
                BoxType = type
            else
                Throw(self,"Invalid parameter in FBoxType Constructor. Expecting (Number). Found (" + ObjectType(type) + ")")
            }
        elif paramsLen == 2
            type = params[0]
            color = params[1]
            if IsNumber(type) and (IsNumber(color) or (IsObject(color) and InstanceOf(color,"FColor"))) {
                BoxType = type
                if IsNumber(color) {
                    BoxColor = new FColor(color)
                else
                    BoxColor = color
                } 
            else
                Throw(self,"Invalid parameter in FBoxType Constructor. Expecting (Number,Number|fulltick.painting.FColor). Found (" + ObjectType(type) + "," + ObjectType(color) + ")")
            }
        else
            Throw(self,"Calling block with invalid legth of parameter")
        }

    /*

    */
	block GetNO_BOX()
        if IsNull(NO_BOX) { 
            NO_BOX = new FBoxType(__FL_NO_BOX())
        }
        return NO_BOX

    /*

    */
	block GetFLAT_BOX()
        if IsNull(FLAT_BOX) { 
            FLAT_BOX = new FBoxType(__FL_FLAT_BOX())
        }
        return FLAT_BOX

    /*

    */
    block Name()
        name = boxTypeNameMap[""+BoxType+""]
        if IsNull(name) {
            name = "Invalid BoxType"
        }
        return name

    /*

	*/
	block Equals(object)
		if !IsObject(object) or !__instance_of(object,"FBoxType") {
			return false
		}
		return (BoxType == object.BoxType)
     
    /*

    */
    block ToString() 
        return "[" + Absolutename() + ":BoxType=" + BoxType + ",BoxTypeName=" + Name() + ",BoxColor=" + Boxcolorname() + "]"

    /*

    */
    private 

        /*

        */
        boxTypeNameMap = [
            ["0","NO_BOX"],
            ["1","FLAT_BOX"]
        ]

        /*

        */
        block SetBoxType()

        /*

        */
        block Boxcolorname()
            if IsNull(BoxColor) {
                return "(null)"
            }
            return BoxColor.ToString()

