
/*

*/
from simple.core.Object
from simple.debugging.Throw
from simple.debugging.ErrorMessages
from simple.reflection.Class
from fulltick.events.FWindowEvent
from fulltick.base.loaddyfulltick
from simple.system.Color
from fulltick.FScheme
import simple.core
import simple.system
import simple.debugging
import simple.reflection

/*

*/
module fulltick

/*

*/
final FApp = new fulltick.FApp

/*

*/
number __fltk_current_event = 0

/*

*/
string __fltk_current_pointer = null
	
/*

*/
number __fltk_current_widget_id = 0

/*

*/
list __fltk_created_widgets = []
	
/*

*/
number __fltk_current_menu_index = 0

/*

*/
list __fltk_created_menus = []

/*

*/
__fltk_created_menus_count = -1

/*
	This block is likely never going to be executed,
	it act as a template for the handle method in the 
	FApp class, it is here because the block will be
	searched for in the global scope and called on 
	the local scope which is the handle method in the 
	FApp class
*/
block __fltk_handle()
	FApp.Handle()

/*
	To be deprecated
*/
block __fltk_widget_callback()
	__fltk_created_widgets[__fltk_current_widget_id].DoCallback()

/*
	To be deprecated
*/
block __fltk_widget_menu_callback()
	__fltk_created_menus[__fltk_current_menu_index].DoCallback()

/*

*/
class FApp : Object

	/*

	*/
	Scheme = FScheme

	/*


	*/
	CurrentWidget = null

	/*

	*/
	BelowMouse = null

	/*

	*/
	block SetScheme(value)
		if IsObject(value) and __instance_of(value,"FScheme") {
			Scheme = value
		else
			Throw(self,FULLTICK_INVALID_PARAMETER)
		}

	/*
	
	*/
	block Run()
		isRunning = true 
		__Fl_Fl_event_dispatch(true)
		__Fl_Fl_run()
		
	/*
	
	*/	
	block IsRunning()
		return isRunning		
	
	/*
	
	*/
	block Scheme(param...)
		paramLen = LengthOf(param)
		if paramLen == 0 {
			return scheme
		elif paramLen == 1
			object = param[0]
			if IsString(object) {
				self.scheme = object
			elif InstanceOf(object,"FScheme")
				self.scheme = object.SchemeName
			} 
			__Fl_Fl_scheme(self.scheme)
		else 
			ThrowWithTitle(self,"Calling block with invalid legth of parameter")
		}

	/*
		internal use only 
	*/
	block Handle() 
		#@__fltk_current_pointer+":"+__fltk_current_event
		widget = __fltk_created_widgets[__fltk_current_pointer] 
		if !IsNull(widget) { 
			windowPtr = widget.Ptr 
			Ptr = widget.Ptr 
			switch (__fltk_current_event) {
				case __FL_CLOSE()
					if __instance_of(widget,"FWindow") {
						if !IsNull(widget.WindowEvent) {
							widget.WindowEvent.Callback(widget,10)
						else
							grab = __Fl_Fl_grab() 
							modal = __Fl_Fl_modal() 
							if (!__is_null_pointer(grab,grab[1]) or (!__is_null_pointer(modal,modal[1]) and Ptr != modal) ) {
								return 0
							} 
							__Fl_Widget_do_callback(Ptr)
						}
					}					
					return 1

				case __FL_SHOW() 
					if InstanceOf(widget,"FWindow") {
						if !IsNull(widget.WindowEvent) {
							widget.WindowEvent.Callback(widget,16)
						else
							__Fl_Fl_handle_(__fltk_current_event,Ptr) 
						}
					}	
					return 1

				case __FL_HIDE() 
					if InstanceOf(widget,"FWindow") { 
						if !IsNull(widget.WindowEvent) { 
							widget.WindowEvent.Callback(widget,15)
							return 0
						else
							__Fl_Fl_handle_(__fltk_current_event,Ptr) #no static Fl_Widget::show
						}
					}	
					return 1

				case __FL_PUSH()
					grab = __Fl_Fl_grab()
					modal = __Fl_Fl_modal() 
					if (!__is_null_pointer(grab,grab[1])) { 
						Ptr = grab 
					elif ( !__is_null_pointer(modal,modal[1]) and Ptr != modal)
						return 0
					}
					__Fl_Fl_set_pushed_(Ptr) 
					__Fl_Tooltip_Fl_Tooltip_current_1(Ptr)
					if SendEvent(__fltk_current_event,widget,windowPtr) == 1 { return 1 }
					__Fl_Widget_show(Ptr)
					return 1 

				case __FL_DND_ENTER()
					dndFlag = true 

				case __FL_DND_DRAG()
					dndFlag = true 

				case __FL_DND_LEAVE()
					dndFlag = true 
					SetBelowMouse(null)
					dndFlag = false 
					return 1

				case __FL_DND_RELEASE()
					widget = BelowMouse

				default
					#__Fl_Fl_handle_(__fltk_current_event,Ptr)
			}
		} 
		#widget.Handle(__fltk_current_event)

	/*

	*/
	block SetBelowMouse(value)
		#__Fl_Fl_belowmouse_1(0) #allow zero

	/*

	*/
	block GetBelowMouse()
		return BelowMouse

	/*

	*/
	block GiveFocus(widget)
		if InstanceOf(widget,"FWidget") {
			widget.TakeFocus()
		else
			Throw(self,"Invalid parameter passed, Expecting (fulltick.base.FWidget), Found (" + ObjectType(widget) + ")")
		}
	
	/*
	
	*/
	private 
		
		/*
		
		*/
		isRunning = false
		
		/*
		
		*/
		scheme = false

		/*

		*/
		dndFlag = false
		
		/*
		
		*/
		block __scheme()
			return __Fl_Fl_scheme_1()

		/*

		*/
		block SendEvent(event,widget,windowPtr)
			dx = 0
			dy = 0
			oldEvent = __Fl_Fl_e_number()

			if !__is_null_pointer(windowPtr,windowPtr[1]) {
				dx = __Fl_Widget_x(windowPtr)
				dy = __Fl_Widget_y(windowPtr)
			}
			w = widget
			while (w.HasParent()) { 
				w = w.Parent 
				if (__Fl_Widget_type(w.Ptr) == __FL_WINDOW() or __Fl_Widget_type(w.Ptr) == __FL_DOUBLE_WINDOW()) {
					@"yes"
					dx -= __Fl_Widget_x(w.Ptr)
					dy -= __Fl_Widget_y(w.Ptr)
				}
			}
			save_x = __Fl_Fl_e_x() __Fl_Fl_e_x_1( (save_x + dx) ) 
			save_y = __Fl_Fl_e_y() __Fl_Fl_e_y_1( (save_y + dy) ) 
			__Fl_Fl_e_number(event)
			ret = widget.Handle(event)
			__Fl_Fl_e_number(oldEvent)
			__Fl_Fl_e_x_1( save_x ) 
			__Fl_Fl_e_y_1( save_y ) 
			return ret


