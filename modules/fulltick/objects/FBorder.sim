
/*

*/
from fulltick.base.FWidget
from fulltick.painting.FColor
from fulltick.drawing.FBoxType
import simple.core
import simple.system
import fulltick.painting

/*

*/
module fulltick.objects

/*
    
*/
class FBorder : Object

    /*

    */
    Color =  null

    /*

    */
    BoxType = null

    /*

    */
    Top = 1

    /*

    */
    Bottom = 1

    /*

    */
    Left = 1

    /*

    */
    Right = 1

    /*

    */
    Component = null

    /*

    */
    block Init(params...)
        paramsLen = LengthOf(params)

        if paramsLen == 0 {
        elif paramsLen == 6
            top = params[0]
            bottom = params[1] 
            left = params[2] 
            right = params[3] 
            boxtype = params[4] 
            color = params[5]
            if IsNumber(top) and IsNumber(bottom) and IsNumber(left) and IsNumber(right) and (IsNumber(boxtype) or InstanceOf(boxtype,"FBoxType")) and (IsNumber(color) or IsString(color) or InstanceOf(color,"FColor")) {
                Top = top
                Bottom = bottom
                Left = left
                Right = right

                if IsNumber(boxtype) {
                    BoxType = new FBoxType(boxtype)
                else
                    BoxType = boxtype
                }

                if IsNumber(color) or IsString(color) {
                    Color = new FColor(color)
                else
                    Color = color
                }
            else
                Throw(self,"Invalid parameters. Expecting (Number,Number,Number,Number,Number|fulltick.drwaing.FBoxType,Number|String|fulltick.painting.FColor), Found (" + ObjectType(top) + "," + ObjectType(bottom) + "," + ObjectType(left) + "," + ObjectType(right) + "," + ObjectType(boxtype) + "," + ObjectType(color) + ")")
            }
        else
            Throw(self,"Calling block with invalid lenght of parameter")
        }

    /*

    */
    block SetColor(value)
        if IsObject(value) {
            if __instance_of(value,"FColor") {
                Color = value
            }
        elif IsNumber(value) or IsString(value) 
            __value = value
            Color = new FColor(__value) 
        else
            Throw(self,"Invalid parameter. Expecting innstance of 'Fcolor', 'Color', 'number' or 'string' as FBorder Color value. Found (" + ObjectType(value) + ")")
        }
        if !IsNull(Component) {
            __Fl_Widget_color_1(Component.Ptr,Color.ColorAsNumber())
        }
        

    /*

    */
    block GetColor()
        if IsNull(Color) {
            Color = new FColor(0)
        }
        return Color

    /*

    */
    block SetBoxType(value)
        if IsNumber(value) or InstanceOf(value,"FBoxType") {
            if IsNumber(value) {
                BoxType = new FBoxType(value)
            else
                if !IsNull(value.BoxColor) {
                    Color = value.BoxColor
                }
                BoxType = value
            }
        else
            Throw(self,"Invalid parameter. Expecting (Number|simple.drawing.FBoxType), Found (" + ObjectType(value) + ")")
        }
        if !IsNull(Component) {
            __Fl_Widget_box_1(Component.Ptr,BoxType.BoxType)
        }        

    /*

    */
    block GetBoxType()
        if IsNull(BoxType) {
            BoxType = new FBoxType(__FL_FLAT_BOX())
        }
        return BoxType

    /*

    */
    block SetTop(top)
        Top = top 
        if !IsNull(Component) {
            if Component.HasOnlyChild() { 
                Component.__resize(Component.X,Component.OnlyChild.Y-Top,Component.Width,(Component.OnlyChild.Height+((Bottom)+Top)))
                Component.OnlyChild.__resize(Component.OnlyChild.X,Component.OnlyChild.Y,Component.OnlyChild.Width,Component.OnlyChild.Height)
            }
        }

    /*

    */
    block GetTop()
        return Top

    /*

    */
    block SetBottom(bottom)
        Bottom = bottom
        if !IsNull(Component) { #just set top
            if Component.HasOnlyChild() {
                Component.__resize(Component.X,Component.OnlyChild.Y-Top,Component.Width,(Component.OnlyChild.Height+((Bottom)+Top)))
                Component.OnlyChild.__resize(Component.OnlyChild.X,Component.OnlyChild.Y,Component.OnlyChild.Width,Component.OnlyChild.Height)
            }
        }

    /*

    */
    block GetBottom()
        return Bottom

    /*

    */
    block SetLeft(left)
        Left = left
        if !IsNull(Component) { #just set top
            if Component.HasOnlyChild() {
                Component.__resize(Component.X-Left,Component.OnlyChild.Y-Top,(Component.OnlyChild.Width+(Right*2) + Left),(Component.OnlyChild.Height+((Bottom)+Top)))
                Component.OnlyChild.__resize(Component.OnlyChild.X,Component.OnlyChild.Y,Component.OnlyChild.Width,Component.OnlyChild.Height)
            }
        }

    /*

    */
    block GetLeft()
        return Left

    /*

    */
    block SetRight(right)
        Right = right
        if !IsNull(Component) { #just set top
            if Component.HasOnlyChild() {
                Component.__resize(Component.X-Left,Component.OnlyChild.Y-Top,(Component.OnlyChild.Width+(Right*2) + Left),(Component.OnlyChild.Height+((Bottom)+Top)))
                Component.OnlyChild.__resize(Component.OnlyChild.X,Component.OnlyChild.Y,Component.OnlyChild.Width,Component.OnlyChild.Height)
            }
        }

    /*

    */
    block GetRight()
        return Right

    /*
        #internal use only
    */
    block SetComponent(comp) 
        if InstanceOf(comp,"FGroup") {
            Component = comp
        else
            Throw(self,"Setting Component with invalid parameter , Expecting (fulltick.widget.FGroup), Found (" + ObjectType(comp) + ")")
        }

    /*

    */
    private 

        /*

        */
        block GetComponent()

/*
    TODO : add ToFGroup() to convert to FGroup widget
*/