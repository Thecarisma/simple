
/*

*/
from simple.security.Hash
from simple.core.Object
from simple.system.Color
from simple.graphics.Point
from fulltick.base.loaddyfulltick
from fulltick.painting.FColor
from fulltick.objects.FBorder
from fulltick.objects.FCursor
from fulltick.drawing.FAlignment
from fulltick.drawing.FBoxType

/*

*/
module fulltick.base

/*

*/
class FWidget : Object

    /*

    */
    Width = FApp.Scheme.GetShemeValue("Width") 

    /*

    */
    Height = FApp.Scheme.GetShemeValue("Height") 

    /*

    */
    X = FApp.Scheme.GetShemeValue("X") 

    /*

    */
    Y = FApp.Scheme.GetShemeValue("Y") 

    /*

    */
    Label = FApp.Scheme.GetShemeValue("Label") 

    /*

    */
    CapitalizeLabel = FApp.Scheme.GetShemeValue("CapitalizeLabel") 

    /*

    */
    Active = FApp.Scheme.GetShemeValue("Active") 

    /*

    */
    LabelAlignment = FApp.Scheme.GetShemeValue("LabelAlignment") 

    /*

    */
    Box = FApp.Scheme.GetShemeValue("Box") 

    /*

    */
    Border = FApp.Scheme.GetShemeValue("Border") 

    /*

    */
    HasBorder = FApp.Scheme.GetShemeValue("HasBorder") 

    /*

    */
    KeyboardFocusable = FApp.Scheme.GetShemeValue("KeyboardFocusable") 

    /*

    */
    ActionBarSize = FApp.Scheme.GetShemeValue("FWindow.ActionBarSize")

    /*

    */
    BorderColor = null

    /*

    */
    BorderBoxType = null

    /*

    */
    BorderTop = null

    /*

    */
    BorderBottom = null

    /*

    */
    BorderLeft = null

    /*

    */
    BorderRight = null

    /*

    */
    Argument = null

    /*

    */
    Parent = null

    /*

    */
    Name = __class_name(self)

    /*

    */
    __Name = __class_name(self)

    /*

    */
    Ptr = null

    /*

    */
    PtrAddress = ""

    /*

    */
    PtrIndex = null

    /*

    */
    CallbackEvent = null

    /*

    */
    Resizable = false

    /*

    */
    Background = FApp.Scheme.GetShemeValue("Background")

    /*

    */
    AcceptInput = FApp.Scheme.GetShemeValue("AcceptInput") 

    /*

    */
    Visible = FApp.Scheme.GetShemeValue("Visible") 

    /*

    */
    Tooltip = FApp.Scheme.GetShemeValue("Tooltip") 

    /*

    */
    LabelColor = FApp.Scheme.GetShemeValue("LabelColor") 

    /*

    */
    LabelFont = FApp.Scheme.GetShemeValue("LabelFont") 

    /*

    */
    LabelSize = FApp.Scheme.GetShemeValue("LabelSize") 

    /*

    */
    LabelType = FApp.Scheme.GetShemeValue("LabelType")

    /*

    */
    SelectionColor = FApp.Scheme.GetShemeValue("SelectionColor")

    /*

    */
    Position = null

    /*

    */
    Size = null

    /*

    */
    Id = 0

    /*

    */
    PendingOps = [

    ]

    /*

    */
    block Init()
        Throw(self,"This a a Base class, you cannot instantiate this class.")

    /*

    */
    block SetActive(value)
        if IsNumber(value) and (value == true or value == false) {
            Active = value
            if value == true {
                __Fl_Widget_activate(Ptr)
            else
                __Fl_Widget_deactivate(Ptr)
            }
            
        else
            Throw(self,"Invalid parameter, Expecting (Number). Found (" + ObjectType(value) + ")")
        }

    /*

    */
    block GetActive()
        return Active

    /*

    */
    block Activate()
        __Fl_Widget_activate(Ptr)
        Active = true

    /*

    */
    block Deactivate()
        __Fl_Widget_deactivate(Ptr)
        Active = false

    /*

    */
    block IsGroupActive()
        return __Fl_Widget_active_r(Ptr)

    /*

    */
    block SetLabelAlignment(value)
        if IsNumber(value) {
            __Fl_Widget_align_1(Ptr,value)
            LabelAlignment = new FAlignment(LabelAlignment)
            Redraw()
        elif IsObject(value) and InstanceOf(value,"FAlignment")
            __Fl_Widget_align_1(Ptr,value.Alignment)
            LabelAlignment = value
            Redraw()
        else
            Throw(self,"Invalid parameter, Expecting (Number|FAlignment). Found (" + ObjectType(value) + ")")
        }

    /*

    */
    block GetLabelAlignment()
        return LabelAlignment

    /*

    */
    block SetCapitalizeLabel(value)
        if IsBoolean(value) {
            CapitalizeLabel = value
        else
            Throw(self,"Invalid parameter, Expecting (Number). Found (" + ObjectType(value) + ")")
        }

    /*

    */
    block GetCapitalizeLabel()
        return CapitalizeLabel

    /*

    */#draw parent when ref copy enables
    block Redraw() 
        __Fl_Widget_redraw(Ptr)

    /*

    */
    block SetArgument(object value)
        Argument = value

    /*

    */
    block GetArgument()
        return Argument

    /*

    */
    block SetBox(value)
		if HasBorder() {
			BorderBox.SetBox(value)
		}
        if IsNumber(value) or InstanceOf(value,"FBoxType") {
            if IsNumber(value) {
                __Fl_Widget_box_1(Ptr,value)
                Box = new FBoxType(value)
				if value == __FL_NO_BOX() {
					SetBorder(null)
				}
            else
                __Fl_Widget_box_1(Ptr,value.BoxType)
                if !IsNull(value.BoxColor) {
                    SetBackground(value.BoxColor)
                }
                Box = value
            }
        else
            Throw(self,"invalid parameter. Expecting (Number|simple.drawing.FBoxType), Found (" + ObjectType(value) + ")")
        }

    /*

    */
    block GetBox()  
        return Box
        
    /*

    */
    block Resize(params...) 
        paramsLen = LengthOf(params)

        if paramsLen == 1 {
            object = params[0]
            if InstanceOf(object,"Rectangle") {
                x = object.X
                y = object.Y
                width = object.Width
                height = object.Height
            else
                Throw(self, "invalid parameter Expecting (simple.graphics.Rectangle) for resizing FGroup. Found (" + ObjectType(object) + ")")
            }
        elif paramsLen == 2
            point = params[0]
            dimension = params[1]
            if InstanceOf(point,"Point") and InstanceOf(dimension,"Dimension") {
                x = point.X
                y = point.Y
                width = dimension.Width
                height = dimension.Height
            else
                Throw(self, "invalid parameter Expecting (simple.graphics.Point,simple.graphics.Dimension) for resizing FGroup. Found (" + ObjectType(point) + ", " + ObjectType(dimension) + ")")
            }
        elif paramsLen == 4
            x = params[0]
            y = params[1]
            width = params[2]
            height = params[3]
            if !IsNumber(x) or !IsNumber(y) or !IsNumber(width) or !IsNumber(height) {
                Throw(self, "invalid parameter Expecting (Number, Number, Number, Number). Found (" + ObjectType(x) + ", " + ObjectType(y) + ", " + ObjectType(width) + ", " + ObjectType(height) + ")")
            }
        else
            Throw(self,"Changing FGroup size with invalid length of parameters")
            return
        }
        
        if HasBorder() {
            BorderBox.Resize(x,y,width+(Border.Right+Border.Left),height+(Border.Bottom+Border.Top))
            __Fl_Widget_resize(Ptr,x+Border.Left,y+Border.Top,width,height)
        else
            __Fl_Widget_resize(Ptr,x,y,width,height)
        }
        
        X = x
        Y = y
        Width = width
        Height = height
        if !IsNull(Position) { 
            Position.SetX(X) 
            Position.SetY(Y)
        }
        if !IsNull(Size) { 
            Size.SetWidth(Width) 
            Size.SetHeight(Height)
        }

        RedrawParent()

    /*
        Internal use only. Call @Block Resize(...)
    */
    block __resize(x,y,width,height)
        __Fl_Widget_resize(Ptr,x,y,width,height)

    /*

    */
    block SetBackground(value)
        if IsObject(value) {
            if __instance_of(value,"FColor") {
                __Fl_Widget_color_1(Ptr,value.ColorAsNumber())
            }
        elif IsNumber(value) or IsString(value) 
            __value = value
            value = new FColor(__value) 
            __Fl_Widget_color_1(Ptr,value.ColorAsNumber())
        else
            Throw(self,"invalid parameter. Expecting innstance of 'Fcolor', 'Color', 'number' or 'string' as FWidget Background value")
        }
        Background = value

    /*

    */
    block GetBackground(value)
        return Background

    /*

    */
    block Hide()
        if HasBorder() {
            __Fl_Widget_hide(BorderBox.Ptr)
        else
            __Fl_Widget_hide(Ptr)
        }
        RedrawParent()

    /*

    */
    block Show()
        if HasBorder() {
            __Fl_Widget_show(BorderBox.Ptr)
        else
            __Fl_Widget_show(Ptr)
        }
        RedrawParent()

    /*

    */
    block SetResizable(condition)  
        if HasParent() {
            if condition == true {
                Resizable = true
                Parent.SetResizable(self)
            else
                Resizable = false
                Parent.SetResizable(false)
            } 
        else
            if condition == true {
                PendingOps["resizable"] = "true"
            else
                PendingOps["resizable"] = "false"
            }
			__fltk_created_widgets[PtrIndex] = self
        }

    /*

    */
    block WidgetName()
        return Name

    /*

    */
    block GetName()
        return Name

    /*

    */
    block SetParent(parentWidget) 
        if IsObject(parentWidget) and __instance_of(parentWidget,"FGroup") {
            parentWidget.ValidatePointer()
            Parent = parentWidget 
        else
            Throw(self,"invalid parameter Expecting an instance of FGroup")
        }

    /*

    */
    block GetParent()
        if IsNull(Parent) {
            return new FWidget
        }
        return Parent

    block RemoveParent(parentWidget)
        if IsObject(parentWidget) and __instance_of(parentWidget,"FGroup") {
            parentWidget.ValidatePointer()
            if Parent.Equals(parentWidget) {
                Parent = null
            else
                Throw(self,"Only the widget parent can remove the widget from the group")
            } 
        else
            Throw(self,"invalid parameter Expecting an instance of FGroup")
        }

    /*

    */
    block HasParent()
        return !IsNull(Parent)

    /*

    */
    block ResolvePendingOps()
        if !IsNull(PendingOps["resizable"]) and PendingOps["resizable"] == "true" {
			Resizable = true
			if HasBorder() {
				BorderBox.SetResizable(self)
			}
			Parent.SetResizable(self)
		}
		if !IsNull(PendingOps["resizable"]) and PendingOps["resizable"] == "false" {
			Resizable = false
			Parent.SetResizable(true)
		}
		if !IsNull(PendingOps["centeronparent"]) and PendingOps["centeronparent"] == "true" {
			if InstanceOf(self,"FGroup") {
				CenterOnParent()
			}
		}
        pendingOps = [

        ]

    /*

    */
    block SetPendingOps(value) 
        Throw(self,"You cannot modify the PendingOps object")

    /*

    */
    block GetPendingsOps() 
        Throw(self,"You cannot modify the PendingOps object")

    /*

    */
    block IsPointerValid() 
        return !IsString(Ptr) and !IsNull(Ptr)

	/*

	*/
	block Equals(object)
		if !IsObject(object) or !__instance_of(object,"FWidget") {
			return false
		}
		return (Uniquecode() == object.Uniquecode())

    /*
        To be deprecated soon for better click listeners
    */
    block CallbackOnClick(blockstr)
        if IsString(blockstr) {
            __Fl_Widget_callback_on_onlick(Ptr,blockstr)
        else
            Throw(self,"invalid parameter Invalid parameter only executable simple string allowed")
        }

    /*

    */
    block SetCallbackListener(/*FCallbackEvent|pointer*/ listener)
		if IsNull(CallbackEvent) {
			__Fl_Widget_callback_on_onlick(Ptr,PtrIndex)
		}
		if !IsObject(listener) {
			IsEvent = false
		}
        CallbackEvent = listener
		__fltk_created_widgets[PtrIndex] = self

    /*

    */
    block SetCallbackEvent(listener)
        SetCallbackListener(listener)

    /*

    */
    block GetCallbackListener() 
        return CallbackEvent

    /*

    */
    block GetCallbackEvent() 
        return CallbackEvent

    /*

    */
    block Handle(event) @"enter event"
        return 0

    /*

    */
    block ValidatePointer()
        if !IsPointerValid() {
            Throw(self,"The Widget has not been initialized. Use the Constructor for initializing the widget")
        }

    /*

    */
    block GetHasBorder()
        return HasBorder

    /*

    */
    block SetHasBorder(value)
        if IsBoolean(value) {
            HasBorder = value
            if value {
                SetBorder(Border)
            else
                BorderBox = null
            }
        else
            Throw(self,"Invalid parameter, Expecting (Number|simple.core.Boolean). Found (" + ObjectType(value) + ")")
        }

    /*

    */
    block SetBorder(border) #HasBorder = false Border = null return  
        if IsNull(border) {
            BorderBox = null 
            HasBorder = false
        elif InstanceOf(border,"FBorder")
            if HasBorder {
                if IsNull(BorderBox) {
                    BorderBox = new FGroup(X-border.Left, Y-border.Top, (Width+(border.Right*2)), (Height+((border.Bottom)+border.Top)))
                    __Fl_Group_add_resizable(BorderBox.Ptr,Ptr)
                    BorderBox.SetOnlyChild(self)
                    BorderBox.Resizable = false
                    #prevent it from resizing when parent expanded if touch edge
                else
                    Border.Top = border.Top
                    Border.Bottom = border.Bottom
                    Border.Right = border.Right
                    Border.Left = border.Left - 1
                }
                BorderBox.Box = border.BoxType 
                BorderBox.SetBackground(border.Color) 
                Border = border
                Border.SetComponent(BorderBox) 
            }
        else
            Throw(self,"Invalid parameter, Expecting (fulltick.objects.FBorder). Found (" + ObjectType(border) + ")")
        }

    /*

    */
    block SetBorderColor(color) 
        if !IsNull(Border) {
            Border.SetColor(color)
        else
            Throw(self,"This widget does not have a border. Set the Border by calling SetBorder(fulltick.objects.FBorder)")
        }

    /*

    */
    block GetBorderColor()
        if IsNull(Border) {
           return new FColor(0) 
        }
        return Border.Color

    /*

    */
    block SetBorderBoxType(type) 
        if !IsNull(Border) {
            Border.SetBoxType(type)
        else
            Throw(self,"This widget does not have a border. Set the Border by calling SetBorder(fulltick.objects.FBorder)")
        }

    /*

    */
    block GetBorderBoxType()
        if IsNull(Border) {
           return new FBoxType(__FL_FLAT_BOX()) 
        }
        return Border.BoxType

    /*

    */
    block SetBorderTop(top) 
        if !IsNull(Border) {
            Border.SetTop(top)
        else
            Throw(self,"This widget does not have a border. Set the Border by calling SetBorder(fulltick.objects.FBorder)")
        }

    /*

    */
    block GetBorderTop()
        if IsNull(Border) {
           return 0 
        }
        return Border.Top

    /*

    */
    block SetBorderBottom(bottom) 
        if !IsNull(Border) {
            Border.SetBottom(bottom)
        else
            Throw(self,"This widget does not have a border. Set the Border by calling SetBorder(fulltick.objects.FBorder)")
        }

    /*

    */
    block GetBorderBottom()
        if IsNull(Border) {
           return 0 
        }
        return Border.Bottom

    /*

    */
    block SetBorderLeft(left) 
        if !IsNull(Border) {
            Border.SetLeft(left)
        else
            Throw(self,"This widget does not have a border. Set the Border by calling SetBorder(fulltick.objects.FBorder)")
        }

    /*

    */
    block GetBorderLeft()
        if IsNull(Border) {
           return 0 
        }
        return Border.Left

    /*

    */
    block SetBorderRight(right) 
        if !IsNull(Border) {
            Border.SetRight(right)
        else
            Throw(self,"This widget does not have a border. Set the Border by calling SetBorder(fulltick.objects.FBorder)")
        }

    /*

    */
    block GetBorderRight()
        if IsNull(Border) {
           return 0 
        }
        return Border.Right

    /*

    */
    block HasBorder()
        return !IsNull(BorderBox)

    /*

    */
    block GetBorderBox()
        return BorderBox

    /*

    */
    block ClearActive()
        __Fl_Widget_clear_active(Ptr)
        Active = false

    /*

    */
    block ClearChanged()
        __Fl_Widget_clear_changed(Ptr)

    /*

    */
    block MarkAsUnChanged()
        __Fl_Widget_clear_changed(Ptr)

    /*

    */
    block ClearDamage(params...)
        paramsLen = LengthOf(params)
        flag = 1 

        if paramsLen == 0 {
        elif paramsLen == 1
            flag = NumberValue(params[0])
            if !IsBoolean(flag) {
                Throw(self, "Invalid parameter passed, Expecting (Boolean), Found (" + ObjectType(flag) + ")")
            }
        else
            Throw(self, "Calling block with extra parameters expecting one or no parameter")
        }
        __Fl_Widget_clear_damage(Ptr,flag)

    /*

    */
    block ClearOutput()
        __Fl_Widget_clear_output(Ptr)

    /*

    */
    block SetAcceptInput(value)
        value = BooleanValue(value)
        if value == true {
            __Fl_Widget_clear_output(Ptr)
        elif value == false 
            #pending
        else
            Throw(self,"seriously")
        }
        AcceptInput = value

    /*

    */
    block GetAcceptInput()
        return AcceptInput

    /*

    */
    block ClearVisible()
        if HasBorder() {
            __Fl_Widget_clear_visible(BorderBox.Ptr)
        else
            __Fl_Widget_clear_visible(Ptr)
        }
        RedrawParent()

    /*

    */
    block SetVisible(value)
        value = BooleanValue(value)
        if value && !Visible {
            Show()
        elif !value && Visible
            Hide()
        }
        Visible = value

    /*

    */
    block GetVisible()
        return Visible

    /*

    */
    block IsVisible()
        return (Visible == true)

    /*

    */
    block ClearVisibleFocus()
        __Fl_Widget_clear_visible_focus(Ptr)
        KeyboardFocusable = false

    /*

    */
    block SetVisibleFocus()
        __Fl_Widget_set_visible_focus(Ptr)
        KeyboardFocusable = true

    /*

    */
    block SetKeyboardFocusable(value) 
        value = BooleanValue(value) 
        if value && !KeyboardFocusable {
            SetVisibleFocus()
        elif !value && KeyboardFocusable
            ClearVisibleFocus()
        }
        

    /*

    */
    block GetKeyboardFocusable()
        return KeyboardFocusable

    /*

    */
    block Contains(widget)
        if InstanceOf(widget,"FWidget") {
            return __Fl_Widget_contains(Ptr,widget.Ptr)
        else
            Throw(self,"Invalid parameter, Expecting (fulltick.base.FWidge), Found (" + widget + ")")
        }

    /*

    */
    block SetLabel(value)
        value = StringValue(value)
        __Fl_Widget_copy_label(Ptr, value)
        Label = value
        RedrawParent()

    /*

    */
    block GetLabel()
        return Label

    /*

    */
    block SetTooltip(value)
        value = StringValue(value)
        __Fl_Widget_copy_tooltip(Ptr, value)
        Tooltip = value

    /*

    */
    block GetTooltip()
        return Tooltip

    /*

    */
    block RedrawParent()
        if HasBorder() {
            BorderBox.RedrawParent()
        else
            parentPtr = __Fl_Widget_parent(Ptr)
            if !__is_null_pointer(parentPtr,parentPtr[1]) {
                __Fl_Widget_redraw(parentPtr) 
            }
        } 

    /*

    */
    block DoCallback()
        if !IsNull(CallbackEvent) {
			if IsEvent {
				CallbackEvent.Callback(self)
			else
				call CallbackEvent(self, Argument)
			}
        }

    /*

    */
    block Draw()
        __Fl_Widget_draw(Ptr)   

    /*

    */
    block DrawLabel(x, y, width, height, alignment)
        x = NumberValue(x)
        y = NumberValue(y)
        width = NumberValue(width)
        height = NumberValue(height)
        _alignment = LabelAlignment
        if !IsNull(alignment) 
            if InstanceOf(alignment,"FAlignment") {
                _alignment = alignment
            else 
                Throw(self,"Invalid parameter passed, Expectiog (Number,Number,Number,Null|FAlignment), Found (" + ObjectType(x) + "," + ObjectType(y) + "," + ObjectType(width) + "," + ObjectType(height) + "," + ObjectType(alignment) + ")")
            }
        }
        __Fl_Widget_draw_label(Ptr,x,y,width,height,_alignment.Alignment)
        Redraw()

    /*

    */
    block SetHeight(value)
        value = NumberValue(value)
        Resize(X,Y,Width,value)
        RedrawParent()
        Height = value
        
    /*

    */
    block GetHeight()
        return Height     

    /*

    */
    block SetWidth(value)
        value = NumberValue(value)
        Resize(X,Y,value,Height)
        RedrawParent()
        Width = value
        
    /*

    */
    block GetWidth()
        return Width  

    /*

    */
    block SetX(value)
        value = NumberValue(value)
        Resize(value,Y,Width,Height)
        RedrawParent()
        X = value
        
    /*

    */
    block GetX()
        return X    

    /*

    */
    block SetY(value)
        value = NumberValue(value)
        Resize(X,value,Width,Height)
        RedrawParent()
        Y = value
        
    /*

    */
    block GetY()
        return Y  

    /*

    */
    block SetLabelColor(value)
        if IsObject(value) {
            if __instance_of(value,"FColor") {
                __Fl_Widget_labelcolor_1(Ptr,value.ColorAsNumber())
            }
        elif IsNumber(value) or IsString(value) 
            __Fl_Widget_labelcolor_1(Ptr,value)
            value = new FColor(value) 
        else
            Throw(self,"invalid parameter. Expecting innstance of 'Fcolor', 'Color', 'Number' or 'String' as FWidget Label Color")
        }
        LabelColor = value

    /*

    */
    block GetLabelColor()
        return LabelColor   

    /*

    */
    block SetLabelFont(value)
        if InstanceOf(value,"FFont") { 
            __Fl_Widget_labelfont_1(Ptr,value.FontValue)
        elif IsNumber(value) or InstanceOf(value,"Number")
            __value = NumberValue(value)
            __Fl_Widget_labelfont_1(Ptr,__value)
            value = new FFont(__value) 
        else
            Throw(self,"invalid parameter. Expecting (fulltick.drawing.FFont|simple.system.Font|Number) as FWidget Label Color")
        }
        LabelFont = value

    /*

    */
    block GetLabelFont()
        return LabelFont    

    /*

    */
    block SetLabelSize(value)
        if IsNumber(value) or InstanceOf(value,"Number")
            value = NumberValue(value)
            if value <= 0 {
                Throw(self,"FWidget Label Size cannot be less than 0 ")
                return
            }
            __Fl_Widget_labelsize_1(Ptr,value)
        else
            Throw(self,"invalid parameter. Expecting (Number) as FWidget Label Size")
        }
        LabelSize = value
        RedrawParent()

    /*

    */
    block GetLabelSize()
        return LabelSize   

    /*

    */
    block SetLabelType(value)
        if InstanceOf(value,"FLabelType") { 
            __Fl_Widget_labeltype_1(Ptr,4)
        elif IsNumber(value) or InstanceOf(value,"Number")
            __value = NumberValue(value)
            __Fl_Widget_labeltype_1(Ptr,__value)
            value = new FLabelType(__value) 
        else
            Throw(self,"invalid parameter. Expecting (fulltick.drawing.FLabelType|Number) as FWidget Label Type")
        }
        LabelType = value

    /*

    */
    block GetLabelType()
        return LabelType

    /*

    */
    block MeasureLabel()
        __Fl_Widget_measure_label(Ptr,0,0)

    /*

    */
    block SetPosition(params...)
        paramsLen = LengthOf(params)

        x = null
        y = null
        if paramsLen == 1 { 
            point = params[0]
            if InstanceOf(point,"Point") {
                x = point.X 
                y = point.Y
            else
                Throw(self, "invalid parameter Expecting (simple.graphics.Point). Found (" + ObjectType(point) + ")")
            }
        elif paramsLen == 2
            x = NumberValue(params[0])
            y = NumberValue(params[1])
        else
            Throw(self,"Invalid parameter count ")
            return 
        }

        if HasBorder() {
            BorderBox.SetPosition(x,y)
            __Fl_Widget_position(Ptr,x+Border.Left,y+Border.Top)
        else
            __Fl_Widget_position(Ptr,x,y)
        }
        
        X = x
        Y = y
        if !IsNull(Position) { 
            Position.SetX(X) 
            Position.SetY(Y)
        }
        RedrawParent()

    /*

    */
    block GetPosition()
        if IsNull(Position) {
            Position = new Point(X,Y)
        }
        return Position

    /*

    */
    block RedrawLabel()
        __Fl_Widget_redraw_label(Ptr)

    /*

    */
    block SetSelectionColor(value)
        if IsObject(value) {
            if __instance_of(value,"FColor") {
                __Fl_Widget_selection_color_1(Ptr,value.ColorAsNumber())
            }
        elif IsNumber(value) or IsString(value) 
            __Fl_Widget_selection_color_1(Ptr,value)
            value = new FColor(value) 
        else
            Throw(self,"invalid parameter. Expecting innstance of 'Fcolor', 'Color', 'Number' or 'String' as FWidget Selection Color")
        }
        SelectionColor = value

    /*

    */
    block GetSelectionColor()
        return SelectionColor

    /*

    */
    block SetActiveNoEvent()
        __Fl_Widget_set_active(Ptr)
        Active = true

    /*

    */
    block SetChanged()
        __Fl_Widget_set_changed(Ptr)

    /*

    */
    block SetOutput()
        __Fl_Widget_set_output(Ptr)

    /*

    */
    block SetSize(int params...)
        paramsLen = LengthOf(params)

        width = null
        height = null
        if paramsLen == 1 { 
            dimension = params[0]
            if InstanceOf(dimension,"Dimension") {
                width = dimension.Width 
                height = dimension.Height
            else
                Throw(self, "invalid parameter Expecting (simple.graphics.Dimension). Found (" + ObjectType(dimension) + ")")
            }
        elif paramsLen == 2
            width = NumberValue(params[0])
            height = NumberValue(params[1])
        else
            Throw(self,"Invalid parameter count ")
            return 
        }

        if HasBorder() {
            BorderBox.SetSize(width,height)
            __Fl_Widget_size(Ptr,width-Border.Right,height-Border.Bottom)
        else
            __Fl_Widget_size(Ptr,width,height)
        }
        
        Width = width
        Height = height
        if !IsNull(Size) { 
            Size.SetWidth(Width) 
            Size.SetHeight(Height)
        }
        RedrawParent()

    /*

    */
    block GetSize()
        if IsNull(Size) {
            Size = new Dimension(Width,Height)
        }
        return Size

    /*
    
    */
    block TakeFocus()
        __Fl_Widget_take_focus(Ptr)

    /*

    */
    block TakesEvents()
        ret = __Fl_Widget_takesevents(Ptr)
        return ret

    /*

    */
    block IsGroupVisible()
        ret = __Fl_Widget_visible_r(Ptr)
        return ret
		
	/*
	
	*/
	block Type(int typ)
		ValidatePointer()
		__Fl_Widget_type_1(Ptr, typ)
		
	/*
	
	*/
	#avoid this block
	block Type1()
		ValidatePointer()
		return __Fl_Widget_type(Ptr)

    /*
        Don't shoot yourself in the foot avoid this block and it overrided blocks
    */
    block SetPlatformScheme(schemeName)
        Throw(self,"Trying to set a platform scheme for a widget that does not support it : " + Name)

    /*

    */
    private 

        /*

        */
        BorderBox = null   

        /*

        */
        StoreBorderBox = null 
		
		/*
		
		*/
		IsEvent = true
            
        /*

        */
        block SetPtr(value)
            Ptr = value

        /*

        */
        block ParentPointer()
            ValidatePointer()
            return __Fl_Widget_parent(Ptr)

        /*

        */
        block SetBorderBox(value)

        /*

        */
        block RegisterWidget()
            PtrAddress = __pointer_address_to_string(Ptr,Ptr[1]) 
			__add_to_list(__fltk_created_widgets,self)
			PtrIndex = LengthOf(__fltk_created_widgets) - 1
            Id = PtrIndex

        /*

        */
        block Construct()
            if Name != "FLabel" { SetBackground(Background) }
            SetAcceptInput(AcceptInput)
            SetVisible(Visible)
            SetKeyboardFocusable(KeyboardFocusable)
            SetTooltip(Tooltip)
            SetLabelColor(LabelColor)
            SetLabelFont(LabelFont)
            SetLabelSize(LabelSize)
            SetLabelType(LabelType)
            SetSelectionColor(SelectionColor)
			#SetWidth(Width)
			#SetHeight(Height)

