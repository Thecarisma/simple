/* 
	Copyright (c) 2017-2018 Azeez Adewale <azeezadewale98@gmail.com> 
	MIT License Copyright (c) 2018 simple 

*/

/* 
 * #filename - Directory.sim
 * #author - Azeez Adewale
 * #date - 5 Febuary 2017
 */

from simple.core.Object
from simple.io.Path
from simple.io.File
 
module simple.io

block Mkdir(path)
	return __mk_directory(path, 0777)

class Directory : Path

	/*
	
	*/
	list Contents = null
	
	/*
	
	*/
	list Files = null
	
	/*
	
	*/
	list Directories = null

	#make SetReadOnly() block deal with content recursivelyid parameter, expected Path, String or Directory"

	/*
	
	*/
	block Init(string path)
		AbsolutePath = path
		UpdateAttributes()
	
	/*
	
	*/
	block GetDirectory()
		if IsNull(Directory) {
			SetDirectory(null)
		}
		return Directory
		
	/*
		Create a directory if it does not exist, even if the parent directory is does not exist
		also it will be created too along with the directory
		@return the directory creation value which is true if successfull and false if it is not 
		successfull @DataType boolean
	*/	
	block Create()
		if !Exists() {
			CreateParent()
			if Exists() { return true }
		else
			Throw(self,"Cannot create " + Classname() + " because it already exists : " + AbsolutePath)
			return false
		}
		return false
		
	/*
	
	*/
	block Delete()
		EnsureExistence()
		return __file_delete_folder(AbsolutePath)
		
	/*
	
	*/
	block DeleteRecursive()
		folders = GetDirectories()
		for folder in folders {
			if !folder.DeleteRecursive() {
				Throw(self, "The Directory cannot be deleted : " + folder.AbsolutePath)
				return false
			}
		}
		files = GetFiles()
		for file in files {
			if !file.Delete() {
				Throw(self, "The File cannot be deleted : " + file.AbsolutePath)
				return false
			}
		}
		return Delete()
		
	/*

	*/
	block GetContents()
		EnsureExistence()
		con = __blow_directory(AbsolutePath)
		return con
		
	/*
	
	*/
	block GetFiles()
		EnsureExistence()
		fileList = []
		contents = GetContents()
		for content in contents {
			if content[1] == 0 {
				file = new File(AbsolutePath + SystemSlash + content[0])
				__add_to_list(fileList, file)
			}
		}
		return fileList
		
	/*
	
	*/
	block GetDirectories()
		EnsureExistence()
		folderList = []
		contents = GetContents()
		for content in contents {
			if content[1] == 1 {
				file = new Directory(AbsolutePath + SystemSlash + content[0])
				__add_to_list(folderList, file)
			}
		}
		return folderList
	
	/*
	
	*/
	private
		
		/*
			The existence of the parent folder of the directory is verified, if it does not exist
			it will be created. This block should not be called outside this class the @Block Create()
			should be use in creating directory as it is a safe implementation and it also uses this 
			block to verify the parent Directory existence
		*/
		#HINT : Check the archive.zip.ZipEntry for a better folder creation block
		block CreateParent() 
			tempDir = AbsolutePath
			slashLen = LengthOf(SystemSlash)
			ChildrenToCreate = []
			if StrEndsWith(AbsolutePath,SystemSlash) { 
				len = LengthOf(AbsolutePath) - 1
				tempDir = __left(AbsolutePath, len - slashLen)
			}
			__add_to_list(ChildrenToCreate, tempDir)
			len = LengthOf(tempDir)
			loc = LengthOf(LastStrAfterChar(tempDir, SystemSlash))
			tempDir = __left(tempDir, len - loc - slashLen - 1)
			while __dir_exists(tempDir) != 1 {
				__add_to_list(ChildrenToCreate, tempDir)
				len = LengthOf(tempDir)
				loc = LengthOf(LastStrAfterChar(tempDir, SystemSlash))
				tempDir = __left(tempDir, len - loc - slashLen - 1)
			}
			CTCLen = LengthOf(ChildrenToCreate) - 1
			for a = CTCLen to 0 step -1 {
				if !__mk_directory(ChildrenToCreate[a], 0755) {
					Throw(self, "Cannot create the parent Directory : " + ChildrenToCreate[a])
				}
			}
		
		/*
		
		*/
		block UpdateAttributes()
			SetAbsolutePath(null)
			if !StrEndsWith(AbsolutePath,SystemSlash) {
				AbsolutePath += SystemSlash
			}
			SetName(null)
			PathType = new PathType(AbsolutePath)
		
		/*
		
		*/
		block SetContents()
		
		/*
		
		*/
		block SetFiles()
		
		/*
		
		*/
		block SetDirectories()
		