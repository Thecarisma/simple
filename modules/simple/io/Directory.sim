/* 
	Copyright (c) 2017-2018 Azeez Adewale <azeezadewale98@gmail.com> 
	MIT License Copyright (c) 2018 simple 

*/

/* 
 * #filename - Directory.sim
 * #author - Azeez Adewale
 * #date - 5 Febuary 2017
 */

from simple.core.Object
from simple.io.Path
from simple.io.File
 
module simple.io

block mkdir(path)
	return __mk_directory(path, 0777)

class Directory : Path

	/*
	
	*/
	list Contents = null
	
	/*
	
	*/
	list Files = null
	
	/*
	
	*/
	list Directories = null

	#make setReadOnly() block deal with content recursivelyid parameter, expected Path, String or Directory"

	/*
	
	*/
	block init(string path)
		AbsolutePath = path
		updateAttributes()
	
	/*
	
	*/
	block getDirectory()
		if isNull(Directory) {
			setDirectory(null)
		}
		return Directory
		
	/*
		Create a directory if it does not exist, even if the parent directory is does not exist
		also it will be created too along with the directory
		@Return the directory creation value which is true if successfull and false if it is not 
		successfull @DataType boolean
	*/	
	block create()
		if !exists() {
			createParent()
			if exists() { return true }
		else
			throw(self,"Cannot create " + classname() + " because it already exists : " + AbsolutePath)
			return false
		}
		return false
		
	/*
	
	*/
	block delete()
		ensureExistence()
		return __file_delete_folder(AbsolutePath)
		
	/*
	
	*/
	block deleteRecursive()
		folders = getDirectories()
		for folder in folders {
			if !folder.deleteRecursive() {
				throw(self, "The Directory cannot be deleted : " + folder.AbsolutePath)
				return false
			}
		}
		files = getFiles()
		for file in files {
			if !file.delete() {
				throw(self, "The File cannot be deleted : " + file.AbsolutePath)
				return false
			}
		}
		return delete()
		
	/*

	*/
	block getContents()
		ensureExistence()
		con = __blow_directory(AbsolutePath)
		return con
		
	/*
	
	*/
	block getFiles()
		ensureExistence()
		fileList = []
		contents = getContents()
		for content in contents {
			if content[1] == 0 {
				file = new File(AbsolutePath + SystemSlash + content[0])
				__add_to_list(fileList, file)
			}
		}
		return fileList
		
	/*
	
	*/
	block getDirectories()
		ensureExistence()
		folderList = []
		contents = getContents()
		for content in contents {
			if content[1] == 1 {
				file = new Directory(AbsolutePath + SystemSlash + content[0])
				__add_to_list(folderList, file)
			}
		}
		return folderList
	
	/*
	
	*/
	private
		
		/*
			The existence of the parent folder of the directory is verified, if it does not exist
			it will be created. This block should not be called outside this class the @Block create()
			should be use in creating directory as it is a safe implementation and it also uses this 
			block to verify the parent Directory existence
		*/
		#HINT : Check the archive.zip.ZipEntry for a better folder creation block
		block createParent() 
			tempDir = AbsolutePath
			slashLen = lengthOf(SystemSlash)
			ChildrenToCreate = []
			if strEndsWith(AbsolutePath,SystemSlash) { 
				len = lengthOf(AbsolutePath) - 1
				tempDir = __left(AbsolutePath, len - slashLen)
			}
			__add_to_list(ChildrenToCreate, tempDir)
			len = lengthOf(tempDir)
			loc = lengthOf(lastStrAfterChar(tempDir, SystemSlash))
			tempDir = __left(tempDir, len - loc - slashLen - 1)
			while __dir_exists(tempDir) != 1 {
				__add_to_list(ChildrenToCreate, tempDir)
				len = lengthOf(tempDir)
				loc = lengthOf(lastStrAfterChar(tempDir, SystemSlash))
				tempDir = __left(tempDir, len - loc - slashLen - 1)
			}
			CTCLen = lengthOf(ChildrenToCreate) - 1
			for a = CTCLen to 0 step -1 {
				if !__mk_directory(ChildrenToCreate[a], 0755) {
					throw(self, "Cannot create the parent Directory : " + ChildrenToCreate[a])
				}
			}
		
		/*
		
		*/
		block updateAttributes()
			setAbsolutePath(null)
			if !strEndsWith(AbsolutePath,SystemSlash) {
				AbsolutePath += SystemSlash
			}
			setName(null)
			PathType = new PathType(AbsolutePath)
		
		/*
		
		*/
		block setContents()
		
		/*
		
		*/
		block setFiles()
		
		/*
		
		*/
		block setDirectories()
		