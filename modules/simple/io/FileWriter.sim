/* 
	Copyright (c) 2017-2018 Azeez Adewale <azeezadewale98@gmail.com> 
	MIT License Copyright (c) 2018 simple-lang

*/

/* 
	#filename - FileWriter.sim
	#date - 31 December 2018
	#time - 09 : 17 PM
	#license - MIT License Copyright (c) 2018 simple-lang
	#author - Azeez Adewale	<azeezadewale98@gmail.com> 
 */
 
/*

*/
from simple.core.Object
from simple.reflection.Class
from simple.io.loadfilesavantlib
from simple.io.File
 
/*

*/
module simple.io

/*

*/
class FileWriter : Object

	/*
	
	*/
	final /*pointer */FilePointer /*= null*/

	/*
	
	*/
	final /*boolean */Append /*= null*/
	
	/*
	
	*/
	boolean IsOpen = false

	/*
	
	*/
	block init(object params...)
		paramsLen = lengthOf(params)
		object file = null
		boolean CreateIfNotFound = false
		
		if paramsLen = 1 {
			file = params[0]	
			Append = false			
			if isString(file) or instanceOf(file, "String") {
				file = stringValue(file)
			elif instanceOf(file, "File")
				file = file.AbsolutePath
			elif isPointer(file)
				if file[1] != "SMOOTHC_FILE_SAVANT" {
					throw(self,"Invalid File Pointer, expecting an active file pointer : " + strValueOf(file))
				}
				FilePointer = file
				IsOpen = true
				return self
			else
				throw(self,"Invalid argument, expecting string, File, FileStream, FileWriter")
				return null
			}
		elif paramsLen == 2
			file = params[0]	
			Append = params[1]			
			if isString(file) or instanceOf(file, "String") and isBoolean(Append) {
				file = stringValue(file)
			elif instanceOf(file, "File")
				file = file.AbsolutePath
			else
				throw(self,"Invalid argument, expecting (string|File|FileStream|FileWriter,boolean), found (" + objectType(file) + "," + objectType(Append) + ")")
				return null
			}
		elif paramsLen == 3
			file = params[0]	
			Append = params[1]
			CreateIfNotFound = params[2]			
			if isString(file) or instanceOf(file, "String") and isBoolean(Append) and isBoolean(CreateIfNotFound) {
				file = stringValue(file)
			else
				throw(self,"Invalid argument, expecting (string|File|FileStream|FileWriter,boolean), found (" + objectType(file) + "," + objectType(Append) + ")")
				return null
			}
			
		else
			throw(self,"Calling block with invalid length of parameters !")
			return null
		}
		
		if !__file_exists(file) {
			if !CreateIfNotFound {
				throw(self, "The file does not exist : " + file)
				return null
			}
		}
		if Append {
			FilePointer = __fopen(file, "a")
		else
			FilePointer = __fopen(file, "w+b")
		}		
		if __is_null_pointer(FilePointer, FilePointer[1]) {
			throw(self, "Access Denied. The File is not writable : " + file)
			return self
		}
		IsOpen = true
		
		return self
	
	/*
	
	*/
	block write(string data)
		if !IsOpen {
			throw(self, "The file has been closed ")
			return false
		}
		return __fwrite(data, lengthOf(data), 1, FilePointer)
	
	/*
	
	*/
	block flush()
		if IsOpen {
			__fflush(FilePointer)
		}	
	
	/*
	
	*/
	block close()
		if IsOpen {
			__fclose(FilePointer)
			IsOpen = false
			#__gabbage_collect(FilePointer) #maybe
		}
		
	
	/*
		This block clean up the object to avoid dangling pointers and object. 
		Invoking this block assume there is no more reference to this object 
		
		@See @Block close
		@See @Block flush
	*/
	block done()
		if IsOpen {
			close()
		}
		#ask team if to destroy object here
		
	/*
	
	*/
	private
		
		