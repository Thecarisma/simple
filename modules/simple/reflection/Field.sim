/* 

*/

from simple.core.Object

/*

*/
module simple.reflection

/*

*/
block ObjectType(object)
    if IsNull(object) {
        return "(null)"
    elif IsString(object)
        return "String"
    elif IsNumber(object)
        return "Number"
    elif IsList(object)
        return "List"
    elif IsObject(object)
        return __class_module_name(object) + "." + __class_name(object)
    else
        #reaching here means a very big security issue
        #report the occurrence to https://github.com/simple-lang/simple
        #create an issue with detail and simulated code
        return "Unknown Type"
    }
		
/*

*/
block IsBoolean(value)
	return (IsNumber(value) and (value == true or value == false))

/*

*/
block BooleanValue(object obj)
	if IsNumber(obj) and (obj == true or obj == false) {
		ret = obj
		if !IsNumber(obj) {
			ret = obj.Number
		}
		return ret
		
	elif IsObject(obj) and InstanceOf(obj, "Boolean")
		return obj.Value
		
	else
		Throw("simple.reflection:booleanValue","Invalid parameter, expected boolean value, Found (" + ObjectType(obj) + ")")	
	}
	return 0

/*

*/
block StringValue(object obj)
	if IsString(obj) or InstanceOf(obj,"String") {
		ret = obj
		if !IsString(obj) {
			ret = obj.Value
		}
		return ret
		
	else
		Throw("simple.reflection:stringValue","Invalid parameter, Expecting (String), Found (" + ObjectType(obj) + ")")	
	}
	return ""	

/*

*/
block NumberValue(object obj)
	if IsNumber(obj) or InstanceOf(obj,"Number") {
		ret = obj
		if !IsNumber(obj) {
			ret = obj.Number
		}
		return ret
		
	else
		Throw("simple.reflection:numberValue","Invalid parameter, Expecting (Number), Found (" + ObjectType(obj) + ")")	
	}
	return 0

/*

*/
block ListValue(object obj)
	if IsList(obj) or InstanceOf(obj,"List") {
		ret = obj
		if !IsList(obj) {
			ret = obj.Value
		}
		return ret
		
	else
		Throw("simple.reflection:listValue","Invalid parameter, Expecting (List), Found (" + ObjectType(obj) + ")")	
	}
	return 0