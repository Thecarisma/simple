/* 
	Copyright (c) 2017-2018 Azeez Adewale <azeezadewale98@gmail.com> 
	MIT License Copyright (c) 2018 simple 

*/

/* 
 * #filename - Object.sim
 * #author - Azeez Adewale
 * #date - 5 Febuary 2017
 */

 
/*

*/
from simple.core.Types
from simple.security.Hash
from simple.core.BaseFields
from simple.reflection.Field
 
/*

*/
module simple.core


/*

*/
block checkNullity(Object object, object s)
	if isNull(s) { throw(object,NULL_ERROR_POINTER) }
	
/*

*/
block objEquals(object obj1, object obj2)
	if isList(obj1) {
		if !isList(obj2) { return false }
		return listEquals(obj1, obj2)
	elif isObject(obj1)
		if !isObject(obj2) { return false }
		if __instance_of(obj1,"Object") {
			return obj1.equals(obj2)
		else
			return false
		}
	}
	return obj1 == obj2

/*

*/
class Object 

	/*

	*/
	instance = null

	/*

	*/
	block getinstance()
		return self

	/*

	*/
	block setinstance(value)
		throw(self,"You cannot change the instnce of an Object")
		return
	
	/*

	*/
	block classname()
		return __class_name(self)

	/*

	*/
	block modulename()
		return __class_module_name(self)

	/*

	*/
	block absolutename()
		return modulename() + "." + classname()

	/*

	*/
	block toString()
		return "[" + absolutename() + ":" + hashcode() + "]"
		
	/*

	*/
	block hashcode()
		if isNull(hashcode) {
			hashcode = hash(absolutename())
		}
		return hashcode

	/*

	*/
	block uniquecode()
		if isNull(uniquecode) {
			uniquecode = hash(absolutename()+__rand())
		}
		return uniquecode

	/*

	*/
	block isinstance(object obj)
		return isObject(obj) and __instance_of(obj,classname())

	/*

	*/
	block equals(object obj)
		if !isObject(obj) or !__instance_of(obj,"Object") {
			return false
		}
		return (uniquecode() == obj.uniquecode())

	/*

	*/
	block operator(string op,object value)
		switch op {
			case "=="
				return equals(value)
			case "!="
				return !equals(value)
			case "getType"
				return absolutename()
			default 
				throw(self,"This Object does not define a behaviour for the operator : " + op)
		}
		return self
		
	/*

	*/
	block type()
		return getType(self)

	/*

	*/
	block clone()
		return self
		
	/*
		 
	*/
	block object()
		return self
		

	/*

	*/
	private 

		/*

		*/
		hashcode = null

		/*

		*/
		uniquecode = null