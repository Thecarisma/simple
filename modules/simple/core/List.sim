/* 
	Copyright (c) 2018 Abdulazeez Adeshina Abdulazeez <laisibizness@gmail.com> 
	MIT License Copyright (c) 2018 simple 

*/

/* 
	#Filename - List.sim
	#Author - Abdulazeez Abdulazeez Adeshina
	#Date - 15 June 2018
	#Time - 19:49 PM
	#License - MIT License
 */

from simple.core.Object

module simple.core


/*@Prefix
	This is the module responsible for the operations conducted by a @DataType Number.
	Below, are the functional blocks the List uses i.e the List isn't an object.
	It is recommended that the List, be created as an Object as it is considered safe.
	The example showcasing the functions in actions, can be seen @Examples List. <br /> <br />

	### Usage
	The module is called to get access to the blocks both functional and object based.
	```simple
	from "simple/core/List.sim"
	```
*/

block AddToList(list, value)
    # Check if value to be added to the array is a List, String or number.
    if (IsList(value) || IsString(value) || IsNumber(value))
        list + value
		return list
        else
            display  __err__
end

/* Remove a value from the list using the index number as an ID. */
block RemoveFromList(list, indexNumber)
    # Verify that value passed is a number e.g 0, 1, 2 etc.
    if(IsNumber(indexNumber))
        list[indexNumber] = ""
        return list +crlf
        else
            display __err__
end
/* Reverses the elements in the List and changes the index Number */
block ReverseList(List)
		if (IsList(List))
            x = 0
            list = []
            # This is subject to Fix in the next version of simple.
			listLen = LengthOf(List)
            do { list + List[(listLen - 1) - x] x++ } while x < listLen
            List = list
            return List
end

block IndexOf(List, value) 
	# List = []
	# First test *wink*
	if (IsList(List))
		return List[value]
	end

block Concat(List, arr)
	for a in arr
		List + a
	end
	return List


class List : Object

	/*

	*/
	ListObject			= []

/*
		The list constructor accepting two parameters, @param List, String.

		@DataType LIST
		If list is sent as parameter then the class treat
		the parameter.

		@DataType STRING
		If string is the parameter it is also
		treated as @DataType List. 
		In simple-lang @DataType string is simply a list of char arrays
		e.g 
			@Code
			str = "string"
			#is simply same as
			str = ["s","t","r","i","n","g"]
			@EndCode
		@DataType List
		In a situation whereby the parameter is an instance of @Class List
		all the previous attribute of the current class is disposed and the 
		attribute of the parameter class is transfered into this class. 

		e.g 
			@Code
			li1 = new List(["a","a"])
			li2 = new List(li1)
			li3 = li1
			@EndCode

			#li2 and li3 is simply the same thing but li2 
			#with more function. You can review the source code of @DataType List 
		    https://github.com/simple-lang/simple/blob/master/modules/simple/core/List.sim
		    Any other type of parameter is an Error
*/

    block Init(list) 
		if InstanceOf(list,"List") {
			ListObject = list.ListObject
		elif IsList(list) or IsString(list) 
			ListObject = list
		else
			Throw(self,this.ErrorType(1))
		}
        return self

	/*
		.IndexOf(n) block is a safe block for getting the item in the list
		at n index very similar to using the block quote [n] to get the index
		but with more type check and safe call. 
		@Ignore Awesome for production @End
	*/
	#check to ensure the n index specified is not more than size of list
	#confirm it number only then get index
    block IndexOf(n)
		if n > Length() { Throw(this.ErrorType(3)) }
		if IsNumber(n)
			return ListObject[n]
		else 
			Throw(this.ErrorType(2))
		end
		
	/*
		Get the length or size of the current list object of the class
	*/
	block Length()
		return LengthOf(ListObject)


	/*
		Pushes an element into the exisiting list.
	*/
    block Push(x)
        ListObject + x
        return ListObject

# Still needs some little adjustments and changes.
	/*
		Removes an element from the List using the index Number (x)
	*/
    block Pop(x)
        ListObject[x] = ""
        return ListObject
	/*
		Returns the elements in the List
	*/
    block Keys()
        return ListObject

	/*
		Reverses the elements in the List and changes the index Number . E.g
		@Code
		myList = new List(["banana", "fish", "milk"])
		display myList.Keys()
		// banana, fish, milk
		myList.Reverse() //reverses List
		display myList
		// milk, fish, banana
		@EndCode
	*/
	
    block Reverse()
	/*
 	 * This method returns the array in an inverse manner
	 * e.g from @Bold [a,b,c,d,e] to [e,d,c,b,a] and it also
	 * changes the index number as it inverses the list.
	 */

        x = 0
        reverserArray = []
        do {
            reverserArray + ListObject[(LengthOf(ListObject) - 1) - x] x++
        } while x < LengthOf(ListObject)
        ListObject = reverserArray
        return ListObject
    end

	/* Array slice function. 
	 * Supports 2 parameter alone, 
	 * if you intend to pass an argument alone, 
	 * use the .IndexOf() method.
	 * Still working on it.
	 */ #resolve slicing object
	block Slice(x, y)
		if (IsNumber(x) && IsNumber(y))
			if (x = 0 && y = 0)
				return ListObject
			end
			offset = IndexOf(x + 1) 
			delim = IndexOf(y)
			if GetType(offset) == GetType(delim) 
				if (IndexOf(x + 1) == IndexOf(y))
					return ListObject[x]
				elif (IndexOf(x + 1)  != IndexOf(y))
					do {
						return IndexOf(x++ - 1)
					} while x < IndexOf(y)
				else
					return "[]"
				end
			else
				return "[]"
			end      
		end


    /* Sorts arrays just like the javascript's
	 * .Sort() function. 
	 * It's not working yet. 
	 */
	block Sort(a, b)
    # return b - a
    	return ListObject[b] -ListObject[a]

	/*
	 * This block is intended to be used
	 * just like Javascript's function.
	 * This would be useful in web apps and other apps
	 * reducing the need for for loops in certain cases.
	 */
	block Map(n, index)
	# Nothing for now.

		
	/*
	 * This block is going to be used
	 * to concatenate arrays i.e merge
	 * array values together into the 
	 * concatenator.
	 */

	block Concat(arr)
		# Current work around. It isn't working yet.
		arrLen = LengthOf(arr) - 1
		for a = 0 to arrLen
			ListObject + arr[a]
		end
		return ListObject

  /* Returns the first element of the List */
	
	block First()
	  return ListObject[0]
	end

	/* Returns the last element in the List */

	block Last()
	  return ListObject[LengthOf(ListObject) - 1]
	end
	
	block ToString()
		strValue = "[" 
		lstLen = Length() - 1
		for i = 0 to lstLen { 
			item = ListObject[i] 
			if IsString(item) {
				strValue += '"' + item + '"'
			elif IsNumber(item)
				strValue += item
			elif IsList(item)
				tmpLst = new List(item)
				strValue += tmpLst.ToString()
			elif IsObject(item)
				if IsBlock(item,"toString") {
					strValue += item.ToString() 
				else 
					strValue += __class_module_name(item) + "." __class_name(item)
				}
			}
			if i < lstLen { strValue += ", " }
		}
		strValue += "]"
		return strValue
		
	/*
	
	*/
	block Operator(op, value)
		switch op {
			case "lengthOf" 
				return LengthOf(ListObject)
			case "[]" 
				return ListObject[value]
		}
		return super.Operator(op, value)

	/*
	 * Error block, needs to be private
	 * So it won't be be accessed outside
	 * the class.
	 *
	 */
	 
	private 
	
		/*

		*/
		block ErrorType(type)
			__NOT_LIST_ERROR = "the parameter is not a list"
			__NUMBER_REQUIRED_ERROR = "only number is required as parameter "
			__INDEX_GREATER_THAN_SIZE = "the provided n index is greater than list size"

			switch (type)
				case 1
					return __NOT_LIST_ERROR
				case 2
					return __NUMBER_REQUIRED_ERROR
				case 3
					return __INDEX_GREATER_THAN_SIZE
				default
					return ""
			end
			