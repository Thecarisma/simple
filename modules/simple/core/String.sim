/* 
	Copyright (c) 2017-2018 Azeez Adewale <azeezadewale98@gmail.com> 
	MIT License Copyright (c) 2018 simple 

*/

/* 
 * #filename - String.sim
 * #author - Azeez Adewale
 * #date - 5 Febuary 2017
 */

/*

*/
from simple.core.Object
from simple.core.List
from simple.core.Number
from simple.util.Conversion
from simple.core.DynamicLoader
from simple.debugging.Throw
from simple.reflection.Class
from simple.reflection.Field
from simple.util.Type
CallModule("libstring_savant")
 
/*

*/
module simple.core

		__Empty = Ascii(0) 
		STRING_EMPTY = "The string provided is empty"
		STRING_COMPARE_ERROR = "Array index out of bound : The length of the comparing string is greater than the main string "
		STRING_LESS = "Array index out of bound : The string is empty" 
		BACKSPACE = Ascii(8) 
		END_OF_LINE = Ascii(13)
		LINE_BREAK = Ascii(10)
		
/*

*/
block StrValueOf(object)
	val = ""
				
	if IsNull(object) {
		val = "(null)"
		
	elif IsString(object) 
		val = object #look again
		
	elif IsNumber(object)
		if object == true {
			val = "true"
		elif object == false
			val = "false"
		else
			val = ""+object
		}
		
	elif IsPointer(object)
		val = __pointer_address_to_string(object,object[1])
		
	elif IsList(object)
		_val = new List(object) 
		val = _val.ToString() 
		
	elif IsObject(object) 
		if __object_has_method(object,"toString") {
			val = object.ToString()
		else
			objectValue = [__class_name(object)]
			objectValue + __object_attributes(object)
			objectValue + __object_methods(object)
			objectList = new List(objectValue)
			value = objectList.ToString()
		}	
		
	}
	return val
	
/*

*/
block HexDigit(char next)
	v1 = __char_to_number(next) - __char_to_number('0')
	v2 = __char_to_number(next) - __char_to_number('A') + H('0xA')
	v3 = __char_to_number(next) - __char_to_number('a') + H('0xA')
	if v1 >= 0 and v1 <= 9 {
		return v1
	}
	if v2 >= H('0xA') and v2 <= H('0xF') {
		return v2
	}
	if v3 >= H('0xA') and v3 <= H('0xF') {
		return v3
	}
	Throw("simple.core:hexDigit", "Syntax Error : non-hexadecimal digit '" + next + "' in Unicode escape sequence")
	
/*
	Format the literal value to be printed in the output into the standard C Format with escape sequences. simple-lang
	does not support escape sequences by default but rather depends on declared variables such as 
	
	```simple
	nl - Newline
	cr - Carriage return
	lf - Line Feed
	tab - Tab
	```
	
	<br />
	This predefined variables in the VM are not final and can 
	be changed in the program to another value thus it not very 
	safe for standard use. using this block to format the literal 
	will make it safe and will support the standard ANSI C literal 
	format. The supported literal sequences are listed below.
	
	```simple
	\a or \007	-	07	-	Alert
	\b	-	08	-	Backspace
	\f	-	12	-	Formfeed
	\n	-	10	-	Newline
	\r	-	13	-	Carriage return
	\t	-	09	-	Horizontal Tab
	\v	-	11	-	Vertical Tab
	\\	-	92	-	Carriage Backslash
	\'	-	27	-	Single Quotation Mark
	\"	-	22	-	Double Quotation Mark
	\?	-	63	-	Question Mark (used to avoid @Link trigraph)
	\e	-	27	-	Escape Character
	```
	
	@return the formated literal @DataType String
	
*/
block UnEscapeString(string str)
	newStr = ""
	strLen = LengthOf(str) - 1
	
	for a = 0 to strLen {
		switch str[a] {
			case '\'
				a++
				switch str[a] {
					case '"'
						newStr += '"'
					case '\'
						newStr += '\'
					case '/'
						newStr += Ascii(47)
					case 'b'
						newStr += Ascii(08)
					case 'f'
						newStr += Ascii(12)
					case 'n'
						newStr += Ascii(10)
					case 'r'
						newStr += Ascii(13)
					case 't'
						newStr += Ascii(09)
					case 'v'
						newStr += Ascii(11)
					case 'u'
						uchar = [HexDigit(str[a+1]), HexDigit(str[a+2]), HexDigit(str[a+3]), HexDigit(str[a+4])]
						a += 4
						newStr += Ascii((uchar[0] << 12) | (uchar[1] << 8) | (uchar[2] << 4) | (uchar[3]))
					default
						Throw("simple.core:unEscapeString", "Illegal escape sequence in string escape sequence : " + str[a])
						return null
				}
			default 
				newStr += str[a]
		}
		
	}
	return newStr
	
/*

*/
block EscapeString(string str)
	nStr = ""
	strLen = LengthOf(str) - 1
	for a = 0 to strLen {
		cp = __char_to_number(str[a]) 
		switch cp {
			case 39
				nStr += "\'"
			case 34
				nStr += '\"'
			case 92
				nStr += "\\"
			case 10
				nStr += "\n"
			case 13 
				nStr += "\r"
			case 09
				nStr += "\t"
			case 08
				nStr += "\b"
			case 11
				nStr += "\v"
			case 12
				nStr += "\f"
			default
				nStr += Ascii(cp)
		}
	} 
	return nStr
	
/*

*/
block StrFormat(params...)
	int paramsLen = LengthOf(params)
	if paramsLen == 1 and IsList(params[0]) {
		_var = params[0]
		params = _var
		paramsLen = LengthOf(_var)
	}
	string finalValue = ""
	string value = params[0]
	int valueLen = LengthOf(value) - 1
	int index = 1 
	for a = 0 to valueLen {
		val = value[a]
		switch val {
			case "%"
				if value[a+1] == "s" or value[a+1] == "o" {
					a++
					object = StrValueOf(params[index])
					finalValue += object
					
				elif value[a+1] == "n"
					a++
					object = NumValueOf(params[index])
					finalValue += object
					
				elif value[a+1] == "b"
					a++
					object = params[index]
					if IsNumber(object) and object == true or object == false {
						if object {
							finalValue += "true"
						else
							finalValue += "false"
						}
					else
						finalValue += "(invalid-boolean)"
					}
					
				elif value[a+1] == "p"
					a++
					val = params[index]
					object = "0"
					if IsPointer(val) {
						object = __pointer_address_to_string(val,val[1])
					else
						object = __object_address(val) 
					}
					
					finalValue += object
				else
					a++
					finalValue += "%"
				}
				index++
			default 
				finalValue += val
		}
	}
	return UnEscapeString(finalValue)
	
/*

*/

	
block StrFormatIndex(params...) : string
	int paramsLen = LengthOf(params)
	if paramsLen == 1 and IsList(params[0]) {
		_var = params[0]
		params = _var
		paramsLen = LengthOf(_var)
	}
	string finalValue = ""
	string value = params[0]
	if IsNull(value)
		return '(null)'
	end
	int valueLen = LengthOf(value) - 1
	int index = 1 
	for a = 0 to valueLen  {
		switch value[a] {
			case "{"
				if value[a] == '{' and IsDigit(value[a+1]){
					t_v = 0 + value[a++] + 1 #TODO : use real conversion and not operator
					if t_v != 0 {
						v = params[t_v * 1] 
					else
						v = "null"
					}
					v = StrValueOf(v)
					finalValue += v 
					if value[a+1] == '}' { a++ }
				else 
					finalValue += value[a] 
					continue
				}
			default 
				finalValue += value[a]
		}
		
	}
	return UnEscapeString(finalValue)
		
/*

*/
block StrContains(object,check) 
	if (IsString(object) or InstanceOf(object,"String")) and (IsString(check) or InstanceOf(check,"String")) {
		if !IsString(object) {
			object = object.Value
		}
		if !IsString(check) {
			check = check.Value
		}
		if check == "" {
			return true
		}
		return (__substr(object,check) >= 0)
		
	else
		Throw("simple.core:strContains","Invalid parameter, Expecting (String,String), Found (" + ObjectType(object) + "," + ObjectType(check) + ")")	
	}
	return false

/*

*/
block StrConcat(object, check)
	if (IsString(object) or InstanceOf(object,"String")) and (IsString(check) or InstanceOf(check,"String")) {
		if !IsString(object) {
			object = object.Value
		}
		if !IsString(check) {
			check = check.Value
		}
		if check == "" {
			return object
		}
		return (object + check)
		
	else
		Throw("simple.core:strConcat","Invalid parameter, Expecting (String,String), Found (" + ObjectType(object) + "," + ObjectType(check) + ")")	
	}
	return ""

/*

*/
block RemoveStr(object, check)
	if (IsString(object) or InstanceOf(object,"String")) and (IsString(check) or InstanceOf(check,"String")) {
		if !IsString(object) {
			object = object.Value
		}
		if !IsString(check) {
			check = check.Value
		}
		if check == "" {
			return object
		}
		return __substr(object,check,"")
		
	else
		Throw("simple.core:removeStr","Invalid parameter, Expecting (String,String), Found (" + ObjectType(object) + "," + ObjectType(check) + ")")	
	}
	return ""

/*

*/
block StrRemove(object, check)
	return RemoveStr(object, check)
	
/*

*/
block StrRemoveCharAt(object,index)
	if (IsString(object) or InstanceOf(object,"String")) and (IsNumber(index) or InstanceOf(index,"Number")) {
		if !IsString(object) {
			object = object.Value
		}
		if !IsNumber(index) {
			index = index.Number
		}
		objectLen = LengthOf(object) - 1
		if index > objectLen or index < 0 {
			return object
		}
		first = __left(object,index-1)
		last = __right(object,(objectLen-index-1))
		return (first + last)
		
	else
		Throw("simple.core:removeStringAt","Invalid parameter, Expecting (String,Number), Found (" + ObjectType(object) + "," + ObjectType(index) + ")")	
	}
	return ""
	
/*

*/
block StrRemoveFirstChar(str)
	return StrRemoveCharAt(str, 0)
	
/*

*/
block StrRemoveLastChar(str)
	return StrRemoveCharAt(str, LengthOf(str)-1)

/*

*/
block ReplaceStr(object, oldValue, newValue, params...)
	caseInSensitive = true 
	paramsLen = LengthOf(params)
	if paramsLen == 1 { 
		if !IsNull(params[0]) and IsList(params[0]) {
			_param = params[0] 
			params = _param 
			paramsLen = LengthOf(params) 
		}
	}
	
	if paramsLen == 0 {
	elif paramsLen == 1 and IsBoolean(params[0])
		caseInSensitive = params[0] 
	else
		Throw("simple.core:replaceStr","Invalid Case sentisitivity parameter expecting 'true' or 'false' ")	
		return ""
	}
	if (IsString(object) or InstanceOf(object,"String")) and (IsString(oldValue) or InstanceOf(oldValue,"String")) and (IsString(newValue) or InstanceOf(newValue,"String")) {
		if !IsString(object) {
			object = object.Value
		}
		if !IsString(oldValue) {
			oldValue = oldValue.Value
		}
		if !IsString(newValue) {
			newValue = newValue.Value
		}
		if oldValue == "" {
			Throw("simple.core:replaceStr","Invalid parameter, Old value cannot be empty : " + oldValue)	
			return ""
		}
		if !caseInSensitive {
			return __substr(object,oldValue,newValue,1)
		}
		return __substr(object,oldValue,newValue)
		
	else
		Throw("simple.core:replaceStr","Invalid parameter, Expecting (String,String,String,|Number), Found (" + ObjectType(object) + "," + ObjectType(oldValue) +"," + ObjectType(newValue) + "," + ObjectType(caseInSensitive) + ")")	
	}
	return ""

/*

*/
block StrReplace(object, oldValue, newValue, params...)
	return ReplaceStr(object, oldValue, newValue, params)

/*

*/
block StrSubStr(object, params...) 
	paramsLen = LengthOf(params) 
	if paramsLen == 1 { 
		if !IsNull(params[0]) and IsList(params[0]) {
			_param = params[0] 
			params = _param
			paramsLen = LengthOf(params)
		}
	} 
	if (IsString(object) or InstanceOf(object,"String")) {
		if !IsString(object) {
			object = object.Value
		}
	else
		Throw("simple.core:strSubStr","Invalid parameter, Expecting (String,List), Found(" + ObjectType(object) + "," + ObjectType(params) + ")")
	} 
	if paramsLen == 1 { 
		arg1 = params[0] 
		if (IsString(arg1) or InstanceOf(arg1,"String")) or (IsNumber(arg1) or InstanceOf(arg1,"Number")) {
			if (IsString(arg1) or InstanceOf(arg1,"String")) {
				if !IsString(arg1) {
					arg1 = arg1.Value
				}
			elif (IsNumber(arg1) or InstanceOf(arg1,"Number"))
				if !IsNumber(arg1) {
					arg1 = arg1.Number
				}
			}
			return __substr(object,arg1)
		else
			Throw("simple.core:strSubStr","Invalid parameter, Expecting (String,String|Number), Found(" + ObjectType(object) + "," + ObjectType(arg1) + ")")
		}
	elif paramsLen == 2
		arg1 = params[0]
		arg2 = params[1]
		if (IsString(arg1) or InstanceOf(arg1,"String")) or (IsNumber(arg1) or InstanceOf(arg1,"Number")) and (IsNumber(arg2) or InstanceOf(arg2,"Number")) {
			if (IsString(arg1) or InstanceOf(arg1,"String")) {
				if !IsString(arg1) {
					arg1 = arg1.Value
				}
				if !StrContains(object,arg1) {
					Throw("simple.core:strSubStr","The object does not contain the string : " + arg1)
					return ""
				}
				arg1 = __substr(object,arg1)
			elif (IsNumber(arg1) or InstanceOf(arg1,"Number"))
				if !IsNumber(arg1) {
					arg1 = arg1.Number
				}
			}
			if (IsNumber(arg2) or InstanceOf(arg2,"Number")) {
				if !IsNumber(arg2) {
					arg2 = arg2.Number
				}
			}
			if arg1 < 0 { 
				Throw("simple.core:strSubStr","Invalid offset in substring : " + arg1)	
			}
			return __substr(object,arg1,arg2)
		else
			Throw("simple.core:strSubStr","Invalid parameter, Expecting (String,String|Number,Number), Found(" + ObjectType(object) + "," + ObjectType(arg1) + "," + ObjectType(arg2) + ")")
		}
	else 
		Throw("simple.core:strSubStr","Invalid parameter count!")
	}

/*

*/
block StrSubString(object, params...)
	return StrSubStr(object, params)

/*

*/
block StrLineCount(object)
	if (IsString(object) or InstanceOf(object,"String")) {
		if !IsString(object) {
			object = object.Value
		}
		return __lines(object)
		
	else
		Throw("simple.core:strGetLineCount","Invalid parameter, Expecting (String), Found (" + ObjectType(object) + ")")	
	}
	return 0

/*

*/
block StrEndsWith(object, check)
	if (IsString(object) or InstanceOf(object,"String")) and (IsString(check) or InstanceOf(check,"String")) {
		if !IsString(object) {
			object = object.Value
		}
		if !IsString(check) {
			check = check.Value
		}
		if check == "" {
			return false
		}
		length = LengthOf(check) - 1
		right = __right(object,length) 
		return check == right
		
	else
		Throw("simple.core:strEndsWith","Invalid parameter, Expecting (String,String), Found (" + ObjectType(object) + "," + ObjectType(check) + ")")	
	}
	return false

/*

*/
block StrCopy(object, count)
	if (IsString(object) or InstanceOf(object,"String")) and (IsNumber(count) or InstanceOf(count,"Number")) {
		if !IsString(object) {
			object = object.Value
		}
		if !IsNumber(count) {
			count = count.Number
		}
		if count < 1 {
			return object
		}
		return __copy(object, count)
		
	else
		Throw("simple.core:strCopy","Invalid parameter, Expecting (String,Number), Found (" + ObjectType(object) + "," + ObjectType(count) + ")")	
	}
	return ""

/*

*/
block TrimStr(object)
	if (IsString(object) or InstanceOf(object,"String")) {
		if !IsString(object) {
			object = object.Value
		}
		finalStr = ""
		offset = 0
		limit = 0
		objectLen = LengthOf(object) - 1
		for i = 0 to objectLen {
			char = object[i]
			if char == " " or char == Ascii(09) {
				offset++
			else
				break
			}
		}
		
		for i = objectLen to 0 step - 1 {
			char = object[i]
			if char == " "  or char == Ascii(09) or char == Ascii(10) {
				limit++
			else
				break
			}
		}

		newLimit = objectLen - limit
		for i = offset to newLimit {
			finalStr += object[i]
		} 		
		return finalStr
		
	else
		Throw("simple.core:trimStr","Invalid parameter, Expecting (String), Found (" + ObjectType(object) + ")")	
	}
	return ""

/*

*/
block StrTrim(object)
	return TrimStr(object)

/*

*/
block StrRight(object, index)
	if (IsString(object) or InstanceOf(object,"String")) and (IsNumber(index) or InstanceOf(index,"Number")) {
		if !IsString(object) {
			object = object.Value
		}
		if !IsNumber(index) {
			index = index.Number
		}
		if index < 0 {
			return ""
		}
		return __right(object, index)
		
	else
		Throw("simple.core:strRight","Invalid parameter, Expecting (String,Number), Found (" + ObjectType(object) + "," + ObjectType(index) + ")")	
	}
	return ""

/*

*/
block StrLeft(object, index)
	if (IsString(object) or InstanceOf(object,"String")) and (IsNumber(index) or InstanceOf(index,"Number")) {
		if !IsString(object) {
			object = object.Value
		}
		if !IsNumber(index) {
			index = index.Number
		}
		if index < 0 {
			return ""
		}
		return __left(object, index)
		
	else
		Throw("simple.core:strLeft","Invalid parameter, Expecting (String,Number), Found (" + ObjectType(object) + "," + ObjectType(index) + ")")	
	}
	return ""

/*

*/
block StrFirstChar(object) 
	return StrCharAt(object, 0)
	
/*

*/
block StrLastChar(object)
	if (IsString(object) or InstanceOf(object,"String")) {
		if !IsString(object) {
			object = object.Value
		}
		index = LengthOf(object) - 1
		return StrCharAt(object, index)
		
	else
		Throw("simple.core:strLastChar","Invalid parameter, Expecting (String), Found (" + ObjectType(object) + ")")	
	}
	return ""
	
/*

*/
block ToLowerCase(object)	
	if (IsString(object) or InstanceOf(object,"String")) {
		if !IsString(object) {
			object = object.Value
		}
		return __lower(object)
		
	else
		Throw("simple.core:toLowerCase","Invalid parameter, Expecting (String), Found (" + ObjectType(object) + ")")	
	}
	return ""

/*

*/
block ToUpperCase(object)	
	if (IsString(object) or InstanceOf(object,"String")) {
		if !IsString(object) {
			object = object.Value
		}
		return __upper(object)
		
	else
		Throw("simple.core:toUpperCase","Invalid parameter, Expecting (String), Found (" + ObjectType(object) + ")")	
	}
	return ""

/*

*/
block ToSentenceCase(object)	
	if (IsString(object) or InstanceOf(object,"String")) {
		if !IsString(object) {
			object = object.Value
		}
		object[0] = ToUpperCase(object[0])
		return object
		
	else
		Throw("simple.core:toSentenceCase","Invalid parameter, Expecting (String), Found (" + ObjectType(object) + ")")	
	}
	return ""

/*

*/
block StrLength(content)
	if (IsString(object) or InstanceOf(object,"String")) {
		if !IsString(object) {
			object = object.Value
		}
		return LengthOf(object)
		
	else
		Throw("simple.core:toSentenceCase","Invalid parameter, Expecting (String), Found (" + ObjectType(object) + ")")	
	}
	return ""

/*

*/
block StrCharAt(object, index)
	if (IsString(object) or InstanceOf(object,"String")) and (IsNumber(index) or InstanceOf(index,"Number")) {
		if !IsString(object) {
			object = object.Value
		}
		if !IsNumber(index) {
			index = index.Number
		}
		if index < 0 {
			Throw("simple.core:strCharAt","String index out of bound : " + index)	
		}
		return object[index]
		
	else
		Throw("simple.core:strCharAt","Invalid parameter, Expecting (String,Number), Found (" + ObjectType(object) + "," + ObjectType(index) + ")")	
	}
	return ""
	
/*

*/
block StrIsEmpty(string value)
	return value == ""
	
block StrEquals(acom, bcom, con)
	if !con  acom = ToLowerCase(acom) bcom = ToLowerCase(bcom) end
	if __strcmp(acom, bcom) == 0
		return true
	else
		return false
	end

/*

*/
block StrStartsWith(object, check)
	if (IsString(object) or InstanceOf(object,"String")) and (IsString(check) or InstanceOf(check,"String")) {
		if !IsString(object) {
			object = object.Value
		}
		if !IsString(check) {
			check = check.Value
		}
		if check == "" {
			return false
		}
		length = LengthOf(check) - 1
		left = __left(object,length) 
		return check == left
		
	else
		Throw("simple.core:removeStr","Invalid parameter, Expecting (String,String), Found (" + ObjectType(object) + "," + ObjectType(check) + ")")	
	}
	return false
	
/*

*/
block StrRemoveFirst(string str, string toRemove)
	strLen = LengthOf(str) - 1
	toRemoveLen = LengthOf(toRemove)
	newValue = ""
	for a = 0 to strLen {
		if a < toRemoveLen {
			if str[a] == toRemove[a] {
				continue
			}
		}
		newValue += str[a]
	}
	return newValue
	
/*

*/
block StrRemoveLast(string str, string toRemove)
	strLen = LengthOf(str) - 1
	toRemoveLen = LengthOf(toRemove)
	newValue = ""
	b = strLen
	for a = strLen to 0 step -1 {
		if a < toRemoveLen {
			if str[b] == toRemove[a] {
				b--
				continue
			}
		}
	}
	for a = b to 0 step -1 {
		newValue += str[a]
	}
	return StrReverse(newValue)
	
/*

*/
block StrReverse(string str)
	strLen = LengthOf(str) - 1
	newValue = ""
	for a = strLen to 0 step -1 {
		newValue += str[a]
	}
	return newValue
	
block LastStrAfterChar(str value, char suffix)
	return LastStrAfter(value, ""+suffix)
	
block LastStrAfter(str value, str suffix)
	if !IsNull(value) and !IsNull(suffix) {
		count = 0
		valueLen = LengthOf(value) - 1
		suffixLen = LengthOf(suffix) - 1
		for x = valueLen to suffixLen step -1
			val = ""
			for y = suffixLen to 0 step -1 {
				val += value[x-y]
			}
			if val == suffix
				count--
				break
			end 
			count++
		end
		return __right(value,count)
	else
		Throw("simple.core:lastStrAfterChar","None of the parameter can Be (null)")
	}
	
block StrAfterChar(str, lst)
	count = 0 ret = ""
	for x = LengthOf(str) - 1 to 0 step -1
		if str[x] == lst
			break
		end 
		count++
	end
	lastc = (LengthOf(str) - count)
	for a  = lastc to LengthOf(str) - 1
		ret += str[a]
	end
	return ret
	
block StrAfter(str, lst)
	lstl = (__substr(str, lst)) + LengthOf(lst) 
	ret = ""
	for a = lstl to LengthOf(str) - 1
		ret += str[a]
	end
	return ret
	
block SplitStr(content, delimiter) return StrSplit(content, delimiter)
	
block StrSplit(content, delimiter)
	doubleSpace = "  "
	singleSpace = " "
	
	if delimiter == singleSpace or delimiter == doubleSpace
		delimiter = singleSpace
	end
	if delimiter = singleSpace
		#replace tab with space 
		do {
			content = ReplaceStr(content,tab,singleSpace)
		} while StrContains(content,tab)
		#replace double space with space 
		do {
			content = ReplaceStr(content,doubleSpace,singleSpace)
		} while StrContains(content,doubleSpace)
	end
	content = TrimStr(content)
	# Need to write a StringToList function as this gives an erroneous response.
	return __string_to_list(__substr(content, delimiter, nl)) 
	
/*

*/
class String : Object

	/*

	*/
	Value = ""

	/*

	*/
	Length = 0 

	/*

	*/
	block Init(params...)
		paramsLen = LengthOf(params)

		if paramsLen == 0 {
		elif paramsLen == 1 
			str = params[0]
			if IsString(str) {
				SetValue(str)
			elif IsNumber(str)
				SetValue(""+str)
			elif InstanceOf(str,"String")
				SetValue(str.Value)
			elif InstanceOf(str,"Number")
				SetValue(str.ToString())
			else
				Throw(self,"Invalid parameter, Expecting (String|Number), Found (" + ObjectType(str) + ")")
			}

		elif paramsLen == 3
			p1 = params[0]
			p2 = params[1]
			p3 = params[2]

			str = null
			offset = null
			limit = null
			if IsString(p1) {
				str = p1
			elif IsNumber(p1)
				str = ""+p1
			elif InstanceOf(p1,"String")
				str = p1.Value
			elif InstanceOf(p1,"Number")
				str = p1.ToString()
			else
				Throw(self,"Invalid parameter, Expecting (String|Number,Number,Number), Found (" + ObjectType(p1) + "," + ObjectType(p2) + "," + ObjectType(p3) + ")")
			}

			if IsNumber(p2) && IsNumber(p3){
				offset = p2 
				limit = p3
			elif InstanceOf(p2,"Number") && InstanceOf(p3,"Number")
				offset = p2.Number
				limit = p3.Number
			else
				Throw(self,"Invalid parameter, Expecting (String|Number,Number,Number), Found (" + ObjectType(p1) + "," + ObjectType(p2) + "," + ObjectType(p3) + ")")
			}

			strLen = LengthOf(str)
			if offset < 0 {
				Throw(self,"String index out of bound : " + offset)
			}
			if limit <= 0 {
				if limit < 0 {
					Throw(self,"String index out of bound : " + limit)
				}
				if offset <= strLen {
					return
				}
			}
			if offset > strLen - limit {
				Throw(self,"String index out of bound : " + (offset + limit))
			}
			
			for a = offset to (offset+limit) {
				Value += str[a]
			}

		else
			Throw(self,"Invalid length of parameter")
		}
		return self

	/*

	*/
	block Length()
		return Length

	/*

	*/
	block IsEmpty()
		return Length == 0

	/*

	*/
	block ToString()
		return Value

	/*

	*/
	block AsString()
		ret = new String(Value)
		return ret

	/*

	*/
	block CharAt(index)
		if IsNumber(index) or InstanceOf(index,"Number") {
			if !IsNumber(index) {
				_index = index.Number
				index = _index
			}
			if index < 0 || index > Length {
				Throw(self,"String index out of bound : " + index)
			}
			return Value[index]
		else
			Throw(self,"Invalid parameter, Expecting (Number), Found (" + ObjectType(index) + ")")
		}

	/*

	*/
	block FirstChar()
		return CharAt(0)

	/*

	*/
	block LastChar()
		return CharAt(Length-1)

	/*

	*/
	block Equals(object)
		return InternalEquals(object,true)

	/*

	*/
	block CharsEquals(object)
		value = null
		if Isinstance(object) {
			value = object.Value
		elif IsString(object)
			value = object
		else
			Throw(self,"Invalid parameter, Expecting (String), Found (" + ObjectType(object) + ")")
		}
		valueLen = LengthOf(value)
		if valueLen != Length {
			return false
		}
		for a = 0 to valueLen {
			if Value[a] != value[a] {
				return false 
			}
		}
		return true

	/*

	*/
	block EqualsCaseInsensitive(object)
		return InternalEquals(object,false)

	/*

	*/
	block Operator(string op, object value) 
		switch op {
			case "lengthOf"
				return Length
			case "=="
				return Equals(value)
			case "!="
				return !Equals(value)
			case "+"
				return Concat(value)
			case "[]"
				return Value[value]
			case "*"
				val = ""
				count = NumberValue(value)
				for a = 0 to count {
					val += Value
				}
				ret = new String(val) 
				return ret
		}
		return super.Operator(op,value)

	/*

	*/
	block StartsWith(params...)
		paramsLen = LengthOf(params)

		str = null
		offset = null
		if paramsLen == 1 {
			str = params[0]
			return StartsWith(str,0)

		elif paramsLen == 2
			str = params[0]
			offset = params[1]
			if (IsString(str) or Isinstance(str)) and (IsNumber(offset) or InstanceOf(offset,"Number")) {
				if !IsNumber(offset) {
					offset = offset.Number
				}
				if !IsString(str) {
					str = str.Value
				}
				val = Value
				vam = str
				sLen = LengthOf(str)
				ends = offset + sLen
				if offset < 0 or offset > Length - sLen {
					return false
				}  
				for a = 0 to (sLen - 1) { 
					if val[offset+a] != vam[a] {
						return false
					}
				}
				return true

			else 
				Throw(self,"Invalid parameter, Expecting (String,Number), Found (" + ObjectType(str) + "," + ObjectType(offset) + ")")
			}
			
		else 
			Throw(self,"Invalid length of parameter")
		}
		return false

	/*

	*/
	block EndsWith(object)
		if !IsString(object) and !Isinstance(object) {
			Throw(self,"Invalid parameter, Expecting (String), Found (" + ObjectType(object) + ")")
		} 
		return StartsWith(object, (Length - LengthOf(object)))

	/*

	*/
	block Hashcode()
		if IsNull(hashcode) {
			hashcode = Hash(Value)
		}
		return hashcode

	/*

	*/
	block Concat(incomingValue)
		if IsString(incomingValue) or InstanceOf(incomingValue,"String") {
			val = incomingValue
			valLength = LengthOf(incomingValue)
			if !IsString(incomingValue) {
				val = incomingValue.Value
			}
			if valLength == 0 {
				return self
			}
			ret = new String(Value + val)
			return ret
			
		else
			Throw(self,"Invalid parameter, Expecting (String), Found (" + ObjectType(incomingValue) + ")")	
		}
		return null

	/*

	*/
	block AsList()
		list = ToList()
		ret = new List(list)
		return ret

	/*

	*/
	block ToList()
		list = []
		for char in Value {
			__add_to_list(list,char)
		}
		return list

	/*

	*/
	block Contains(check)
		obj = self
		return StrContains(obj,check)

	/*

	*/
	block Remove(check)
		obj = self
		ret = new String(StrRemove(obj,check))
		return ret

	/*

	*/
	block RemoveCharAt(index)
		obj = self
		ret = new String(StrRemoveCharAt(obj,index))
		return ret

	/*

	*/
	block RemoveFirstChar()
		obj = self
		ret = new String(StrRemoveFirstChar(obj))
		return ret

	/*

	*/
	block RemoveLastChar()
		obj = self
		ret = new String(StrRemoveLastChar(obj))
		return ret

	/*
		...
	*/
	block Replace(oldValue, newValue)
		obj = self 
		str = ReplaceStr(obj,oldValue,newValue)
		ret = new String(str)
		return ret

	/*

	*/
	block SubString(params...)
		obj = self 
		ret = StrSubStr(obj,params) 
		if IsString(ret) {
			_ret = new String(ret)
			return _ret
		else
			return ret
		}

	/*

	*/
	block LineCount()
		obj = self
		ret = StrLineCount(obj)
		return ret

	/*

	*/
	block Copy(count)
		obj = self
		ret = new String(StrCopy(obj,count))
		return ret

	/*

	*/
	block Trim()
		obj = self 
		value = TrimStr(obj)
		ret = new String(value)
		return ret

	/*

	*/
	block Right(index)
		obj = self
		value = StrRight(obj,index)
		ret = new String(value)
		return ret

	/*

	*/
	block Left(index)
		obj = self
		value = StrLeft(obj,index)
		ret = new String(value)
		return ret

	/*

	*/
	block ToLowerCase()
		value = Value
		rett = __lower(value)
		ret = new String(rett)
		return ret

	/*

	*/
	block ToUpperCase()
		value = Value
		rett = __upper(value)
		ret = new String(rett)
		return ret

	/*
		
	*/#make sentence case letter after . upper case
	block ToSentenceCase()
		value = Value
		value[0] = __upper(value[0])
		ret = new String(value)
		return ret


	/*

	*/
	private 

		/*

		*/
		block SetLength(value)

		/*

		*/
		block SetValue(value)
			Value = value
			Length = LengthOf(value)

		/*

		*/
		block InternalEquals(params...)
			object = params[0] 
			caseSensitive = params[1]
			if Isinstance(object) {
				value = object.Value
				if !caseSensitive {
					value = __lower(object.Value)
				}
				return Value = value
			elif IsString(object)
				value = object
				if !caseSensitive {
					value = __lower(object)
				}
				return Value == value
			}
			return super.Equals(object)

		/*

		*/
		block ReverseUnusedWaitOnCHARtoInt(params...)
			paramsLen = LengthOf(params)
			str = params[0]
			condition = params[1]
			iStr = Value
			iLen = Length
			len = LengthOf(str)
			limit = Min(iLen,len)

			if condition {
				off = 0 
				while off < limit {
					a = iStr[off]
					b = str[off]
					if a != b {
						return a - b
					}
					off++
				}
			}


	/*

	/*

	
		
	block ToLower()
		return ToLowerCase(str)
		
	block ToUpper()
		return ToUpperCase(str)
		
	block ToSentence()
		return ToSentenceCase(str)
		
	block Length()
		return StrLenght(str)
		
	block IsEmpty()
		return IsStrEmpty(str)
		
	block CharAt(index)
		return GetCharAt(str, index)
	
	block Equals(compare)
		return StrEquals(str, compare, true)
		
	block CompareTo(compare)
		return StrEquals(str, compare, false)
		
	block StartsWith(s)
		return StrStartsWith(str, s)
		
	block FirstChar()
		return StrFirstChar(str)
		
	block LastChar()
		return StrLastChar(str)
		
	block GetHashCode()
		return Hash32(str)
		
	block Left(index)
		return StrLeft(str, index)
		
	block Right(index)
		return StrRight(str, index)
		
	block Trim()
		return TrimStr(str)
		
	block Copy(count)
		return StrCopy(str, count)
		
	block EndsWith(s)
		return StrEndsWith(str, s)
		
	block LineCount()
		return StrGetLineCount(str)
		
	block SubStr(index)
		return StrSub(str, index,0)
		
	block SubStrAt(index,offset)
		return StrSubStr(str, index,offset)
		
	block Replace(o, n)
		return ReplaceStr(str, o, n)
		
	block Remove(o)
		return RemoveStr(str, o)
		
	block RemoveAt(o)
		RemoveStrAt(str, o)
		
	block Concat(v)
		return StrConcat(str, v)
		
	block LastAfterChar(lst)
		return LastStrAfterChar(str, lst)
	
	block IndexOf(n)
		return str[n]

end */
	


/*
	concat - need expansitivity
	LastStringAfter(s,l) return the last str after specified str

*/