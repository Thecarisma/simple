/* 
	Copyright (c) 2018 Azeez Adewale <azeezadewale98@gmail.com> 
	MIT License Copyright (c) 2018 simple-lang
*/

/* 
 * @Filename - SimpleX.sim
 * @Author - Azeez Adewale
 * @Date - 23 July 2018
 * @Time - 01:11 PM
 */

/*
	
*/
from simple.system.loadsystemdll
from simple.system.System
from simple.io.Path

/*

*/
module simple.system

#Cache Variables

/*

*/
__simpleDir = null

/*

*/
__simpleModulesDir = null

/*

*/
__simpleDyModulesDir = null

/*

*/
__simpleDocDir = null

/*

*/
__simpleExecDir = null

/*

*/
__simpleIncludesDir = null

/*

*/
__simpleResDir = null

/*
	Get the Directory that the simple distribution are installed into, this is 
	different from the directory where the simple executables e.g simple.exe are. 
	The directory is where different version of simple-lang are installed. 
	A typical Heirachy example:
	@Code
		#Windows 
		C:\\Simple\\ #-> the simple directory
			.\\s0.4.0\\
			.\\s0.4.0\\
			.\\s0.4.00\\
		#linux
		/var/lib/simple/ #-> the simple directory
			.\\s0.4.0\\
			.\\s0.4.0\\
			.\\s0.4.00\\
	@EndCode
	@Return the simple-lang installation directory @DataType String
*/
block simpleDir()
	if isNull(__simpleDir) {
		simpleDir = getSystemEnvironment("SIMPLE_PATH")
		if simpleDir == "(null)" || simpleDir == "" {
			simpleDir = exeFolder()
			if isWindows() { 
				if __dir_exists(simpleDir) {
					simpleDir = strRemoveLastChar(simpleDir)
					toRemove = lastStrAfterChar(simpleDir,"\")
					simpleDir = removeStr(simpleDir,toRemove)  
				}
				if simpleDir == "(null)" || simpleDir == "" {
					simpleDir = "C:\Simple\"
				}
			else
				xPrefix = getEnv("PREFIX")
				if getEnv("PREFIX") == "/" {
					xPrefix = "/usr/local"
				}
				tempPath = xPrefix + "/var/lib/simple/"
				simpleDir = tempPath
			}
		} 
		__simpleDir = simpleDir
	}
	return __simpleDir

/*
	Get the directory where simple-lang modules are installed. The location depends on 
	the operating system path
	@Return the simple-lang modules directory @DatatType String
*/
block simpleModulesDir()
	if isNull(__simpleModulesDir) {
		sDir = simpleDir()
		if strEndsWith(sDir, "debug"+SystemSlash()) or strEndsWith(sDir, "debug/") or strEndsWith(sDir, "debug\") {
			modulesDir = sDir+"/modules/"
		else
			modulesDir = sDir+"s"+simpleVersion()+"/modules/"
		}		
		modulesDir = correctPath(modulesDir)
		__simpleModulesDir = modulesDir
	}
	return __simpleModulesDir

/*
	Get the directory where simple-lang dynamic modules are installed. The location depends on 
	the operating system path
	@Return the simple-lang dynamic modules directory @DatatType String
*/
block simpleDyModulesDir()
	if isNull(__simpleDyModulesDir) {
		dyModulesDir = simpleModulesDir()+"dynamic_modules/"
		__simpleDyModulesDir = dyModulesDir
	}
	return __simpleDyModulesDir

/*
	Get the directory where simple-lang dynamic modules are installed. The location depends on 
	the operating system path
	@Return the simple-lang dynamic modules directory @DatatType String
*/
block simpleDocDir()
	if isNull(__simpleDocDir) {
		docDir = simpleModulesDir()+"../docs/"
		__simpleDocDir = correctPath(docDir)
	}
	return __simpleDocDir

/*
	Get the directory where the simple executable directory 
	@Return where simple-lang executable directory @DataType String
*/
block simpleExecDir()
	if isNull(__simpleExecDir) {
		simpleExecDir = exeFolder()
		if !__file_exists(simpleExecDir+"/simple"+simpleXExeExt()) {
			if isWindows() {
				simpleExecDir = simpleDir()+"/s"+simpleVersion()+"/bin/"
			else
				simpleExecDir = getEnv("PREFIX")+"/bin/"
			}
		}
		__simpleExecDir = simpleExecDir
	}
	return replaceStr(__simpleExecDir, "/", SystemSlash())

/*
	Get the extension type for the specific operating system
	@Return the system executable directory @DataType String
*/
block simpleXExeExt()
	if isWindows() {
		return ".exe"
	}
	return ""

/*
	Get the dynamic modules extension for the specific operating system
	@Return the system dynamic module extension @DataType String
*/
block dynamicModuleExt()
	if isWindows() {
		return "dll"
	elif isMacosx()
		return "dylib"
	else
		return "so"
	}
	return ""
	
	
/*

*/
block simpleIncludesDir()
	if isNull(__simpleIncludesDir) {
		if isWindows() {
			includesDir = simpleDir()+"/include/"
		else
			includesDir = getEnv("PREFIX")+"/include/simple/"
		}
		__simpleIncludesDir = correctPath(includesDir)
	}
	return __simpleIncludesDir
	
	
/*

*/
block simpleResDir()
	if isNull(__simpleDocDir) {
		docDir = simpleModulesDir()+"../resources/"
		__simpleDocDir = correctPath(docDir)
	}
	return __simpleDocDir
	
	
