/* 
	Copyright (c) 2017-2018 Azeez Adewale <azeezadewale98@gmail.com> 
	MIT License Copyright (c) 2018 simple-lang

*/

/* 
 * #filename - System.sim
 * #author - Azeez Adewale
 * #date - 9 Febuary 2017
 */

from simple.system.loadsystemdll
 
module simple.system

#System  = new System 

#windows
final WINDOWS_SYSTEM = "windows"
final MS_DOS_SYSTEM = "windows_dos"
final WINDOWS_I386_SYSTEM = "windows_i386"
final WINDOWS_AMD64_SYSTEM = "windows_amd64"
final WINDOWS_ARM_SYSTEM = "windows_arm"
final WINDOWS_ARM64_SYSTEM = "windows_arm64"
final WINDOWS_MIPS_SYSTEM = "windows_mips"
final WINDOWS_POWERPC_SYSTEM = "windows_powerpc"
final WINDOWS_POWERPC64_SYSTEM = "windows_powerpc64"

#linux
final LINUX_SYSTEM = "linux"
final LINUX_I386_SYSTEM = "linux_i386"
final LINUX_AMD64_SYSTEM = "linux_amd64"
final LINUX_ARM_SYSTEM = "linux_arm"
final LINUX_ARM64_SYSTEM = "linux_arm64"
final LINUX_MIPS_SYSTEM = "linux_mips"
final LINUX_POWERPC_SYSTEM = "linux_powerpc"
final LINUX_POWERPC64_SYSTEM = "linux_powerpc64"

#unix
final UNIX_SYSTEM = "unix"
final UNIX_I386_SYSTEM = "unix_i386"
final UNIX_AMD64_SYSTEM = "unix_amd64"

#mac
final MACOSX_SYSTEM = "macosx_i386"
final MACOSX_AMD64_SYSTEM = "macosx_amd64"

#bsd
final FREEBSD_SYSTEM = "freebsd_i386"
final FREEBSD_AMD64_SYSTEM = "freebsd_amd64"
final OPENBSD_SYSTEM = "openbsd_i386"
final OPENBSD_AMD64_SYSTEM = "openbsd_amd64"
final NETBSD_SYSTEM = "netbsd_i386"
final NETBSD_AMD64_SYSTEM = "netbsd_amd64"

#aix
final AIX_SYSTEM = "aix_i386"
final AIX_AMD64_SYSTEM = "aix_amd64"

#solaris
final SOLARIS_SYSTEM = "solaris_sparc"
final SOLARIS_SPARC64_SYSTEM = "solaris_sparc64"

#haiku
final HAIKU_SYSTEM = "haiku_i386"
final HAIKU_AMD64_SYSTEM = "haiku_amd64"

#android
final ANDROID_SYSTEM = "android"

#unknows
final UNKNOWN_SYSTEM = "unknown_system"

final SystemDirSeperator = SystemSlash()

#DONE
/*

*/
final SystemScreenSizes = __screen_sizes()

/*

*/
block GetSystemScreenSizes()
	if IsNull(SystemScreenSizes) {
		SystemScreenSizes = __screen_sizes()
	}
	return SystemScreenSizes

/*

*/
block MonitorCount()
	return __monitor_count()

/*

*/
block AbsoluteScreenSize()
	scdLen = LengthOf(SystemScreenSizes) - 1
	return SystemScreenSizes[scdLen]

/*

*/
block AbsoluteScreenWidth()
	scdLen = LengthOf(SystemScreenSizes) - 1
	return SystemScreenSizes[scdLen][0]

/*

*/
block AbsoluteScreenHeight()
	scdLen = LengthOf(SystemScreenSizes) - 1
	return SystemScreenSizes[scdLen][1]

/*

*/
block PrimaryScreenSize()
	return SystemScreenSizes[0]

/*

*/
block PrimaryScreenWidth()
	return SystemScreenSizes[0][0]

/*

*/
block PrimaryScreenHeight()
	return SystemScreenSizes[0][1]

/*
	Get the system compatible slash to avoid error in input and output
	operations. Some of the known slashes are:
	@BlockQuote
		Windows 	- \\
		Linux		- /
		MacOS		- /
		Haiku		- /
		Unix		- /
		Android		- /
		Termux		- /
	@End
	@return the system slash char @DataType String
*/
block SystemSlash()
	if IsWindows() {
		return '\\'
	elif IsLinux()
		return '/'
	}		
	return '/'

/*

*/
block GetEnv(string variable)
	environmentVar = GetSystemEnvironment(variable)
	if environmentVar == "(null)" {
		environmentVar = ""
	}
	return environmentVar
	
/*

*/
block LineSeperator()
	if IsWindows() {
		return Ascii(13)+Ascii(10)
	}
	return Ascii(10)

#ENDDONE

block GetOS()
	if IsMsDos() {
		return MS_DOS_SYSTEM
	elif IsWindows()
		if IsWindows64() {
			return WINDOWS_AMD64_SYSTEM
		elif IsAmd64System()
			return WINDOWS_AMD64_SYSTEM
		elif IsI386System()
			return WINDOWS_I386_SYSTEM
		elif IsArm64System()
			return WINDOWS_ARM64_SYSTEM
		elif IsArmSystem()
			return WINDOWS_ARM_SYSTEM
		elif IsPowerPC64System()
			return WINDOWS_POWERPC64_SYSTEM
		elif IsPowerPCSystem()
			return WINDOWS_POWERPC_SYSTEM
		elif IsMIPSSystem()
			return WINDOWS_MIPS_SYSTEM
		else
			return WINDOWS_SYSTEM
		}
	elif IsLinux()
		if IsAmd64System()
			return LINUX_AMD64_SYSTEM
		elif IsI386System()
			return LINUX_I386_SYSTEM
		elif IsArm64System()
			return LINUX_ARM64_SYSTEM
		elif IsArmSystem()
			return LINUX_ARM_SYSTEM
		elif IsPowerPC64System()
			return LINUX_POWERPC64_SYSTEM
		elif IsPowerPCSystem()
			return LINUX_POWERPC_SYSTEM
		elif IsMIPSSystem()
			return LINUX_MIPS_SYSTEM
		else
			return LINUX_SYSTEM
		}
	else
		return UNKNOWN_SYSTEM
	}
	
#bbbbboobobobom true for now
block IsAmd64System() return true
	
block GetNewLine()
	if IsWindows() || IsWindows64()
		return Windowsnl()
	else 
		return crlf
	end
	
	
block TickCount()

block ExitCode()
	return 0
	
#internal block for getting environment variable
#block GetSystemEnvironment(para) 
	
block CommandLineParameters()
	return cmdparams
	
block CommandLineParametersSize()
	return LengthOf(cmdparams)

block SystemDirectory()
	return GetSystemEnvironment("SYSTEM_DIR")
	
block SystemVersion()
	return GetSystemEnvironment("OSVERSION")
	
block SystemUser()	
	return GetSystemEnvironment("USERNAME")
	
block UserDomain()	
	return GetSystemEnvironment("USERDOMAIN")
	
block OsGroup()
	return GetSystemEnvironment("OS")
	
block MachineName()
	return GetSystemEnvironment("COMPUTERNAME")
	
block SetSystemEnvironment(value)
	#incomming later
	
block IsWindowNT()
	if StrEquals(OsGroup(), "Windows_NT", true)
		return true
	end 
	return false
	
block UserHome()	
	envValue = GetSystemEnvironment("USERPROFILE")
	if envValue = "(null)" || envValue = "" {
		envValue = GetSystemEnvironment("USERDIR")
		if envValue = "(null)" || envValue = "" {
			if IsWindows() {
				envValue = "C:\\Users\\"+SystemUser()
			else
				envValue = "~/"
			}
		}
	}
	return envValue

block TempDirectory()
	tempDirectory = GetSystemEnvironment("TMPDIR")
	if tempDirectory == "(null)" || tempDirectory == "" {
		tempDirectory = GetSystemEnvironment("TEMPDIR")
		if tempDirectory == "(null)" || tempDirectory == "" {
			tempDirectory = GetSystemEnvironment("TMP")
			if tempDirectory == "(null)" || tempDirectory == "" {
				tempDirectory = GetSystemEnvironment("TEMP")
				if tempDirectory == "(null)" || tempDirectory == "" {
					if IsWindows() {
						tempDirectory = System.UserDirectory()+"\\AppData\\Local\\Temp\\"
					else
						tempDirectory = "/tmp/"
					}
					
				}
			}
		}
	}
	return tempDirectory
	
block GetTempDirectory()
		return TempDirectory()
	
block Exit(value)
	__exit(value)
	
block Beep(time, rate)
	__beep(time, rate)
	
block Sleep(length)
	__sleep(length)
	

	
/*
	GHOST BLOCKS
	-------------------------------
	CurrentDirectory() return the current working directory
	GetSystemEnvironment(param) return a system env
	CurrentFileName() return the active simple source file name
	CurrentFilePath() return the active simple source file path
*/


	