/* 
	Copyright (c) 2017-2018 Azeez Adewale <azeezadewale98@gmail.com> 
	MIT License Copyright (c) 2018 simple-lang

*/

/* 
 * #filename - System.sim
 * #author - Azeez Adewale
 * #date - 9 Febuary 2017
 */

from simple.system.loadsystemdll
 
module simple.system

#System  = new System 

#windows
final WINDOWS_SYSTEM = "windows"
final MS_DOS_SYSTEM = "windows_dos"
final WINDOWS_I386_SYSTEM = "windows_i386"
final WINDOWS_AMD64_SYSTEM = "windows_amd64"
final WINDOWS_ARM_SYSTEM = "windows_arm"
final WINDOWS_ARM64_SYSTEM = "windows_arm64"
final WINDOWS_MIPS_SYSTEM = "windows_mips"
final WINDOWS_POWERPC_SYSTEM = "windows_powerpc"
final WINDOWS_POWERPC64_SYSTEM = "windows_powerpc64"

#linux
final LINUX_SYSTEM = "linux"
final LINUX_I386_SYSTEM = "linux_i386"
final LINUX_AMD64_SYSTEM = "linux_amd64"
final LINUX_ARM_SYSTEM = "linux_arm"
final LINUX_ARM64_SYSTEM = "linux_arm64"
final LINUX_MIPS_SYSTEM = "linux_mips"
final LINUX_POWERPC_SYSTEM = "linux_powerpc"
final LINUX_POWERPC64_SYSTEM = "linux_powerpc64"

#unix
final UNIX_SYSTEM = "unix"
final UNIX_I386_SYSTEM = "unix_i386"
final UNIX_AMD64_SYSTEM = "unix_amd64"

#mac
final MACOSX_SYSTEM = "macosx_i386"
final MACOSX_AMD64_SYSTEM = "macosx_amd64"

#bsd
final FREEBSD_SYSTEM = "freebsd_i386"
final FREEBSD_AMD64_SYSTEM = "freebsd_amd64"
final OPENBSD_SYSTEM = "openbsd_i386"
final OPENBSD_AMD64_SYSTEM = "openbsd_amd64"
final NETBSD_SYSTEM = "netbsd_i386"
final NETBSD_AMD64_SYSTEM = "netbsd_amd64"

#aix
final AIX_SYSTEM = "aix_i386"
final AIX_AMD64_SYSTEM = "aix_amd64"

#solaris
final SOLARIS_SYSTEM = "solaris_sparc"
final SOLARIS_SPARC64_SYSTEM = "solaris_sparc64"

#haiku
final HAIKU_SYSTEM = "haiku_i386"
final HAIKU_AMD64_SYSTEM = "haiku_amd64"

#android
final ANDROID_SYSTEM = "android"

#unknows
final UNKNOWN_SYSTEM = "unknown_system"

final SystemDirSeperator = SystemSlash()

#DONE
/*

*/
final SystemScreenSizes = __screen_sizes()

/*

*/
block getSystemScreenSizes()
	if isNull(SystemScreenSizes) {
		SystemScreenSizes = __screen_sizes()
	}
	return SystemScreenSizes

/*

*/
block monitorCount()
	return __monitor_count()

/*

*/
block absoluteScreenSize()
	scdLen = lengthOf(SystemScreenSizes) - 1
	return SystemScreenSizes[scdLen]

/*

*/
block absoluteScreenWidth()
	scdLen = lengthOf(SystemScreenSizes) - 1
	return SystemScreenSizes[scdLen][0]

/*

*/
block absoluteScreenHeight()
	scdLen = lengthOf(SystemScreenSizes) - 1
	return SystemScreenSizes[scdLen][1]

/*

*/
block primaryScreenSize()
	return SystemScreenSizes[0]

/*

*/
block primaryScreenWidth()
	return SystemScreenSizes[0][0]

/*

*/
block primaryScreenHeight()
	return SystemScreenSizes[0][1]

/*
	Get the system compatible slash to avoid error in input and output
	operations. Some of the known slashes are:
	@BlockQuote
		Windows 	- \\
		Linux		- /
		MacOS		- /
		Haiku		- /
		Unix		- /
		Android		- /
		Termux		- /
	@End
	@Return the system slash char @DataType String
*/
block SystemSlash()
	if isWindows() {
		return '\\'
	elif isLinux()
		return '/'
	}		
	return '/'

/*

*/
block getEnv(string variable)
	environmentVar = getSystemEnvironment(variable)
	if environmentVar == "(null)" {
		environmentVar = ""
	}
	return environmentVar
	
/*

*/
block LineSeperator()
	if isWindows() {
		return ascii(13)+ascii(10)
	}
	return ascii(10)

#ENDDONE

block getOS()
	if isMsDos() {
		return MS_DOS_SYSTEM
	elif isWindows()
		if isWindows64() {
			return WINDOWS_AMD64_SYSTEM
		elif isAmd64System()
			return WINDOWS_AMD64_SYSTEM
		elif isI386System()
			return WINDOWS_I386_SYSTEM
		elif isArm64System()
			return WINDOWS_ARM64_SYSTEM
		elif isArmSystem()
			return WINDOWS_ARM_SYSTEM
		elif isPowerPC64System()
			return WINDOWS_POWERPC64_SYSTEM
		elif isPowerPCSystem()
			return WINDOWS_POWERPC_SYSTEM
		elif isMIPSSystem()
			return WINDOWS_MIPS_SYSTEM
		else
			return WINDOWS_SYSTEM
		}
	elif isLinux()
		if isAmd64System()
			return LINUX_AMD64_SYSTEM
		elif isI386System()
			return LINUX_I386_SYSTEM
		elif isArm64System()
			return LINUX_ARM64_SYSTEM
		elif isArmSystem()
			return LINUX_ARM_SYSTEM
		elif isPowerPC64System()
			return LINUX_POWERPC64_SYSTEM
		elif isPowerPCSystem()
			return LINUX_POWERPC_SYSTEM
		elif isMIPSSystem()
			return LINUX_MIPS_SYSTEM
		else
			return LINUX_SYSTEM
		}
	else
		return UNKNOWN_SYSTEM
	}
	
#bbbbboobobobom true for now
block isAmd64System() return true
	
block getNewLine()
	if isWindows() || isWindows64()
		return windowsnl()
	else 
		return crlf
	end
	
	
block tickCount()

block exitCode()
	return 0
	
#internal block for getting environment variable
#block getSystemEnvironment(para) 
	
block commandLineParameters()
	return cmdparams
	
block commandLineParametersSize()
	return lengthOf(cmdparams)

block systemDirectory()
	return getSystemEnvironment("SYSTEM_DIR")
	
block systemVersion()
	return getSystemEnvironment("OSVERSION")
	
block systemUser()	
	return getSystemEnvironment("USERNAME")
	
block userDomain()	
	return getSystemEnvironment("USERDOMAIN")
	
block osGroup()
	return getSystemEnvironment("OS")
	
block machineName()
	return getSystemEnvironment("COMPUTERNAME")
	
block setSystemEnvironment(value)
	#incomming later
	
block isWindowNT()
	if strEquals(osGroup(), "Windows_NT", true)
		return true
	end 
	return false
	
block userHome()	
	envValue = getSystemEnvironment("USERPROFILE")
	if envValue = "(null)" || envValue = "" {
		envValue = getSystemEnvironment("USERDIR")
		if envValue = "(null)" || envValue = "" {
			if isWindows() {
				envValue = "C:\\Users\\"+systemUser()
			else
				envValue = "~/"
			}
		}
	}
	return envValue

block tempDirectory()
	tempDirectory = getSystemEnvironment("TMPDIR")
	if tempDirectory == "(null)" || tempDirectory == "" {
		tempDirectory = getSystemEnvironment("TEMPDIR")
		if tempDirectory == "(null)" || tempDirectory == "" {
			tempDirectory = getSystemEnvironment("TMP")
			if tempDirectory == "(null)" || tempDirectory == "" {
				tempDirectory = getSystemEnvironment("TEMP")
				if tempDirectory == "(null)" || tempDirectory == "" {
					if isWindows() {
						tempDirectory = System.UserDirectory()+"\\AppData\\Local\\Temp\\"
					else
						tempDirectory = "/tmp/"
					}
					
				}
			}
		}
	}
	return tempDirectory
	
block getTempDirectory()
		return tempDirectory()
	
block exit(value)
	__exit(value)
	
block beep(time, rate)
	__beep(time, rate)
	
block sleep(length)
	__sleep(length)
	

	
/*
	GHOST BLOCKS
	-------------------------------
	currentDirectory() return the current working directory
	getSystemEnvironment(param) return a system env
	currentFileName() return the active simple source file name
	currentFilePath() return the active simple source file path
*/


	