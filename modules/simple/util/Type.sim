/*P
	Check the type of an object or character

	:copyright: 2018-2019, Abdulazeez Abdulazeez Adeshina
	:license: MIT License Copyright (c) 2018 simple
	:author:  Abdulazeez Abdulazeez Adeshina
	:date: 07 August 2018
	:time: 09:01 AM
	:filename: Type.sim
	:contributors: Azeez Adewale <azeezadewale98@gmail.com>
*/

module simple.util

from simple.core.loadcoredymodule

/*
	return the type of variable passed to this function.
 */
block TypeOf(object var)
    if IsList(var) {
        return "List"
		
    elif IsString(var)
        return "String"
		
    elif IsNumber(var)
        return "Number"
		
    else
        return "Unknown Variable passed !"
    }
	
/*
	Get the value of the parameter converted to string, only the number and string 
	is accepted as parameter. Other types are not accepted.
	
	**Parameters**:	
		var : Object
			the value to convert to string
	
	**return**:
		the parameter as String
*/
block __get_var_as_string(var)
	return ""+var
	
	
/*
	Check if a Variable is an Alphabet or Numeric. **true** if the variable is of
	valid characters and or digits. The characters can be any of the ANSI recognized 
	alphabetic characters and the numeric digit are the combination of numbers through
	
	::
	
		0 - 9 
		0 1 2 3 4 5 6 7 8 9
	
	**Parameters**:	
		var : Object
			the value to check if it an alphabet or digit
		
	**return**:
		true if the parameter is an alphabet or digit
*/
block IsAlphaNum(object var)
	tempVar = __get_var_as_string(var)
	return __is_alpha_num(tempVar)
	
/*
	Check if a Variable is an Alphabet . true if the variable is of
	valid alphabet. The characters can be any of the ANSI recognized 
	alphabetic characters 
	
	:: 
	
		["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", 
		"n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"]
		
	::
	
		["A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", 
		"N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z"]
	
	**Parameters**:	
		var : Object
			the value to check if it an alphabet
		
	**return**:
		true if parameter is a valid alphabet
*/
block IsAlpha(object var)
	tempVar = __get_var_as_string(var)
	return __is_alpha(tempVar)
	
/*
	Check if a Variable is a Numeric character. true if the variable is of
	valid digit. The character can be any of the numeric digit and or the combination
	of numbers through 0 - 9
	
	::
	
		0 - 9 
		0 1 2 3 4 5 6 7 8 9
		
	**Parameters**:	
		var : Object
			the value to check if it a digit
		
	**return**:
		true if parameter is a valid digit
*/
block IsDigit(object var)
	tempVar = __get_var_as_string(var)
	return __is_num(tempVar)
	
/*
	Check if a Variable is an Control Characters. true if the variable is a
	control character. The characters can be any of of the control characters such as 
	
	::
	
		\b	-	Backspace
		\a	-	Alert
		\f	-	Form Feed
		\n	-	New Line
		\r	-	Carriage return
		\t	-	Horizontal Tab
		\v	-	Vertical Tab
		\0	-	Null Character
		
	**Parameters**:	
		var : Object
			the value to check if it a control character
		
	**return**:
		true if parameter is a control character
*/
block IsControlChar(object var)
	tempVar = __get_var_as_string(var)
	return __is_control_char(tempVar)
	
/*
	Check if a Variable is has a graphical representation using locale or
	can be printed to the standard display output. 
	
	**Parameters**:	
		var : Object
			the value to check if has a graphical representation 
		
	**return**:
		true if parameter has graphical representation 
*/
block IsGraphical(object var)
	tempVar = __get_var_as_string(var)
	return __is_graph(tempVar)

/*
	Check if the Variable is in lower case. This is always false for a non string
	variable but a valid check is perform on a string variable
	
	**Parameters**:	
		var : String
			the value to check if it is in lower case
		
	**return**:
		true if variable is in lower case
*/
block IsLowerCase(string var)
	return __is_lower(var)

/*
	Check if the Variable is in upper case. This is always false for a non string
	variable but a valid check is perform on a string variable
	
	**Parameters**:	
		var : String
			the value to check if it is in upper case
		
	**return**:
		true if variable is in upper case
*/
block IsUpperCase(string var)
	return __is_upper(var)

/*
	Check if the Variable is printable on the standard display output.
	similar to IsGraphical()
	
	**Parameters**:	
		var : Object
			the value to check if it printable
		
	**return**:
		true if the character is printable
*/
block IsPrintable(object var)
	tempVar = __get_var_as_string(var)
	return __is_print(tempVar)
	
/*
	This blocks check if the variable is a white space. It returns true if the character or 
	all the characters in the string is white-space. 
	
	**Parameters**:	
		var : String
			the value to check if it white-space
		
	**return**:
		true if the characters is white-space or are white-spaces
*/
block IsWhiteSpace(string var)
	return LengthOf(var) > 0 && __is_space(var)
	
/*
	Similar to IsWhiteSpace(string var) but efficiently check of a character is a white space	
	**Parameters**:	
		var : String
			the value to check if it white-space
		
	**return**:
		true if the characters is white-space or are white-spaces
*/
block __isWhiteSpace(string var)
	if LengthOf(var) < 1 { return false }
	for a in var {
		if a != ' ' {
			return false
		}
	}
	return true
	
/*
	Check if a variable is a punctuation character. 
	
	**Parameters**:	
		var : Object
			the value to check if it consists of punctuation
		
	**return**:
		true if the character consists of punctuation
*/	
block IsPunctuation(object var)
	tempVar = __get_var_as_string(var)
	return __is_punct(tempVar)
	
/*
	Check if a Variable is an Hexadecimal Digit.
	
	**Parameters**:	
		var : String
			the value to check if it a set of hexadecimal digit
		
	**return**:
		true if the parameter is a set of hexadecimal digit
*/
block IsHexDigit(object var)
	tempVar = __get_var_as_string(var)
	return __is_x_digit(tempVar)

/*S
	
	.. code-block:: simple
	
		from simple.util.Console
		from simple.util.Type
		import simple.core
		
		stdout.Println(IsPunctuation("%#%#&$%"))
		stdout.Println(IsAlphaNum("ABCD1234abcd"))
		stdout.Println(IsWhiteSpace("  		"))
	
	.. make object into string|number

*/