
/*

*/
from simple.core.Object
from simple.graphics.Rectangle

/*

*/
module simple.graphics

/*

*/
class Dimension : Object

    /*

    */
    Width = 0


    /*

    */
    Height = 0

    /*

    */
    block Init(params...)
        paramsLen = LengthOf(params)

        if paramsLen == 1 {
            if !IsNull(params[0]) and IsList(params[0]) {
                _param = params[0] 
                params = _param
                paramsLen = LengthOf(params)
            }
        }
        if paramsLen == 0 {
        elif paramsLen == 1
            object = params[0]
            if Isinstance(object) {
                Width = object.Width
                Height = object.Height
            else
                Throw(self,"The parameter is not valid. Expecting instance of Dimension for Dimension Width and Height. Found "+ObjectType(object))
            }
        elif paramsLen == 2
            width = params[0]
            height = params[1]
            if IsNumber(width) and IsNumber(height) {
                Width = Floor(width)
                Height = Floor(height)
            else
                Throw(self,"The parameter is not valid. Expecting Number as Dimension Width and Height. Found " + ObjectType(width) + " and " + ObjectType(height))
            }
        else
            Throw(self,"Initializing Dimension with invalid length of parameters")
        }

        return self


    /*

    */
    block GetWidth()
        return Width

    /*

    */
    block GetHeight()
        return Height

    /*

    */
    block SetHeight(height)
        if IsNumber(height) {
            Height = Floor(height)
        else
            Throw(self,"Invalid parameter, Expecting (Number). Found (" + ObjectType(height) + ")")
        }

    /*

    */
    block SetWidth(width)
        if IsNumber(width) {
            Width = Floor(width)
        else
            Throw(self,"Invalid parameter, Expecting (Number). Found (" + ObjectType(width) + ")")
        }
        

    /*

    */
    block GetDimension()
		dimension = new Dimension(Width,Height)
        return dimension

    /*

    */
    block SetDimension(params...)
        Dimension(params)

    /*

    */
    block ChangeDimension(width, height)
        Width = Floor(width)
        Height = Floor(height)

    /*

    */
    block ToRectangle()
		rectangle = new Rectangle(self)
        return rectangle

	/*

	*/
	block Operator(op,value)
		switch op {
			case "=="
				return Equals(value)
			case "!="
				return !Equals(value)
            case "+"
                if Isinstance(value) {
                    width = Width + value.Width
                    height = Height + value.Height
                    Width = Floor(width)
                    Height = Floor(height)
                else
                    Throw(self,"Using operator with values of incorrect type : "+op)
					return null
                }
				return self
            case "-"
                if Isinstance(value) {
                    width = Width - value.Width
                    height = Height - value.Height
                    Width = Floor(width)
                    Height = Floor(height)
                else
                    Throw(self,"Using operator with values of incorrect type : "+op)
					return null
                }
				return self
            case "/"
                if Isinstance(value) {
                    width = Width / value.Width
                    height = Height / value.Height
                    Width = Floor(width)
                    Height = Floor(height)
                else
                    Throw(self,"Using operator with values of incorrect type : "+op)
					return null
                }
				return self
            case "*"
                if Isinstance(value) {
                    width = Width * value.Width
                    height = Height * value.Height
                    Width = Floor(width)
                    Height = Floor(height)
                else
                    Throw(self,"Using operator with values of incorrect type : "+op)
					return null
                }
				return self
		}
		return super.Operator(op, value)

    /*

    */
    block Equals(object)
		if !Isinstance(object) {
			return false
		}
		return (Width == object.Width and Height == object.Height)

    /*

    */
    block ToString()
        return "[" + Absolutename() + ":Width=" + Width + ",Height=" + Height + "]"




