 
/* 
	Copyright (c) 2018 Azeez Adewale <azeezadewale98@gmail.com> 
	MIT License Copyright (c) 2018 SIMPLE 

*/

/*
	MODULAR 
	This is a simple environment for installing new modules and environments

*/

from simple.util.Console
from simple.core.String
from simple.core.List
from simple.internet.Download
from simple.io.File
from simple.io.Directory
from parser.json.JsonObject
from simple.security.Hash
from archive.zip.Zip 
from simple.system.System
from simple.system.SimpleX
from simple.util.Conversion
from web.functions.Methods

monkeyFace = '
			    __,__
		    .--.  .-"	"-.  .--.
		 / ..  \/ .-.  .-.  \/ ..  \
		| |  `|  /    Y    \  |`  | |
		| \   \  \  0 | 0  /  /   / |
		 \  `- ,\.-"""""""-./, -`  /
		   ``-`  /_  ^ ^  _\  `-``
				| \._   _./ |
			\  \ `~` /  /
			 `._`-=-`_.`
				`-----`
	'

modularTitle = ""

simpleLangCgiUrl = "http://localhost/simple-lang.io/" #"https://simple-lang.sourceforge.io/simple-web/cgi-bin/"
simpleLangHost = "https://simple-lang.sourceforge.io/simple-web/cgi-bin/simple-web/index.sim"
verifierUrl = simpleLangHost+"?page=Packages%20Index&sub_page=Verifier"
addPackageUrl = simpleLangHost+"?page=Packages%20Index&sub_page=Add%20New%20Package"
simpleUpdateUrl = simpleLangCgiUrl+"api/Upgrade.sim"
packageUrl = simpleLangCgiUrl+"api/PackageInstaller.sim"
simpleDistDirectory = SimpleDir()
tempDirectory = GetTemporaryDirectory()
modulesDirectory = SimpleModulesDir()
githubDirectory = modulesDirectory + "/github.com/"
documentationDirectory = SimpleDocDir()
dynamicModulesDirectory = SimpleDyModulesDir()

deleteTemp = true
showInfo = false
askPermission = true
packageList = null
isShell = false
cmdlen = LengthOf(cmdparams) - 1
type = ""
package = ""
initPackage = ""
version = "latest"
ostype = "auto-detect"

#error messages
PLATFORM_UNAVAILABLE = "This package is not available for your operating system" 
UNKNOWN_ERROR = "The status of this package cannot be defined"+crlf+"Visit their website : "
STALL_PACKAGE = "This package is pending verification. "+crlf+"If you wish to join package verifiers visit : "+verifierUrl
INSTALLATION_UNATHORIZED = "Installation not authorized "+crlf+"DONE"

block main() 
	ExecuteModular(cmdlen,cmdparams)

block ExecuteModular(cmdlen,cmdparams)
	if cmdlen <= 0 { DisplayHelp() }
	for a = 0 to cmdlen {
		if StrEquals(cmdparams[a],"--shell",false) or StrEquals(cmdparams[a],"-su",false) if !isShell { isShell = true Shell() } break
		elif StrEquals(cmdparams[a],"--help",false) or StrEquals(cmdparams[a],"-h",false) or StrEquals(cmdparams[a],"--h",false) DisplayHelp()
		elif StrEquals(cmdparams[a],"--about",false) or StrEquals(cmdparams[a],"-a",false) or StrEquals(cmdparams[a],"--a",false) DisplayAbout()
		#Module or Environment
		elif StrEquals(cmdparams[a],"--env",false) or StrEquals(cmdparams[a],"-e",false) type = "environment"
		elif StrEquals(cmdparams[a],"--mod",false) or StrEquals(cmdparams[a],"-m",false) type = "module"
		#Version and Attribute
		elif StrEquals(cmdparams[a],"-v",false) or StrEquals(cmdparams[a],"--version",false) version = cmdparams[a++]  
		elif StrEquals(cmdparams[a],"-os",false) or StrEquals(cmdparams[a],"--system",false) ostype = cmdparams[a++]  
		elif StrEquals(cmdparams[a],"--upgrade",false) or StrEquals(cmdparams[a],"--update",false) or StrEquals(cmdparams[a],"-u",false) type = "upgrade" 
		#Others
		elif StrEquals(cmdparams[a],"-p",false) or StrEquals(cmdparams[a],"--path",false) simpleDistDirectory = cmdparams[a++] @simpleDistDirectory
		elif StrEquals(cmdparams[a],"-t",false) or StrEquals(cmdparams[a],"--temp",false) deleteTemp = false
		elif StrEquals(cmdparams[a],"-s",false) or StrEquals(cmdparams[a],"--show-info",false) showInfo = true
		elif StrEquals(cmdparams[a],"-y",false) or StrEquals(cmdparams[a],"--yes",false) askPermission = false
		else package = cmdparams[a] end
	}
	package = ReplaceStr(package,"\","/")
	if StrContains(package,"github.com") or StrContains(package,"/") {
		GrabFromGithub(package)
		return 
	}
	if ostype == "auto-detect" {
		ostype = GetOS()
	}
	if type == "upgrade" {
		UpgradeSimpleDistro()
	else 
		@"Preparing to install package: "+package+" - "+type+" "+version
		initPackage = package
		depConf = new File(modulesDirectory+"/modules-dependencies.conf")
		if !depConf.Exists() { 
			@"error occur modules configuration file cannot be found" 
			@"module install failed. "
			if isShell { Shell() else __exit__ } 
		}
		ExecuteCode(depConf.ReadFileAsString())
		if type == "environment" { packageList = environmentList else packageList = modulesList }
		ModuleEnviron(depConf,packageList)
	}
	if isShell { Shell() else __exit__ }
	
block GrabFromGithub(package)
	if askPermission == true { askPermission = false }
	
	packageName = LastStrAfterChar(package,"/")
	branch_tag = "master"
	packageType = "master"
	downloadUrl = null
	if StrContains(packageName,":") {
		pSplit = StrSplit(packageName, ":")
		if LengthOf(pSplit) > 2 {
			Throw("Invalid github repository. Check the ':' count. : "+package)
		}
		packageName = pSplit[0] 
		package = ReplaceStr(package,packageName+":"+pSplit[1],pSplit[0])
		package = RemoveStr(package,":")
		lastPart = pSplit[1]
		
		pSplit1 = StrSplit(lastPart, "-")
		start = 1
		preB = ToLowerCase(pSplit1[0])
		if preB == "version" or preB == "tag" {
			packageType = "tag"
		elif preB == "branch" 
			packageType = "branch"
		else
			value = ReplaceStr(lastPart,".","")
			start = 0
			if IsDigit(value) {
				packageType = "tag"
			else
				packageType = "branch"
			}
		}
		branch_tag = ""
		for a = start to LengthOf(pSplit1) - 1 {
			branch_tag += pSplit1[a]
			if a < LengthOf(pSplit1) - 1 {
				branch_tag += "-"
			}
		}
	}
	if branch_tag == "master" {
		packageType = "master"
	}	
	stdout.Println("Preparing to grab module from github...")
	stdout.Println("installing module from github might result to dependencies issues")
	if !StrContains(package,"github.com") {
		package = "https://github.com/" + package
	}	
	downloadUrl = package+"/archive/" + branch_tag + ".zip"
	downloadablePackage = [
		:name = packageName,
		:download_url = downloadUrl,
		:branch = branch_tag 
	] 
	downloadedPackage = new Download(downloadablePackage[:download_url])
	downloadedPackage.SaveLocation(tempDirectory+Hash(downloadablePackage[:name])+branch_tag+".zip")
	downloadedPackage.Execute() 
	if downloadedPackage.Exists() {
		downloadedPackageZip = new Zip(downloadedPackage.AbsolutePath(),"r")
		extractedPackage = new Directory(tempDirectory+Hash(downloadablePackage[:name]+branch_tag))
		#TODO : Create method to check if zip is a valid archive  #throw if try to extract invalid archive
		downloadedPackageZip.ExtractAll(extractedPackage.GetPath())  
		extractedPath = null 
		try {
			extractedPath = extractedPackage.ListDirectories()[0].AbsolutePath()
		catch 
			stderr.Println("the module installation failed. Check package name")
			if isShell { Shell() else __exit__ }
		}
		if __exists(extractedPath+"/install.sim") {
			modularCode = __readfile(extractedPath+"/install.sim")
			ExecuteCode(modularCode)
			if !__is_local_variable("modular") {
				modular = []
			}
			downloadablePackage[:title] = modular[:title]
			downloadablePackage[:version] = modular[:version]
			downloadablePackage[:date] = modular[:date]
			downloadablePackage[:license] = modular[:license]
			downloadablePackage[:website] = modular[:website]
			downloadablePackage[:dynamicmodules] = modular[:dynamic_modules]
			downloadablePackage[:module] = modular[:module]
			downloadablePackage[:doc] = modular[:doc]
			if modular[:pre_install_system] != null {
				System(modular[:pre_install_system])
			}
			if modular[:module] != null and __dir_exists(extractedPath+downloadablePackage[:module]) {
				MoveContent(extractedPath+downloadablePackage[:module],modulesDirectory+"/"+modular[:module])
				stdout.Println("the module "+downloadablePackage[:name]+" has been installed")
			else 
				if askPermission {
					stdout.Print("do you wish to install the module in the github.com folder : ") read response
				else
					response = "y"
				}
				if response == "yes" or response == "y" {
					MoveContent(extractedPath+downloadablePackage[:module],githubDirectory)
					ClearGithubResidual(githubDirectory)
					#RecordModuleInstallation(downloadablePackage) #do not record since it from github
					stdout.Println("the module "+downloadablePackage[:name]+" has been installed")
				else 
					stderr.Println("the module "+downloadablePackage[:name]+" installation cancelled")
				}
			}
			if modular[:doc] != null and __dir_exists(extractedPath+downloadablePackage[:doc]) {
				MoveContent(extractedPath+downloadablePackage[:doc],documentationDirectory)
			}
			if modular[:post_install_system] != null {
				System(modular[:post_install_system])
			}
		else 
			stdout.Print("the module does not have an install.sim script \n")
			if askPermission {
				stdout.Print("do you wish to install the module in the github.com folder : ") read response
			else
				response = "y"
			}
			if response == "yes" or response == "y" {
				MoveContent(extractedPath+downloadablePackage[:module],githubDirectory)
				ClearGithubResidual(githubDirectory)
				#RecordModuleInstallation(downloadablePackage) #do not record since it from github
				stdout.Println("the module "+downloadablePackage[:name]+" has been installed")
			else 
				stderr.Println("the module "+downloadablePackage[:name]+" installation cancelled")
			}
		}
		if isShell { Shell() else __exit__ }
	}

block ModuleEnviron(depConf,packageList)
	localPackage = null
	@"checking locally installed version of "+package+"..."
	pkgLen = LengthOf(packageList) - 1
	for a = 0 to pkgLen {
		if packageList[a][:name] == package {
			localPackage = packageList[a]
			@"local package: "+package+" "+type+" "+localPackage[:version]
			if localPackage[:version] == version {
				@"installed "+type+" "+package+" is up to date"
				@"Modular operation completed"
				if isShell { Shell() else __exit__ }
			}
		}
	}
	#loading bar here
	latestPackage = LoadPackageAndDep()
	if IsList(localPackage) && !IsString(localPackage[0]) {
		if latestPackage[:version] == localPackage[:version] {
			@package+" "+type+" is up to date"
			@"Modular operation completed"
			if isShell { Shell() else __exit__ }
		}
	}
	@"Packages ("+(latestPackage[:supporting_modules_count]+2)+")	"+package
	for a = 0 to latestPackage[:supporting_modules_count] {
		@"		"+latestPackage[:supporting_modules][a+1]
	}
	allDownloadablePackages = GetSupportingModulesInfo(latestPackage)
	DownloadPackages(allDownloadablePackages)
	
block DownloadPackages(allDownloadablePackages)
	#@crlf+"Total Download Size: "+allDownloadablePackages[:downloadSize]
	if askPermission {
		display " :: Do you want to proceed [y/n] " read response @""
	else 
		response = "y"
	}
	if response == "y" {
		for a = 0 to LengthOf(allDownloadablePackages) - 1 {
			DownloadPackage(allDownloadablePackages[a])
		}
	else
		@"Stopping upgrade..."
		if isShell { Shell() else __exit__ }
	}
	
	
block DownloadPackage(downloadablePackage)
	if showInfo {
		@crlf+" :: "+downloadablePackage[:name]
		@" :: "+downloadablePackage[:status] 
		@" :: "+downloadablePackage[:description]
		@" :: "+downloadablePackage[:author]
		@" :: "+downloadablePackage[:version]
		@" :: "+downloadablePackage[:license]
		@" :: "+downloadablePackage[:website]
		@" :: "+downloadablePackage[:date]
	}
	downloadedPackage = new Download(downloadablePackage[:download_url])
	downloadedPackage.SaveLocation(tempDirectory+Hash(downloadablePackage[:name])+".zip")
	downloadedPackage.Execute()
	if downloadedPackage.Exists() {
		downloadedPackageZip = new Zip(downloadedPackage.AbsolutePath(),"r")
		extractedPackage = new Directory(tempDirectory+Hash(downloadablePackage[:name]))
		downloadedPackageZip.ExtractAll(extractedPackage.GetPath())
		tempDyModuleDir = new Directory(extractedPackage.GetPath()+"/dynamic_modules/")
		downloadablePackage[:dynamic_modules] = GetPackageDynamicModules(tempDyModuleDir)
		if extractedPackage.Exists() {
			@"installing "+downloadablePackage[:name]+" documentation..."
			MoveContent(extractedPackage.GetPath()+"/docs/",documentationDirectory)
			@"installing "+downloadablePackage[:name]+" dynamic modules..."
			MoveContent(extractedPackage.GetPath()+"/dynamic_modules/",dynamicModulesDirectory)
			@"installing "+downloadablePackage[:name]+" module..."
			MoveContent(extractedPackage.GetPath()+"/modules/",modulesDirectory)
		}
		installedModule = new Directory(modulesDirectory+downloadablePackage[:name])
		if installedModule.Exists() {
			RecordModuleInstallation(downloadablePackage)
		else
			@"failed to install "+downloadablePackage[:name]+" "+type+" "+version
			if isShell { Shell() else __exit__ }
		}
		if deleteTemp {
			downloadedPackage.Delete()
			extractedPackage.Delete()
		}
	}

block GetPackageDynamicModules(tempDyModuleDir)
	if !tempDyModuleDir.Exists() {
		return []
	}
	dynamicModuleSize = LengthOf(tempDyModuleDir.ListFiles())
	if dynamicModuleSize == 0 {
		return "none"
	else
		dyMoudlesList = []
		for a = 0 to dynamicModuleSize {
			__add_to_list(dyMoudlesList,tempDyModuleDir.ListFiles()[a].GetName())
		}
		return dyMoudlesList
	}
	
block MoveContent(oldPath,newFolder)
	tempDir = new Directory(oldPath)
	if tempDir.Exists() {
		tempDir.ForceMoveContentTo(newFolder)
	}

block RecordModuleInstallation(downloadedPackage)
	downloadedPackageList = [:name = downloadedPackage[:name],
		:title = downloadedPackage[:title],
		:version = downloadedPackage[:version],
		:date = downloadedPackage[:date],
		:license = downloadedPackage[:license],
		:website = downloadedPackage[:website],
		:dynamicmodules = downloadedPackage[:dynamic_modules]
	] 
	__add_to_list(packageList,downloadedPackageList)
	list = new List(downloadedPackageList)
	depConf = new File(modulesDirectory+"/modules-dependencies.conf")
	newDep = ReplaceStr(depConf.ReadFileAsString(),"/* NEWMODULE */",","+nl+tab+list.ToString()+"/* NEWMODULE */")
	if depConf.Exists() {
		depConf.Write(newDep)
	}

block GetSupportingModulesInfo(initialPackage)
	allDownloadablePackages = [initialPackage]
	for a = 0 to initialPackage[:supporting_modules_count] {
		tempSupportModules = initialPackage[:supporting_modules]
		package = tempSupportModules[a]
		supportPackage = LoadPackageAndDep()
		if supportPackage[:value] == "failed" {
			@package+" not found in the index"
			@"if you owned "+package+" module simply add it to the simple-lang package index at "
			@addPackageUrl
		else
			allDownloadablePackages+supportPackage
		}
	}
	allDownloadablePackages[:downloadSize] = "6.04 MB"
	return allDownloadablePackages
	
block LoadPackageAndDep()
	latestPackage = []
	packageJson = Download(packageUrl+"?package="+package+"&type="+type+"&version="+version+"&os="+ostype)
	if packageJson == null {
		@"Internet connection is required to install "+package+" "+type+" package"
		if isShell { Shell() else __exit__ }
	elif StrContains(packageJson, "500 Internal Server Error")
		@"The server is experiencing a down time please report to <whatisthis914@gmail.com>"
		if isShell { Shell() else __exit__ }
	elif StrContains(packageJson, "Not Found") 
		@"The update link is broken please report this to <whatisthis914@gmail.com>"
		if isShell { Shell() else __exit__ }
	elif !StrContains(packageJson, '"value":')
		@"The package address is incorrect please report to <whatisthis914@gmail.com>"
		if isShell { Shell() else __exit__ }
	}
	packageObject = new JsonObject(packageJson)
	latestPackage[:value] = packageObject.GetObject("value").GetStringContent()
	latestPackage[:message] = packageObject.GetObject("message").GetStringContent()
	if latestPackage[:value] == "failed" {
		if package != initPackage {
			return latestPackage
		}
		@latestPackage[:message]
		@"if you owned the module simply add it to the simple-lang package index at "
		@addPackageUrl
		if isShell { Shell() else __exit__ }
	}
	if package == initPackage { @"resolving dependencies..." }
	latestPackage[:status] = packageObject.GetObject("status").GetStringContent()
	latestPackage[:name] = packageObject.GetObject("name").GetStringContent()
	latestPackage[:title] = packageObject.GetObject("title").GetStringContent()
	latestPackage[:description] = packageObject.GetObject("description").GetStringContent()
	latestPackage[:author] = packageObject.GetObject("author").GetStringContent()
	latestPackage[:version] = packageObject.GetObject("version").GetStringContent()
	latestPackage[:license] = packageObject.GetObject("license").GetStringContent()
	latestPackage[:website] = packageObject.GetObject("website").GetStringContent()
	latestPackage[:date] = packageObject.GetObject("date").GetStringContent()
	latestPackage[:download_url] = packageObject.GetObject("download_url").GetStringContent()
		latestPackageSM = packageObject.GetObject("supporting_modules").GetStringContent()
		latestPackageSM = StringSplit(latestPackageSM," ")
	latestPackage[:supporting_modules] = latestPackageSM
	latestPackage[:supporting_modules_count] = LengthOf(latestPackageSM)
	
	return latestPackage
	
	
block UpgradeSimpleDistro()
	@"Preparing to upgrade simple-lang, environments and modules"
	@"Checking installed simple-lang version..."
	localVersion = GetSimpleVersion()
	@"Installed version: "+localVersion 
	ostype = EncodeUrl(GetOS())
	upgradeJson = Download(simpleUpdateUrl+"?os="+ostype)
	if upgradeJson == null {
		@"Internet connection is required to upgrade simple-lang"
	elif StrContains(upgradeJson, "500 Internal Server Error")
		@"The server is experiencing a down time please report to <whatisthis914@gmail.com>"
		if isShell { Shell() else __exit__ }
	elif StrContains(upgradeJson, "Not Found") 
		@"The upgrade link is broken please report this to <whatisthis914@gmail.com>"
		if isShell { Shell() else __exit__ }
	elif !StrContains(upgradeJson, '"value"')
		@"The upgrade address is incorrect please report to <whatisthis914@gmail.com>"
		if isShell { Shell() else __exit__ }
	else 
		upgradeObject = (new JsonObject(upgradeJson))
		upgradeValue = upgradeObject.GetObject("value").GetStringContent()
		if upgradeValue == "failed" {
			@upgradeObject.GetObject("message").GetStringContent()
			if isShell { Shell() else __exit__ }
		}
		latestVersion = upgradeObject.GetObject("latest_version").GetStringContent()
		latestSize = upgradeObject.GetObject("download_size").GetStringContent()
		latestDownloadUrl = upgradeObject.GetObject("download_url").GetStringContent()
		latestCodename = upgradeObject.GetObject("code_name").GetStringContent()
		latestExtensionType = upgradeObject.GetObject("file_extension").GetStringContent()
		@"Latest version: "+latestVersion
		if localVersion == latestVersion {
			@"Your simple-lang installation is up to date"
			if isShell { Shell() else __exit__ }
		else 
			@"Total Download Size: "+latestSize+crlf
			if askPermission {
				display " :: Do you want to proceed [y/n] " read response @""
			else 
				response = "y"
			}
			if response == "y" {
				@"Downloading simple-lang: "+latestCodename
				downloadedFile = Download(latestDownloadUrl)
				latestSimple = new File(simpleDistDirectory+Hash(latestCodename)+"."+latestExtensionType) #replace with temp folder
				latestSimple.Write(downloadedFile)
				if latestSimple.Exists() {
					latestSimpleZip = new Zip(latestSimple.AbsolutePath(), "r")
					@"Extracting simple-lang s"+latestVersion+" into "+simpleDistDirectory
					latestSimpleZip.ExtractAll(simpleDistDirectory+"s"+latestVersion)
					#latestSimpleZip.CloseZip()
					latestInstalledDir = new Directory(simpleDistDirectory+"s"+latestVersion)
					if latestInstalledDir.Exists() {
						@"simple-lang upgraded from "+localVersion+" to "+latestVersion
					}
					RemoveTempFiles([latestSimple])
				else
					@"Upgrade failed. Stopping upgrade"
				} 
			else
				@"Stopping upgrade..."
				if isShell { Shell() else __exit__ }
			}
		}
	}
	
block ClearGithubResidual(githubDirectory)
	dir = new Directory(githubDirectory) 
	RemoveTempFiles(dir.ListFiles())
	
block RemoveTempFiles(files) 
	if deleteTemp {
		for a = 0 to LengthOf(files) - 1 { 
			if files[a].Exists() { files[a].Delete() }
		}
	}
	
block DisplayMessage(msg)
	@msg

block DisplayHelp()
	#@ monkeyFace
	help = "
usage:  modular [OPTIONS] [PACKAGE]

[PACKAGE] : the package to be installed or updated
[OPTION] : Option passed to the modular program.

The OPTIONS include: 
	-h    --help		Displays the help message.
	-su   --shell		Opens the modular Shell (or repl).
	-e    --env             Install an environment.
	-m    --mod             Install a module.
	-v    --version      	Specify the version of package to download after the flag.
	-os   --system       	Specify the operating system version of package to install.
	-u    --upgrade    	Upgrade and/or update the version of simple-lang on your computer.
	-p    --path            Path to simple-lang's directory if installed in a different place.
	-t    --temp           	Delete temp files.
	-s    --show-info 	Display processes currently carried out by modular.
	-y    --yes		Don't request permissions while installing packages
	"
	 display help if isShell { Shell() else __exit__ }
	

block DisplayAbout()
	About = "

	Modular, is SIMPLE-LANG's package manager and Distro updater. It will serve as a system program that helps to install packages
	from the modules repo / SIMPLE-LANG's archive. It'll also update the version of simple-lang installed on your system without you
	having to install directly from source. It is built and maintained by SIMPLE-LANG's community and it's open source. Feel free to contribute to it.
	
	"
	display About __exit__

block Shell()
	while true 
		Printfc(stdout, ConsoleColor.GREEN(), modularTitle)
		Printfc(stdout, ConsoleColor.GREEN(), "simple-lang.modular $")
		read command
			if command == "exit" || command == "q" {
			__exit__
		}
		cmdparamsl = StringSplit(command," ")
		cmdlenl = LengthOf(cmdparamsl)
		ExecuteModular(cmdlenl,cmdparamsl)
	end

block GetTemporaryDirectory()
	tempDirectory = GetTempDirectory()
	tDirectory = new Directory(tempDirectory+"/.simple_env/modular/")
	tDirectory.Create()
	return tDirectory.GetPath()
	
/*
Ask for permission in cases where you are not a top privilege user

*/
	
	