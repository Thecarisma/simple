/*

*/
/*
	Update simple-lang over JSON Api (supplementary). Only update
	minor such as module, environments, dynamic modules and 
	documentation. It does not update the simple executable and 
	Libraries (dll, so, dylib, a) and the includes files. 
	Update can happen in background except for the dynamic 
	modules since update can fail if they are in use
*/

from parser.json.JsonParser
from archive.zip.Zip
from simple.net.Download
from simple.util.Console
from simple.system.SimpleX
import simple.core
import simple.io


block main()
	if !__file_exists("./suplement.json") {
		stdout.Println("The updater file 'suplement.json' file does not exist. exiting")
		Exit(1)
	}
	localJson = new JsonParser(__read_file(SimpleResDir()+"/suplement.json"))
	localJson = localJson.Parse()
	installDir = localJson["InstallationDir"].Value
	
	if installDir == "$EXEC_DIR" {
		installDir = SimpleDir()
	}
	updateFile = new Download(localJson["UpdateJsonAddress"].Value,GetTmpDirectory()+"/update_file.json") {
		if !Fetch() {
			stdout.Println("Update failed")
			Exit(2)
		}
	}
	updateJson = new JsonParser(updateFile.ReadAllString())
	updateJson = updateJson.Parse()
	
	if !CompareVersion(localJson["Version"].Value, updateJson["Version"].Value) {
		stdout.Println("Your local version is up to date")
		return		
	}
	stdout.Printf("preparing to update program...")
	updates = updateJson.Get("Updates").Value
	platform = "Windows"
	if IsLinux() {
		platform = "Linux"
	}
	for update in updates {
		stdout.Printf("\r%s\rupdating %s...", StrCopy(" ", 40), update.Get("Name").Value)
		if update.Get("Type").Value == "zip" {
			name = update.Get("Name").Value
			path = update.Get(platform).Value.Get("Installation Path").Value
			stdout.Printf("\r%s\rupdating %s, downloading...", StrCopy(" ", 40), name)
			remoteZip = new Download(update.Get(platform).Value.Get("Update Url").Value, GetTmpDirectory()+name+".zip") {
				if !Fetch() {
					stdout.Printf("\r%s\rupdating %s, downloading...(failed)", StrCopy(" ", 40), name)
					break
					Exit(3)
				}
				zip = new Zip(GetTmpDirectory()+name+".zip", "r") {
					Extract(installDir + "/"+path )
				}
			}
			stdout.Print("(done)")
			
		elif update.Get("Type").Value == "link" 
			stdout.Print("(done)")
			System('start "" "'+update.Get(platform).Value.Get("Update Url").Value+'" ')
			
		}
	}
	localJson["Version"].Value = updateJson["Version"].Value
	__write_file(SimpleResDir()+"/suplement.json", localJson.ToString())
	
block CompareVersion(localVersion, updateVersion)
	if LengthOf(localVersion) < LengthOf(updateVersion) {
		return true
	}
	localV = StrSplit(localVersion,'.')
	localVLen = LengthOf(localV) - 1
	updateV = StrSplit(updateVersion,'.')
	updateVLen = LengthOf(updateV) - 1
	#stdout.Printf("%o, %o\n", localV, updateV)
	if localVLen < updateVLen {
		return true
	}
	for a = 0 to localVLen {
		if localV[a] < updateV[a] {
			return true
		}
	}	
	return false 
	
block GetTmpDirectory()
	tempDirectory = GetTempDirectory()
	tDirectory = new Directory(tempDirectory+"/.simple_env/updater/")
	if !tDirectory.Exists() {
		tDirectory.Create()
	}
	return tDirectory.AbsolutePath + SystemSlash()
	
	