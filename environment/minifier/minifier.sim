#this is out
/* 
	Copyright (c) 2018 Azeez Adewale <azeezadewale98@gmail.com> 
	MIT License Copyright (c) 2018 simple-lang
*/

/* 
 * @Filename - minifier.sim
 * @Author - Azeez Adewale
 * @Date - 09 August 2018
 * @Time - 10:55 PM
 */

from simple.io.File
from simple.debugging.Throw 
from simple.core.String
from simple.util.Type
from simple.util.Console

skipRequest = false
 
block main()
	sourceFile = null 
	sourceFilePath = null
	sourceFileContent = null 
	cmdparamsLen = lengthOf(cmdparams) - 1
	if cmdparamsLen <= 0 { help() }
	for a = 0 to cmdparamsLen {
		param = cmdparams[a]
		if param == "-s" or param == "--s" or param == "--source" { 
			if a < cmdparamsLen {
				sourceFilePath = cmdparams[a++] 
			else
				help()
			}
		elif param == "-y" or param == "--y" or param == "--yes" skipRequest = true
		else }
	}
	
	if !isNull(sourceFilePath) {
		sourceFile = new Path(sourceFilePath)
		if sourceFile.isDirectory() {
			minifySourceDir(sourceFile.toDirectory())
		elif sourceFile.isFile()
			minifySourceFile(sourceFile.toFile())
		else 
			throw("Invalid simple source : " + sourceFilePath)
		}
		__exit__
		if sourceFile.exists() {
			
		else
			throw(sourceFile.absolutePath()+" : does not exists")
		}
		
	}
	
block minifySourceDir(sourceDir)
	files = sourceDir.listFiles()
	filesLen = lengthOf(files) - 1
	for b = 0 to filesLen {
		minifySourceFile(files[b])
	}
	dirs = sourceDir.listDirectories()
	dirsLen = lengthOf(dirs) - 1
	for b = 0 to dirsLen {
		@"moving into directory : "+dirs[b].absolutePath()
		minifySourceDir(dirs[b])
	}
	
block minifySourceFile(sourceFile)
	if !strEndsWith(sourceFile.Name,".sim") {
		@sourceFile.Name+" : not a simple source file (*.sim) skipping..."
		return
	}
	if !skipRequest {
		display sourceFile.Name+" : do you want to minify this file? " read res
		if res != "y" and res != "yes" {
			return
		}
	}
	source = " "+sourceFile.readAllString() + " "
	if strLineCount(source) < 1 {
		@sourceFile.Name+" : already minified"
		return
	}
	display sourceFile.Name+" : minification starting..."
	minifiedSource = ""
	TOKEN_IDENTIFIER =  0 TOKEN_MULTILINE_COMMENT = 1 TOKEN_LITERAL_1 = 2 TOKEN_LITERAL_2 = 3
	type = TOKEN_IDENTIFIER
	sourceLen = lengthOf(source) - 2
	for i = 0 to sourceLen {
		switch type {
			case TOKEN_IDENTIFIER
				if source[i] == tab or isNewLine(source[i]) {
					if isWhiteSpace(source[i+1]) or (isPunctuation(source[i+1]) and source[i+1] != '_' and source[i+1] != '$' ) {
						minifiedSource += "" 
					else
						minifiedSource += " " 
					}
				elif source[i] == '/' and source[i+1] == '*' i++ type = TOKEN_MULTILINE_COMMENT
				elif source[i] == '"'  minifiedSource+= '"' type = TOKEN_LITERAL_1
				elif source[i] == "'"  minifiedSource+= "'" type = TOKEN_LITERAL_2
				elif source[i] == "#" and source[i+1] != '"' 
					while source[i+1] != cr and source[i+1] != nl and source[i+1] != crlf {
						if i < sourceLen {
							i++
						else 
							
						}
					}
				elif isPunctuation(source[i]) and (source[i] != "/" and source[i+1] != "*")
					if isWhiteSpace(source[i+1]) {
						minifiedSource += source[i]
						i++
					else
						minifiedSource += source[i]
					}
				else  minifiedSource+= source[i]
				}
			case TOKEN_MULTILINE_COMMENT
				if source[i] == '*' and source[i+1] == '/' and (source[i+2] != '"' or source[i+2] != "'") {
					i++ type = TOKEN_IDENTIFIER
				else 
					
				}
			case TOKEN_LITERAL_1
				minifiedSource+= source[i]
				if source[i] == '"' {
					type = TOKEN_IDENTIFIER
				}
			case TOKEN_LITERAL_2
				minifiedSource+= source[i]
				if source[i] == "'" {
					type = TOKEN_IDENTIFIER
				}
			default
				minifiedSource+= source[i]		
		}
	}
	__write_file(sourceFile.AbsolutePath, minifiedSource)
	@" (done)"
	
block isNewLine(val)
	return val == crlf or val = nl or val == cr

block help()
	stdout.println("usage:  minifier --s [SOURCE] [OPTIONS]

[SOURCE] : the folder or source file to be minified
[OPTIONS] : option passed to the modular program.

The [OPTIONS] include: 
	-y  --yes	do not ask permission")
	exit(0)
	
#TODO : move code to next line if the last block has return only and the next keyword is block SEE minified Object.sim
#TODO : implement a cache in the default os temp folder to revert back source in case of error
