/* 
	Copyright (c) 2018 Azeez Adewale <azeezadewale98@gmail.com> 
	MIT License Copyright (c) 2018 SIMPLE

*/

/* 
 * @Filename - bake.sim
 * @Author - Azeez Adewale
 * @Date - 08 April 2018
 * @Time - 02:56 AM
 */
 
 /*
		BAKE
		This program is is use for building distributable program
		written in simple to allow application or program written
		in simple to run on client or consumer computer without the 
		need of installing SIMPLE. The program generate executable
		that is runnable per Operating System build.
			Basically this program build your simple source to the 
		platform compatible. The outline below shows the currently 
		supported OS builds
		-----------------------------------
		| WINDOWS         |   .exe        |
		| MAC             |   .app        |
		| LINUX           |   ./program   |
		-----------------------------------
		
		COMMAND OPTIONS
		
			-F/</path>	specify the folder to place the program file
			-N/<name>	specify the output name of the program with no extension
			-I/icon		build your program with indicated icon
			-/h 		display this help note
			-temp -t	leave generated and temporary files after build
			-delete -del	delete the simple source file after successful build
			-debug		when the simple.h file is at ../../simple/src/include/simple.h
			-S/<simple.h> Indicate the path to simple.h
			
			(Compiler Option) ~ if none is supplied the available will be used
			-mingw		use mingw compiler on windows
			-cygwin		use cygwin compiler on windows
			-vs 		use available Visual Studio build tools on windows
		
		
 */
 
 
 
from simple.util.Conversion
from simple.io.File
from simple.io.Directory
from simple.core.String
from simple.system.System
from simple.system.SimpleX
from simple.util.Console
from archive.zip.Zip
from archive.zip.ZipEntry

Bakefile = null
final bakkrey = new Bakkery

/*

Parse "Bakefile"
*/
block main()
	header()
	bread = new Bread
	bread.SourceLang = "simple"
	
	params = cmdparams
	paramsLen = lengthOf(params) - 1
	if paramsLen < 0 { help() }
	for a = 0 to paramsLen {
		param = params[a]
		if param == "-f" {
			if a < paramsLen {
				Bakefile = params[a++]
				#parse bakefile
			else
				throw("bake","Expecting a Bakefile after the -f flag")
			}
		elif param == "-s" or param == "--static"
			bread.LinkStatically = true
			bread.LibraryExt = ".a"
			
		elif param == "-k" or param == "--keep"
			bread.KeepTemp = true
			
		elif param == "-g" or param == "--gui"
			bread.GUI = true
			
		elif param == "-z" or param == "--no-gui"
			bread.GUI = false
			
		elif param == "-x" or param == "--install"
			bread.Install = true
			
		elif strStartsWith(param,"-n=") or strStartsWith(param,"--name=")
			name = removeStr(param, "-n=")
			name = removeStr(name, "--name=")
			if name != "" {
				bread.Name = name
			}
			
		elif strStartsWith(param,"-i=") or strStartsWith(param,"--icon=")
			iconPath = removeStr(param, "-i=")
			iconPath = removeStr(iconPath, "--icon=")
			if iconPath != "" {
				bread.IconPath = iconPath
			}
			
		elif strStartsWith(param,"-s=") or strStartsWith(param,"--simple=")
			libPath = removeStr(param, "-s=")
			libPath = removeStr(libPath, "--simple=")
			if libPath != "" {
				bread.SimplePath = libPath
			}
			
		elif strStartsWith(param,"-inc=") or strStartsWith(param,"--include=")
			includeHeader = removeStr(param, "-inc=")
			includeHeader = removeStr(includeHeader, "--include=")
			if includeHeader != "" {
				bread.IncludeHeader = includeHeader
			}
			
		elif param == "-m" or param == "--mobile"
			bread.MobileOnly = true
			bread.BuildAll = false
			
		elif strEndsWith(param, ".sim")
			bread.SourceFile = new File(param)
			
		elif param == "x64" or param == "amd64"
			bread.BuildArch = "-m64"
			
		elif param == "x86" or param == "i386"
			bread.BuildArch = "-m32"
			
		elif param == "-h" or param == "--h"
			help()
		}
	}
	
	if isNull(bread.SourceFile) {
		throw("bake", "A simple source file (.sim) is not provided")
	}
	if bread.SourceFile.Exists {
		if isNull(bread.Name) {
			bread.Name = bread.SourceFile.NameOnly
		}
		bread.TempPath = new Directory(bread.SourceFile.Directory.AbsolutePath + bread.Name + "_bake/tmp/")
		if !bread.TempPath.Exists {
			stdout.print("\rcreating temp working directory...")
			bread.TempPath.create()
		}
		if bakkrey.Verbose {
			stdout.print("\nsimple -s "+bread.SourceFile.AbsolutePath+"")
		}
		system(bread.SimplePath+"simple -s "+bread.SourceFile.AbsolutePath+"")
		complexPath = bread.SourceFile.Directory.AbsolutePath+"/"+bread.SourceFile.NameOnly+".complex"
		bread.SourceFile = new File(complexPath)
		bread.SourceFile.moveTo(bread.TempPath.AbsolutePath,true)
		bread.TempPath = bread.TempPath.AbsolutePath
		bakkrey.bake(bread)
	else
		throw("bake","the " + bread.SourceLang + " source file '" + bread.SourceFile.Name + "' does not exists")
	}

block header() 
	header = "bake 0.0.2 (December 27 2018, 09:03 PM)\nsimple " + simpleVersion()
	stdout.println(header)
	
block help()
	help = 
"usage:  bake [Bakefile] [OPTIONS] [ENV_VARS]

[Bakefile] : the Bakefile that contains building instructions
[OPTIONS] : option passed to the program.
[ENV_VARS] : change environment variables in Bakefile

The OPTIONS include: 
 -f --file		provide a Bakefile
 -h --help		print this help and exit
 -k --keep		do not delete temp folders after build
 -g --gui		mark build as GUI to remove terminal on startup
 -z --no-gui		mark build as Console base to show terminal on startup
 x64 --64-bits		mark all build for 64 bits arc
 x86 --32-bits		mark all build for 32 bits arc
 -i --icon='<iconpath>'	build executable with icon
 -s --simple='<simplepath>'	specify the folder where simple shared lib is
 -inc --include='<includespath>'	the simple header file to link
 -l --lib='<libpath>'	specify where to find shared libraries at runtime
"
	stdout.println(help)
	__exit__
	
class Bread 

	SourceFile = null
	Name = null
	SourceLang = null
	TempPath = null
	IconPath = null
	BuildAll = true
	LinkStatically = false
	LibraryExt = "." + dynamicModuleExt()
	KeepTemp = false
	IsGui = false
	IsDebug = false
	BuildArch = "-m32"
	MobileOnly = false
	CFLAG = ""
	GUI = false
	Install = false
	SimplePath = ""
	IncludeHeader = "<simple/simple.h>"

class Bakkery

	Verbose = false

	block bake(Bread bread)
		stdout.print("\rpreparing to bake " + bread.Name)
		stdout.print("\rcreating wrapper code for : " + bread.Name + "...")
		
		cCode = writeWrapper(bread)
		tempFile = new FileWriter(bread.TempPath+"/"+bread.Name+".bake.c", false, true)
		tempFile.write(cCode)
		tempFile.close()
		stdout.print("(done)")
		if !isNull(bread.IconPath) {
			createIcon(bread)
		}
		buildExecutables(bread)
		if bread.Install {
			installExecutable(bread)
		}
		if !bread.KeepTemp {
			removeTemps(bread)
		}
		
	private
	
		block writeWrapper(Bread bread)
			cCode = '#include {INCLUDE_FILE}

int main( int argc, char *argv[]) {
	static const unsigned char sim_code[] = { {COMPLEX_HEX} };
	SimpleState *sState ;
	sState = init_simple_state();
	sState->argc = argc ;
	sState->argv = argv ;
	simple_execute_object(sState, (char *) sim_code, "{FILE_NAME}");
	finalize_simple_state(sState);
}'
			cCode = replaceStr(cCode, "{FILE_NAME}", bread.Name + ".sim")
			cCode = replaceStr(cCode, "{COMPLEX_HEX}",__string_to_chex(bread.SourceFile.readAllString()))
			if isWindows() {
				cCode = replaceStr(cCode, "{INCLUDE_FILE}", '"'+simpleIncludesDir()+'/simple.h"')
				if bread.GUI {
					cCode = replaceStr(cCode, "int main( int argc, char *argv[]) {", 'int WINAPI WinMain ( HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nShowCmd ) { int argc ; char **argv ; argc = __argc ; argv = __argv ; ')
				}
			else
				cCode = replaceStr(cCode, "{INCLUDE_FILE}", bread.IncludeHeader)
			}
			
			return cCode
			
		block createIcon(bread)
			stdout.printf("\n\rpreparing icon file...")
			if isWindows() {
				stdout.printf("\r%s\rpreparing icon file : creating resources file...", strCopy(" ", 20))
				tempFile = new FileWriter(bread.TempPath+"/"+bread.Name+".bake.rc", false, true)
				tempFile.write('MAINICON ICON "' + bread.IconPath + '"')
				tempFile.close()
				stdout.printf("\r%s\rpreparing icon file : compiling resources file...", strCopy(" ", 20))
				arch = "pe-x86-64"
				if bread.BuildArch == "-m32" {
					arch = "pe-i386"
				}
				cmd = 'windres ' + bread.TempPath+"/"+bread.Name+".bake.rc" + ' -F '+arch+' -O coff -o ' + bread.TempPath+"/"+bread.Name+".bake.res"
				system(cmd)
				bread.CFLAG += " "+bread.TempPath+"/"+bread.Name+".bake.res "
			} 
			stdout.print("(done)")
			
		block buildExecutables(bread) 
			stdout.print("\n\rpreparing to build executables...")
			if isLinux() and bread.BuildAll {
				stdout.printf("\r%s\rbuilding for linux...", strCopy(" ", 40))
				__mkdir(bread.TempPath+"/../linux/",0755)
				cmd = 'cc "-Wl,-rpath,./" "-Wl,-rpath,../lib/" "-Wl,-rpath,/lib/" "-Wl,-rpath,/usr/lib/" '+bread.CFLAG+' '+bread.BuildArch+' -I/$DESTDIR/$PREFIX/include/ -I/usr/include/ -lm -ldl -o "'+bread.TempPath+"/../linux/"+bread.Name+'" "'+bread.TempPath+"/"+bread.Name+".bake.c"+'" -L '+simpleExecDir()+' -lsimple'
				system(cmd)
				stdout.print("(done)")
				
			elif isWindows() and bread.BuildAll
				stdout.printf("\r%s\rbuilding for windows : compiling object code...", strCopy(" ", 40))
				cmd = 'gcc '+bread.BuildArch+' -c -g -MMD -MP -MF "' + bread.TempPath+"/"+bread.Name+".bake.c" + '.o.d" -o "' + bread.TempPath+"/"+bread.Name+".bake.c" + '.o" "'+bread.TempPath+"/"+bread.Name+".bake.c"+'"'
				system(cmd)
				__mkdir(bread.TempPath+"/../windows/",0755)
				__mkdir(bread.TempPath+"/../windows/",0755)
				if bread.GUI {
					bread.CFLAG += " -mwindows "
				}
				stdout.printf("\r%s\rbuilding for windows : generating executable...", strCopy(" ", 40))
				cmd = 'gcc '+bread.CFLAG+' '+bread.BuildArch+' -o "'+bread.TempPath+"/../windows/"+bread.Name+'.exe" "'+bread.TempPath+"/"+bread.Name+".bake.c"+'.o" '+simpleExecDir()+"/libsimple" + bread.LibraryExt
				system(cmd)
				stdout.print("(done)")
				
			elif isMacosx() and bread.BuildAll
				stdout.printf("\r%s\rbuilding for macosx...", strCopy(" ", 40))
				__mkdir(bread.TempPath+"/../macosx/",0755)
				cmd = 'cc "-Wl,-rpath,./" "-Wl,-rpath,../lib/" "-Wl,-rpath,/lib/" "-Wl,-rpath,/usr/lib/" '+bread.CFLAG+' '+bread.BuildArch+' -I/$DESTDIR/$PREFIX/include/ -I/usr/include/ -lm -ldl -o "'+bread.TempPath+"/../macosx/"+bread.Name+'" "'+bread.TempPath+"/"+bread.Name+".bake.c"+'" -L '+simpleExecDir()+' -lsimple'
				system(cmd)
				stdout.print("(done)")

			}
			
			if bread.BuildAll or bread.MobileOnly {
				
			}
			
		block installExecutable(bread)
			stdout.printf("\n\rinstalling "+bread.Name+'...')
			if isLinux() and bread.BuildAll {
				stdout.printf("\r%s\rinstalling "+bread.Name+' : detecting build directory...', strCopy(" ", 30))
				if __dir_exists(bread.TempPath+"/../linux/") {
					stdout.printf("\r%s\rinstalling "+bread.Name+' : detecting built executable...', strCopy(" ", 30))
					if __file_exists(bread.TempPath+"/../linux/"+bread.Name+'') {
						stdout.printf("\r%s\rinstalling "+bread.Name+' : copying built executable...', strCopy(" ", 33))
						__rename(bread.TempPath+"/../linux/"+bread.Name+'', exeFolder()+bread.Name+'')
						stdout.print("(done)")
					else
						stdout.printf("\r%s\rinstalling "+bread.Name+' : cannot detect built executable...(failed)', strCopy(" ", 33))
					}	
				else 
					stdout.printf("\r%s\rinstalling "+bread.Name+' : cannot detect build directory...(failed)', strCopy(" ", 33))
				}
			elif isWindows() and bread.BuildAll
				stdout.printf("\r%s\rinstalling "+bread.Name+'.exe : detecting build directory...', strCopy(" ", 33))
				if __dir_exists(bread.TempPath+"/../windows/") {
					stdout.printf("\r%s\rinstalling "+bread.Name+'.exe : detecting built executable...', strCopy(" ", 33))
					if __file_exists(bread.TempPath+"/../windows/"+bread.Name+'.exe') {
						stdout.printf("\r%s\rinstalling "+bread.Name+'.exe : copying built executable...', strCopy(" ", 37))
						__rename(bread.TempPath+"/../windows/"+bread.Name+'.exe', exeFolder()+bread.Name+'.exe')
						stdout.print("(done)")
					else
						stdout.printf("\r%s\rinstalling "+bread.Name+'.exe : cannot detect built executable...(failed)', strCopy(" ", 33))
					}	
				else 
					stdout.printf("\r%s\rinstalling "+bread.Name+'.exe : cannot detect build directory...(failed)', strCopy(" ", 33))
				}
			elif isMacosx() and bread.BuildAll
				stdout.printf("\r%s\rinstalling "+bread.Name+' : detecting build directory...', strCopy(" ", 30))
				if __dir_exists(bread.TempPath+"/../macosx/") {
					stdout.printf("\r%s\rinstalling "+bread.Name+' : detecting built executable...', strCopy(" ", 30))
					if __file_exists(bread.TempPath+"/../macosx/"+bread.Name+'') {
						stdout.printf("\r%s\rinstalling "+bread.Name+' : copying built executable...', strCopy(" ", 33))
						__rename(bread.TempPath+"/../macosx/"+bread.Name+'', exeFolder()+bread.Name+'')
						stdout.print("(done)")
					else
						stdout.printf("\r%s\rinstalling "+bread.Name+' : cannot detect built executable...(failed)', strCopy(" ", 33))
					}	
				else 
					stdout.printf("\r%s\rinstalling "+bread.Name+' : cannot detect build directory...(failed)', strCopy(" ", 33))
				}
			}
		
		block removeTemps(bread)
			stdout.printf("\n\rremoving temporary files and folders...")
			if bread.Install {
				dir = new Directory(bread.TempPath+"/../")
				dir.deleteRecursive()
			else
				dir = new Directory(bread.TempPath+"/")
				dir.deleteRecursive()
			}
			stdout.print("(done)")	
	
	
	
	
	
	
	
	
